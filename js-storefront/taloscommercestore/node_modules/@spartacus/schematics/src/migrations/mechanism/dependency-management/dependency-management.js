"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrateDependencies = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const dependencies_json_1 = __importDefault(require("../../../dependencies.json"));
const constants_1 = require("../../../shared/constants");
const lib_utils_1 = require("../../../shared/utils/lib-utils");
const package_utils_1 = require("../../../shared/utils/package-utils");
function migrateDependencies(tree, context, removedDependencies) {
    const packageJson = package_utils_1.readPackageJson(tree);
    const installedSpartacusLibs = collectSpartacusLibraryDependencies(packageJson);
    const dependencies = createSpartacusLibraryDependencies(installedSpartacusLibs);
    checkAndLogRemovedDependencies(packageJson, installedSpartacusLibs, removedDependencies, context.logger);
    return schematics_1.chain([
        lib_utils_1.addPackageJsonDependencies(dependencies),
        lib_utils_1.installPackageJsonDependencies(),
    ]);
}
exports.migrateDependencies = migrateDependencies;
function collectSpartacusLibraryDependencies(packageJson) {
    var _a;
    const dependencies = (_a = packageJson.dependencies) !== null && _a !== void 0 ? _a : {};
    return Object.keys(dependencies).filter((d) => d.startsWith(constants_1.SPARTACUS_SCOPE));
}
function createSpartacusLibraryDependencies(installedSpartacusLibs) {
    const dependenciesToAdd = [];
    for (const libraryName of installedSpartacusLibs) {
        const spartacusLibrary = dependencies_json_1.default[libraryName];
        dependenciesToAdd.push(...package_utils_1.createDependencies(spartacusLibrary, {
            skipScopes: package_utils_1.FEATURES_LIBS_SKIP_SCOPES,
            overwrite: true,
        }));
    }
    return dependenciesToAdd;
}
function checkAndLogRemovedDependencies(packageJson, installedSpartacusLibs, removedDependencies, logger) {
    var _a;
    const dependencies = (_a = packageJson.dependencies) !== null && _a !== void 0 ? _a : {};
    let allSpartacusDeps = [];
    for (const libraryName of installedSpartacusLibs) {
        const spartacusLibrary = dependencies_json_1.default[libraryName];
        allSpartacusDeps = allSpartacusDeps.concat(Object.keys(spartacusLibrary));
    }
    const removed = [];
    for (const removedDependency of removedDependencies) {
        if (!dependencies[removedDependency]) {
            continue;
        }
        if (!allSpartacusDeps.includes(removedDependency)) {
            removed.push(removedDependency);
        }
    }
    if (removed.length) {
        logger.warn(`Spartacus libraries no longer require the following dependencies: ${removed.join(',')}. If you don't use these dependencies in your application, you might want to consider removing them from your dependencies list.`);
    }
}
//# sourceMappingURL=dependency-management.js.map