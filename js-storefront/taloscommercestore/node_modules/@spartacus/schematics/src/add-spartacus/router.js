"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupRouterModule = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const ts_morph_1 = require("ts-morph");
const constants_1 = require("../shared/constants");
const import_utils_1 = require("../shared/utils/import-utils");
const new_module_utils_1 = require("../shared/utils/new-module-utils");
const program_1 = require("../shared/utils/program");
const project_tsconfig_paths_1 = require("../shared/utils/project-tsconfig-paths");
/** Migration that ensures that we have correct RouterModule.forRoot set */
function setupRouterModule(project) {
    return (tree) => {
        const { buildPaths } = project_tsconfig_paths_1.getProjectTsConfigPaths(tree, project);
        if (!buildPaths.length) {
            throw new schematics_1.SchematicsException('Could not find any tsconfig file. Cannot set RouterModule.');
        }
        const basePath = process.cwd();
        for (const tsconfigPath of buildPaths) {
            configureRouterModule(tree, tsconfigPath, basePath);
        }
        return tree;
    };
}
exports.setupRouterModule = setupRouterModule;
function configureRouterModule(tree, tsconfigPath, basePath) {
    const { appSourceFiles } = program_1.createProgram(tree, basePath, tsconfigPath);
    for (const sourceFile of appSourceFiles) {
        if (sourceFile.getFilePath().includes(`${constants_1.SPARTACUS_ROUTING_MODULE}.module.ts`)) {
            let routerModule = getRouterModule(sourceFile);
            if (!routerModule) {
                routerModule = new_module_utils_1.addModuleImport(sourceFile, {
                    import: {
                        moduleSpecifier: constants_1.ANGULAR_ROUTER,
                        namedImports: ['RouterModule'],
                    },
                    content: `RouterModule.forRoot([])`,
                });
            }
            configureOptionsInRouterModule(routerModule);
            program_1.saveAndFormat(sourceFile);
            break;
        }
    }
}
function getRouterModule(sourceFile) {
    let routerNode;
    function visitor(node) {
        if (ts_morph_1.Node.isCallExpression(node)) {
            const expression = node.getExpression();
            if (ts_morph_1.Node.isPropertyAccessExpression(expression)) {
                const exp = expression.getExpression();
                if (ts_morph_1.Node.isIdentifier(exp) &&
                    exp.getText() === 'RouterModule' &&
                    import_utils_1.isImportedFrom(exp, constants_1.ANGULAR_ROUTER) &&
                    expression.getName() === 'forRoot') {
                    const assignment = node.getFirstAncestorByKind(ts_morph_1.ts.SyntaxKind.PropertyAssignment);
                    if (assignment) {
                        const name = assignment.getStructure().name;
                        if (name === 'imports') {
                            const callExpression = node.getFirstAncestorByKind(ts_morph_1.ts.SyntaxKind.CallExpression);
                            if (callExpression) {
                                const exp = callExpression.getExpression();
                                if (ts_morph_1.Node.isIdentifier(exp) &&
                                    exp.getText() === 'NgModule' &&
                                    import_utils_1.isImportedFrom(exp, constants_1.ANGULAR_CORE)) {
                                    routerNode = node;
                                }
                            }
                        }
                    }
                }
            }
        }
        node.forEachChild(visitor);
    }
    sourceFile.forEachChild(visitor);
    return routerNode;
}
function configureOptionsInRouterModule(routerModule) {
    const args = routerModule.getArguments();
    const options = `{
  anchorScrolling: 'enabled',
  relativeLinkResolution: 'corrected',
  initialNavigation: 'enabled',
}`;
    if (args.length === 0) {
        routerModule.addArguments(['[]', options]);
    }
    else if (args.length === 1) {
        routerModule.addArgument(options);
    }
    else {
        // TODO: Maybe check the second argument and adjust properties
    }
}
//# sourceMappingURL=router.js.map