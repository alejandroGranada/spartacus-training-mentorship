import { ApplicationRef, Injectable } from '@angular/core';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { FeatureConfigService } from '@spartacus/core';
import * as i0 from "@angular/core";
import * as i1 from "@ng-bootstrap/ng-bootstrap";
import * as i2 from "@spartacus/core";
/**
 * A service to handle modal
 */
export class ModalService {
    constructor(ngbModalService, 
    // TODO: make this param required in 4.0
    applicationRef, 
    // TODO: drop this param in 4.0
    featureConfigService) {
        this.ngbModalService = ngbModalService;
        this.applicationRef = applicationRef;
        this.featureConfigService = featureConfigService;
        this.modals = [];
    }
    get rootComponent() {
        var _a, _b, _c, _d;
        return (_d = (_c = (_b = (_a = this.applicationRef) === null || _a === void 0 ? void 0 : _a.components) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.location) === null || _d === void 0 ? void 0 : _d.nativeElement;
    }
    open(content, options) {
        var _a;
        let activeModal;
        // TODO: make this logic default in 4.0
        if ((_a = this.featureConfigService) === null || _a === void 0 ? void 0 : _a.isLevel('3.3')) {
            options = Object.assign({ container: this.rootComponent }, options);
        }
        activeModal = this.ngbModalService.open(content, options);
        this.modals.push(activeModal);
        this.handleModalRemoveEvents(activeModal);
        return activeModal;
    }
    handleModalRemoveEvents(modal) {
        modal.result.finally(() => {
            this.modals = this.modals.filter((m) => m !== modal);
        });
    }
    getActiveModal() {
        const modal = this.modals[this.modals.length - 1];
        return modal ? modal : null;
    }
    dismissActiveModal(reason) {
        const modal = this.getActiveModal();
        if (modal) {
            modal.dismiss(reason);
        }
    }
    closeActiveModal(reason) {
        const modal = this.getActiveModal();
        if (modal) {
            modal.close(reason);
        }
    }
}
ModalService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ModalService_Factory() { return new ModalService(i0.ɵɵinject(i1.NgbModal), i0.ɵɵinject(i0.ApplicationRef), i0.ɵɵinject(i2.FeatureConfigService)); }, token: ModalService, providedIn: "root" });
ModalService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
ModalService.ctorParameters = () => [
    { type: NgbModal },
    { type: ApplicationRef },
    { type: FeatureConfigService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy9QYXRyeWsvRGVza3RvcC9zcGFydGFjdXMvcHJvamVjdHMvc3RvcmVmcm9udGxpYi9zcmMvIiwic291cmNlcyI6WyJzaGFyZWQvY29tcG9uZW50cy9tb2RhbC9tb2RhbC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7OztBQUl2RDs7R0FFRztBQUlILE1BQU0sT0FBTyxZQUFZO0lBYXZCLFlBQ1UsZUFBeUI7SUFDakMsd0NBQXdDO0lBQzlCLGNBQStCO0lBQ3pDLCtCQUErQjtJQUNyQixvQkFBMkM7UUFKN0Msb0JBQWUsR0FBZixlQUFlLENBQVU7UUFFdkIsbUJBQWMsR0FBZCxjQUFjLENBQWlCO1FBRS9CLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBdUI7UUFqQi9DLFdBQU0sR0FBZSxFQUFFLENBQUM7SUFrQjdCLENBQUM7SUFFSixJQUFjLGFBQWE7O1FBQ3pCLCtCQUFPLElBQUksQ0FBQyxjQUFjLDBDQUFFLFVBQVUsMENBQUcsQ0FBQywyQ0FBRyxRQUFRLDBDQUFFLGFBQWEsQ0FBQztJQUN2RSxDQUFDO0lBRUQsSUFBSSxDQUFDLE9BQVksRUFBRSxPQUFzQjs7UUFDdkMsSUFBSSxXQUFxQixDQUFDO1FBRTFCLHVDQUF1QztRQUN2QyxVQUFJLElBQUksQ0FBQyxvQkFBb0IsMENBQUUsT0FBTyxDQUFDLEtBQUssR0FBRztZQUM3QyxPQUFPLG1CQUFLLFNBQVMsRUFBRSxJQUFJLENBQUMsYUFBYSxJQUFLLE9BQU8sQ0FBRSxDQUFDO1NBQ3pEO1FBRUQsV0FBVyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsdUJBQXVCLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFMUMsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztJQUVTLHVCQUF1QixDQUFDLEtBQWU7UUFDL0MsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFO1lBQ3hCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQztRQUN2RCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxjQUFjO1FBQ1osTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNsRCxPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDOUIsQ0FBQztJQUVELGtCQUFrQixDQUFDLE1BQVk7UUFDN0IsTUFBTSxLQUFLLEdBQWEsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBRTlDLElBQUksS0FBSyxFQUFFO1lBQ1QsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN2QjtJQUNILENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxNQUFZO1FBQzNCLE1BQU0sS0FBSyxHQUFhLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUU5QyxJQUFJLEtBQUssRUFBRTtZQUNULEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDckI7SUFDSCxDQUFDOzs7O1lBcEVGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7O1lBVlEsUUFBUTtZQURSLGNBQWM7WUFFZCxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBsaWNhdGlvblJlZiwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdiTW9kYWwgfSBmcm9tICdAbmctYm9vdHN0cmFwL25nLWJvb3RzdHJhcCc7XG5pbXBvcnQgeyBGZWF0dXJlQ29uZmlnU2VydmljZSB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBNb2RhbE9wdGlvbnMgfSBmcm9tICcuL21vZGFsLW9wdGlvbnMnO1xuaW1wb3J0IHsgTW9kYWxSZWYgfSBmcm9tICcuL21vZGFsLXJlZic7XG5cbi8qKlxuICogQSBzZXJ2aWNlIHRvIGhhbmRsZSBtb2RhbFxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgTW9kYWxTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBtb2RhbHM6IE1vZGFsUmVmW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBuZ2JNb2RhbFNlcnZpY2U6IE5nYk1vZGFsLFxuICAgIGFwcGxpY2F0aW9uUmVmPzogQXBwbGljYXRpb25SZWYsXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC91bmlmaWVkLXNpZ25hdHVyZXNcbiAgICBmZWF0dXJlQ29uZmlnU2VydmljZT86IEZlYXR1cmVDb25maWdTZXJ2aWNlXG4gICk7XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBzaW5jZSAzLjNcbiAgICovXG4gIGNvbnN0cnVjdG9yKG5nYk1vZGFsU2VydmljZTogTmdiTW9kYWwpO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIG5nYk1vZGFsU2VydmljZTogTmdiTW9kYWwsXG4gICAgLy8gVE9ETzogbWFrZSB0aGlzIHBhcmFtIHJlcXVpcmVkIGluIDQuMFxuICAgIHByb3RlY3RlZCBhcHBsaWNhdGlvblJlZj86IEFwcGxpY2F0aW9uUmVmLFxuICAgIC8vIFRPRE86IGRyb3AgdGhpcyBwYXJhbSBpbiA0LjBcbiAgICBwcm90ZWN0ZWQgZmVhdHVyZUNvbmZpZ1NlcnZpY2U/OiBGZWF0dXJlQ29uZmlnU2VydmljZVxuICApIHt9XG5cbiAgcHJvdGVjdGVkIGdldCByb290Q29tcG9uZW50KCkge1xuICAgIHJldHVybiB0aGlzLmFwcGxpY2F0aW9uUmVmPy5jb21wb25lbnRzPy5bMF0/LmxvY2F0aW9uPy5uYXRpdmVFbGVtZW50O1xuICB9XG5cbiAgb3Blbihjb250ZW50OiBhbnksIG9wdGlvbnM/OiBNb2RhbE9wdGlvbnMpOiBNb2RhbFJlZiB7XG4gICAgbGV0IGFjdGl2ZU1vZGFsOiBNb2RhbFJlZjtcblxuICAgIC8vIFRPRE86IG1ha2UgdGhpcyBsb2dpYyBkZWZhdWx0IGluIDQuMFxuICAgIGlmICh0aGlzLmZlYXR1cmVDb25maWdTZXJ2aWNlPy5pc0xldmVsKCczLjMnKSkge1xuICAgICAgb3B0aW9ucyA9IHsgY29udGFpbmVyOiB0aGlzLnJvb3RDb21wb25lbnQsIC4uLm9wdGlvbnMgfTtcbiAgICB9XG5cbiAgICBhY3RpdmVNb2RhbCA9IHRoaXMubmdiTW9kYWxTZXJ2aWNlLm9wZW4oY29udGVudCwgb3B0aW9ucyk7XG4gICAgdGhpcy5tb2RhbHMucHVzaChhY3RpdmVNb2RhbCk7XG4gICAgdGhpcy5oYW5kbGVNb2RhbFJlbW92ZUV2ZW50cyhhY3RpdmVNb2RhbCk7XG5cbiAgICByZXR1cm4gYWN0aXZlTW9kYWw7XG4gIH1cblxuICBwcm90ZWN0ZWQgaGFuZGxlTW9kYWxSZW1vdmVFdmVudHMobW9kYWw6IE1vZGFsUmVmKTogdm9pZCB7XG4gICAgbW9kYWwucmVzdWx0LmZpbmFsbHkoKCkgPT4ge1xuICAgICAgdGhpcy5tb2RhbHMgPSB0aGlzLm1vZGFscy5maWx0ZXIoKG0pID0+IG0gIT09IG1vZGFsKTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldEFjdGl2ZU1vZGFsKCk6IE1vZGFsUmVmIHtcbiAgICBjb25zdCBtb2RhbCA9IHRoaXMubW9kYWxzW3RoaXMubW9kYWxzLmxlbmd0aCAtIDFdO1xuICAgIHJldHVybiBtb2RhbCA/IG1vZGFsIDogbnVsbDtcbiAgfVxuXG4gIGRpc21pc3NBY3RpdmVNb2RhbChyZWFzb24/OiBhbnkpOiB2b2lkIHtcbiAgICBjb25zdCBtb2RhbDogTW9kYWxSZWYgPSB0aGlzLmdldEFjdGl2ZU1vZGFsKCk7XG5cbiAgICBpZiAobW9kYWwpIHtcbiAgICAgIG1vZGFsLmRpc21pc3MocmVhc29uKTtcbiAgICB9XG4gIH1cblxuICBjbG9zZUFjdGl2ZU1vZGFsKHJlYXNvbj86IGFueSk6IHZvaWQge1xuICAgIGNvbnN0IG1vZGFsOiBNb2RhbFJlZiA9IHRoaXMuZ2V0QWN0aXZlTW9kYWwoKTtcblxuICAgIGlmIChtb2RhbCkge1xuICAgICAgbW9kYWwuY2xvc2UocmVhc29uKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==