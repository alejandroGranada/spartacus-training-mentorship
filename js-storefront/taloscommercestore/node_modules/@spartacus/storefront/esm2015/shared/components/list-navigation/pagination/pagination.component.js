import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { PaginationBuilder } from './pagination.builder';
import { PaginationItemType } from './pagination.model';
/**
 * The `PaginationComponent` is a generic component that is used for
 * all lists in Spartacus that require pagination. The component supports
 * all common features, which can be configured or hidden by CSS.
 */
export class PaginationComponent {
    constructor(paginationBuilder, activatedRoute) {
        this.paginationBuilder = paginationBuilder;
        this.activatedRoute = activatedRoute;
        this.viewPageEvent = new EventEmitter();
        this.pages = [];
    }
    get pagination() {
        return this._pagination;
    }
    set pagination(value) {
        this._pagination = value;
        this.render(value);
    }
    render(pagination) {
        if (!pagination) {
            return;
        }
        this.pages = this.paginationBuilder.paginate(pagination.totalPages, pagination.currentPage);
    }
    /**
     * Indicates whether the given item is the current item.
     *
     * @param item PaginationItem
     * @returns boolean
     */
    isCurrent(item) {
        return (item.type === PaginationItemType.PAGE &&
            item.number === this.pagination.currentPage);
    }
    /**
     * Indicates whether the pagination item is inactive. This is used
     * to disabled a link or set the tabindex to `-1`.
     *
     * Defaults to true
     *
     * @param item PaginationItem
     * @returns returns -1 in case of a disabled
     */
    isInactive(item) {
        return (!item.hasOwnProperty('number') ||
            item.number === this.pagination.currentPage);
    }
    getQueryParams(item) {
        const queryParams = Object.assign({}, this.activatedRoute.snapshot.queryParams);
        if (this.queryParam &&
            item.number < this.pagination.totalPages &&
            !this.isCurrent(item)) {
            queryParams[this.queryParam] = item.number;
        }
        // omit the page number from the query parameters in case it's the default
        // to clean up the experience and avoid unnecessary polluting of the URL
        if (queryParams[this.queryParam] === this.defaultPage) {
            delete queryParams[this.queryParam];
        }
        return queryParams;
    }
    pageChange(page) {
        this.viewPageEvent.emit(page.number);
    }
}
PaginationComponent.decorators = [
    { type: Component, args: [{
                selector: 'cx-pagination',
                template: "<a\n  *ngFor=\"let item of pages\"\n  [class]=\"item.type\"\n  [class.disabled]=\"isInactive(item)\"\n  [class.current]=\"isCurrent(item)\"\n  [routerLink]=\"pageRoute\"\n  [queryParams]=\"getQueryParams(item)\"\n  [tabIndex]=\"isInactive(item) ? -1 : 0\"\n  (click)=\"pageChange(item)\"\n>\n  {{ item.label }}\n</a>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
PaginationComponent.ctorParameters = () => [
    { type: PaginationBuilder },
    { type: ActivatedRoute }
];
PaginationComponent.propDecorators = {
    pageRoute: [{ type: Input }],
    queryParam: [{ type: Input }],
    defaultPage: [{ type: Input }],
    pagination: [{ type: Input }],
    viewPageEvent: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvUGF0cnlrL0Rlc2t0b3Avc3BhcnRhY3VzL3Byb2plY3RzL3N0b3JlZnJvbnRsaWIvc3JjLyIsInNvdXJjZXMiOlsic2hhcmVkL2NvbXBvbmVudHMvbGlzdC1uYXZpZ2F0aW9uL3BhZ2luYXRpb24vcGFnaW5hdGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsWUFBWSxFQUNaLEtBQUssRUFDTCxNQUFNLEdBQ1AsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGNBQWMsRUFBVSxNQUFNLGlCQUFpQixDQUFDO0FBRXpELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3pELE9BQU8sRUFBa0Isa0JBQWtCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUV4RTs7OztHQUlHO0FBTUgsTUFBTSxPQUFPLG1CQUFtQjtJQTBCOUIsWUFDVSxpQkFBb0MsRUFDcEMsY0FBOEI7UUFEOUIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUNwQyxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFOOUIsa0JBQWEsR0FBeUIsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUUzRSxVQUFLLEdBQXFCLEVBQUUsQ0FBQztJQUsxQixDQUFDO0lBZkosSUFBSSxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzFCLENBQUM7SUFDRCxJQUFhLFVBQVUsQ0FBQyxLQUFzQjtRQUM1QyxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztRQUN6QixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFXUyxNQUFNLENBQUMsVUFBMkI7UUFDMUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNmLE9BQU87U0FDUjtRQUNELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FDMUMsVUFBVSxDQUFDLFVBQVUsRUFDckIsVUFBVSxDQUFDLFdBQVcsQ0FDdkIsQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILFNBQVMsQ0FBQyxJQUFvQjtRQUM1QixPQUFPLENBQ0wsSUFBSSxDQUFDLElBQUksS0FBSyxrQkFBa0IsQ0FBQyxJQUFJO1lBQ3JDLElBQUksQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQzVDLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7Ozs7O09BUUc7SUFDSCxVQUFVLENBQUMsSUFBb0I7UUFDN0IsT0FBTyxDQUNMLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUM7WUFDOUIsSUFBSSxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FDNUMsQ0FBQztJQUNKLENBQUM7SUFFRCxjQUFjLENBQUMsSUFBb0I7UUFDakMsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FDL0IsRUFBRSxFQUNGLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FDekMsQ0FBQztRQUNGLElBQ0UsSUFBSSxDQUFDLFVBQVU7WUFDZixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVTtZQUN4QyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQ3JCO1lBQ0EsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1NBQzVDO1FBQ0QsMEVBQTBFO1FBQzFFLHdFQUF3RTtRQUN4RSxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNyRCxPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDckM7UUFDRCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0lBRUQsVUFBVSxDQUFDLElBQW9CO1FBQzdCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN2QyxDQUFDOzs7WUFqR0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxlQUFlO2dCQUN6QiwwVUFBMEM7Z0JBQzFDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2hEOzs7WUFaUSxpQkFBaUI7WUFGakIsY0FBYzs7O3dCQWlCcEIsS0FBSzt5QkFHTCxLQUFLOzBCQU1MLEtBQUs7eUJBTUwsS0FBSzs0QkFLTCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT3V0cHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlLCBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgUGFnaW5hdGlvbk1vZGVsIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IFBhZ2luYXRpb25CdWlsZGVyIH0gZnJvbSAnLi9wYWdpbmF0aW9uLmJ1aWxkZXInO1xuaW1wb3J0IHsgUGFnaW5hdGlvbkl0ZW0sIFBhZ2luYXRpb25JdGVtVHlwZSB9IGZyb20gJy4vcGFnaW5hdGlvbi5tb2RlbCc7XG5cbi8qKlxuICogVGhlIGBQYWdpbmF0aW9uQ29tcG9uZW50YCBpcyBhIGdlbmVyaWMgY29tcG9uZW50IHRoYXQgaXMgdXNlZCBmb3JcbiAqIGFsbCBsaXN0cyBpbiBTcGFydGFjdXMgdGhhdCByZXF1aXJlIHBhZ2luYXRpb24uIFRoZSBjb21wb25lbnQgc3VwcG9ydHNcbiAqIGFsbCBjb21tb24gZmVhdHVyZXMsIHdoaWNoIGNhbiBiZSBjb25maWd1cmVkIG9yIGhpZGRlbiBieSBDU1MuXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2N4LXBhZ2luYXRpb24nLFxuICB0ZW1wbGF0ZVVybDogJy4vcGFnaW5hdGlvbi5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBQYWdpbmF0aW9uQ29tcG9uZW50IHtcbiAgLyoqIFRoZSAob3B0aW9uYWwpIHBhZ2VSb3V0ZSB1c2VkIGZvciB0aGUgYW5jaG9yIGxpbmtzIGNyZWF0ZWQgaW4gdGhlIHBhZ2luYXRpb24gICAqL1xuICBASW5wdXQoKSBwYWdlUm91dGU6IHN0cmluZztcblxuICAvKiogVGhlIChvcHRpb25hbCkgcXVlcnkgcGFyYW1ldGVyIHdoaWNoIGlzIGFkZGVkIHRvIHRoZSBwYWdlIHJvdXRlLiAgKi9cbiAgQElucHV0KCkgcXVlcnlQYXJhbTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBXaGVuZXZlciB0aGVyZSdzIGEgZGVmYXVsdCBwYWdlIHNwZWNpZmllZCwgdGhlIHJvdXRpbmcgbG9naWNcbiAgICogd2lsbCBvbWl0IHRoZSBwYWdlIG51bWJlciBpbiByb3V0ZUxpbmsgb3IgcGFyYW1ldGVycy5cbiAgICovXG4gIEBJbnB1dCgpIGRlZmF1bHRQYWdlO1xuXG4gIHByaXZhdGUgX3BhZ2luYXRpb246IFBhZ2luYXRpb25Nb2RlbDtcbiAgZ2V0IHBhZ2luYXRpb24oKTogUGFnaW5hdGlvbk1vZGVsIHtcbiAgICByZXR1cm4gdGhpcy5fcGFnaW5hdGlvbjtcbiAgfVxuICBASW5wdXQoKSBzZXQgcGFnaW5hdGlvbih2YWx1ZTogUGFnaW5hdGlvbk1vZGVsKSB7XG4gICAgdGhpcy5fcGFnaW5hdGlvbiA9IHZhbHVlO1xuICAgIHRoaXMucmVuZGVyKHZhbHVlKTtcbiAgfVxuXG4gIEBPdXRwdXQoKSB2aWV3UGFnZUV2ZW50OiBFdmVudEVtaXR0ZXI8bnVtYmVyPiA9IG5ldyBFdmVudEVtaXR0ZXI8bnVtYmVyPigpO1xuXG4gIHBhZ2VzOiBQYWdpbmF0aW9uSXRlbVtdID0gW107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBwYWdpbmF0aW9uQnVpbGRlcjogUGFnaW5hdGlvbkJ1aWxkZXIsXG4gICAgcHJpdmF0ZSBhY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGVcbiAgKSB7fVxuXG4gIHByb3RlY3RlZCByZW5kZXIocGFnaW5hdGlvbjogUGFnaW5hdGlvbk1vZGVsKTogdm9pZCB7XG4gICAgaWYgKCFwYWdpbmF0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMucGFnZXMgPSB0aGlzLnBhZ2luYXRpb25CdWlsZGVyLnBhZ2luYXRlKFxuICAgICAgcGFnaW5hdGlvbi50b3RhbFBhZ2VzLFxuICAgICAgcGFnaW5hdGlvbi5jdXJyZW50UGFnZVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGdpdmVuIGl0ZW0gaXMgdGhlIGN1cnJlbnQgaXRlbS5cbiAgICpcbiAgICogQHBhcmFtIGl0ZW0gUGFnaW5hdGlvbkl0ZW1cbiAgICogQHJldHVybnMgYm9vbGVhblxuICAgKi9cbiAgaXNDdXJyZW50KGl0ZW06IFBhZ2luYXRpb25JdGVtKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgIGl0ZW0udHlwZSA9PT0gUGFnaW5hdGlvbkl0ZW1UeXBlLlBBR0UgJiZcbiAgICAgIGl0ZW0ubnVtYmVyID09PSB0aGlzLnBhZ2luYXRpb24uY3VycmVudFBhZ2VcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBwYWdpbmF0aW9uIGl0ZW0gaXMgaW5hY3RpdmUuIFRoaXMgaXMgdXNlZFxuICAgKiB0byBkaXNhYmxlZCBhIGxpbmsgb3Igc2V0IHRoZSB0YWJpbmRleCB0byBgLTFgLlxuICAgKlxuICAgKiBEZWZhdWx0cyB0byB0cnVlXG4gICAqXG4gICAqIEBwYXJhbSBpdGVtIFBhZ2luYXRpb25JdGVtXG4gICAqIEByZXR1cm5zIHJldHVybnMgLTEgaW4gY2FzZSBvZiBhIGRpc2FibGVkXG4gICAqL1xuICBpc0luYWN0aXZlKGl0ZW06IFBhZ2luYXRpb25JdGVtKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgICFpdGVtLmhhc093blByb3BlcnR5KCdudW1iZXInKSB8fFxuICAgICAgaXRlbS5udW1iZXIgPT09IHRoaXMucGFnaW5hdGlvbi5jdXJyZW50UGFnZVxuICAgICk7XG4gIH1cblxuICBnZXRRdWVyeVBhcmFtcyhpdGVtOiBQYWdpbmF0aW9uSXRlbSk6IFBhcmFtcyB7XG4gICAgY29uc3QgcXVlcnlQYXJhbXMgPSBPYmplY3QuYXNzaWduKFxuICAgICAge30sXG4gICAgICB0aGlzLmFjdGl2YXRlZFJvdXRlLnNuYXBzaG90LnF1ZXJ5UGFyYW1zXG4gICAgKTtcbiAgICBpZiAoXG4gICAgICB0aGlzLnF1ZXJ5UGFyYW0gJiZcbiAgICAgIGl0ZW0ubnVtYmVyIDwgdGhpcy5wYWdpbmF0aW9uLnRvdGFsUGFnZXMgJiZcbiAgICAgICF0aGlzLmlzQ3VycmVudChpdGVtKVxuICAgICkge1xuICAgICAgcXVlcnlQYXJhbXNbdGhpcy5xdWVyeVBhcmFtXSA9IGl0ZW0ubnVtYmVyO1xuICAgIH1cbiAgICAvLyBvbWl0IHRoZSBwYWdlIG51bWJlciBmcm9tIHRoZSBxdWVyeSBwYXJhbWV0ZXJzIGluIGNhc2UgaXQncyB0aGUgZGVmYXVsdFxuICAgIC8vIHRvIGNsZWFuIHVwIHRoZSBleHBlcmllbmNlIGFuZCBhdm9pZCB1bm5lY2Vzc2FyeSBwb2xsdXRpbmcgb2YgdGhlIFVSTFxuICAgIGlmIChxdWVyeVBhcmFtc1t0aGlzLnF1ZXJ5UGFyYW1dID09PSB0aGlzLmRlZmF1bHRQYWdlKSB7XG4gICAgICBkZWxldGUgcXVlcnlQYXJhbXNbdGhpcy5xdWVyeVBhcmFtXTtcbiAgICB9XG4gICAgcmV0dXJuIHF1ZXJ5UGFyYW1zO1xuICB9XG5cbiAgcGFnZUNoYW5nZShwYWdlOiBQYWdpbmF0aW9uSXRlbSk6IHZvaWQge1xuICAgIHRoaXMudmlld1BhZ2VFdmVudC5lbWl0KHBhZ2UubnVtYmVyKTtcbiAgfVxufVxuIl19