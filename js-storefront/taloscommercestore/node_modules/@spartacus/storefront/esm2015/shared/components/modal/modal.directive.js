import { Directive, HostListener, Injectable, Input, Optional, } from '@angular/core';
import { Router, RouterLink, RouterLinkWithHref } from '@angular/router';
import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';
import * as i0 from "@angular/core";
/**
 * Service to control the behavior of the DismissModalDirective
 */
export class ModalDirectiveService {
    /**
     * Handler for the click event on the directive
     *
     * @param options.type    Action to perform after click - close or dismiss
     * @param options.reason  Reason for dismissing or closing the modal
     * @param url             url (optional) - exists only when the directive is also a `routerLink`.
     */
    onClick(options, activeModal, url) {
        let reason = options.reason;
        if (!reason && url) {
            reason = `Link click: ${url}`;
        }
        if (options.type === 'dismiss') {
            activeModal.dismiss(reason);
        }
        else if (options.type === 'close') {
            activeModal.close(reason);
        }
    }
}
ModalDirectiveService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ModalDirectiveService_Factory() { return new ModalDirectiveService(); }, token: ModalDirectiveService, providedIn: "root" });
ModalDirectiveService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/**
 * Directive to dismiss the modal on click
 */
export class ModalDirective {
    constructor(service, router, 
    // active modal can be injected only when the directive is projected inside modal
    activeModal, routerLink, routerLinkWithHref) {
        this.service = service;
        this.router = router;
        this.activeModal = activeModal;
        this.routerLink = routerLink;
        this.routerLinkWithHref = routerLinkWithHref;
    }
    /**
     * Returns URL in case when the directive is in the scope of a `routerLink` directive at the same time.
     */
    getUrl() {
        var _a;
        const routerLink = (_a = this.routerLink) !== null && _a !== void 0 ? _a : this.routerLinkWithHref;
        return routerLink
            ? this.router.serializeUrl(routerLink.urlTree)
            : undefined;
    }
    onClick() {
        if (this.activeModal) {
            this.service.onClick(this.options, this.activeModal, this.getUrl());
        }
    }
    /**
     * Converts the directive's inputs to the shape of modal directive options
     */
    get options() {
        return { type: this.cxModal, reason: this.cxModalReason };
    }
}
ModalDirective.decorators = [
    { type: Directive, args: [{
                selector: '[cxModal]',
            },] }
];
ModalDirective.ctorParameters = () => [
    { type: ModalDirectiveService },
    { type: Router },
    { type: NgbActiveModal, decorators: [{ type: Optional }] },
    { type: RouterLink, decorators: [{ type: Optional }] },
    { type: RouterLinkWithHref, decorators: [{ type: Optional }] }
];
ModalDirective.propDecorators = {
    cxModal: [{ type: Input }],
    cxModalReason: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9wcm9qZWN0cy9zdG9yZWZyb250bGliL3NyYy8iLCJzb3VyY2VzIjpbInNoYXJlZC9jb21wb25lbnRzL21vZGFsL21vZGFsLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFlBQVksRUFDWixVQUFVLEVBQ1YsS0FBSyxFQUNMLFFBQVEsR0FDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7QUFjNUQ7O0dBRUc7QUFJSCxNQUFNLE9BQU8scUJBQXFCO0lBQ2hDOzs7Ozs7T0FNRztJQUNILE9BQU8sQ0FDTCxPQUE4QixFQUM5QixXQUEyQixFQUMzQixHQUFZO1FBRVosSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUU1QixJQUFJLENBQUMsTUFBTSxJQUFJLEdBQUcsRUFBRTtZQUNsQixNQUFNLEdBQUcsZUFBZSxHQUFHLEVBQUUsQ0FBQztTQUMvQjtRQUVELElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxTQUFTLEVBQUU7WUFDOUIsV0FBVyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUM3QjthQUFNLElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxPQUFPLEVBQUU7WUFDbkMsV0FBVyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUMzQjtJQUNILENBQUM7Ozs7WUEzQkYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COztBQTRCRDs7R0FFRztBQUlILE1BQU0sT0FBTyxjQUFjO0lBYXpCLFlBQ1ksT0FBOEIsRUFDOUIsTUFBYztJQUV4QixpRkFBaUY7SUFDM0QsV0FBMkIsRUFFM0IsVUFBc0IsRUFDdEIsa0JBQXNDO1FBUGxELFlBQU8sR0FBUCxPQUFPLENBQXVCO1FBQzlCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFHRixnQkFBVyxHQUFYLFdBQVcsQ0FBZ0I7UUFFM0IsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0Qix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO0lBQzNELENBQUM7SUFFSjs7T0FFRztJQUNPLE1BQU07O1FBQ2QsTUFBTSxVQUFVLFNBQUcsSUFBSSxDQUFDLFVBQVUsbUNBQUksSUFBSSxDQUFDLGtCQUFrQixDQUFDO1FBQzlELE9BQU8sVUFBVTtZQUNmLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDO1lBQzlDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDaEIsQ0FBQztJQUdELE9BQU87UUFDTCxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1NBQ3JFO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBYyxPQUFPO1FBQ25CLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQzVELENBQUM7OztZQWpERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFdBQVc7YUFDdEI7OztZQWVzQixxQkFBcUI7WUFwRW5DLE1BQU07WUFDTixjQUFjLHVCQXVFbEIsUUFBUTtZQXhFSSxVQUFVLHVCQTBFdEIsUUFBUTtZQTFFZ0Isa0JBQWtCLHVCQTJFMUMsUUFBUTs7O3NCQWZWLEtBQUs7NEJBS0wsS0FBSztzQkF1QkwsWUFBWSxTQUFDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEhvc3RMaXN0ZW5lcixcbiAgSW5qZWN0YWJsZSxcbiAgSW5wdXQsXG4gIE9wdGlvbmFsLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciwgUm91dGVyTGluaywgUm91dGVyTGlua1dpdGhIcmVmIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IE5nYkFjdGl2ZU1vZGFsIH0gZnJvbSAnQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1vZGFsRGlyZWN0aXZlT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBBY3Rpb24gdG8gcGVyZm9ybSBhZnRlciBjbGlja1xuICAgKi9cbiAgdHlwZTogJ2Rpc21pc3MnIHwgJ2Nsb3NlJztcblxuICAvKipcbiAgICogUmVhc29uIGZvciBkaXNtaXNzaW5nIG9yIGNsb3NpbmcgdGhlIG1vZGFsXG4gICAqL1xuICByZWFzb24/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogU2VydmljZSB0byBjb250cm9sIHRoZSBiZWhhdmlvciBvZiB0aGUgRGlzbWlzc01vZGFsRGlyZWN0aXZlXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBNb2RhbERpcmVjdGl2ZVNlcnZpY2Uge1xuICAvKipcbiAgICogSGFuZGxlciBmb3IgdGhlIGNsaWNrIGV2ZW50IG9uIHRoZSBkaXJlY3RpdmVcbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMudHlwZSAgICBBY3Rpb24gdG8gcGVyZm9ybSBhZnRlciBjbGljayAtIGNsb3NlIG9yIGRpc21pc3NcbiAgICogQHBhcmFtIG9wdGlvbnMucmVhc29uICBSZWFzb24gZm9yIGRpc21pc3Npbmcgb3IgY2xvc2luZyB0aGUgbW9kYWxcbiAgICogQHBhcmFtIHVybCAgICAgICAgICAgICB1cmwgKG9wdGlvbmFsKSAtIGV4aXN0cyBvbmx5IHdoZW4gdGhlIGRpcmVjdGl2ZSBpcyBhbHNvIGEgYHJvdXRlckxpbmtgLlxuICAgKi9cbiAgb25DbGljayhcbiAgICBvcHRpb25zOiBNb2RhbERpcmVjdGl2ZU9wdGlvbnMsXG4gICAgYWN0aXZlTW9kYWw6IE5nYkFjdGl2ZU1vZGFsLFxuICAgIHVybD86IHN0cmluZ1xuICApOiB2b2lkIHtcbiAgICBsZXQgcmVhc29uID0gb3B0aW9ucy5yZWFzb247XG5cbiAgICBpZiAoIXJlYXNvbiAmJiB1cmwpIHtcbiAgICAgIHJlYXNvbiA9IGBMaW5rIGNsaWNrOiAke3VybH1gO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnR5cGUgPT09ICdkaXNtaXNzJykge1xuICAgICAgYWN0aXZlTW9kYWwuZGlzbWlzcyhyZWFzb24pO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy50eXBlID09PSAnY2xvc2UnKSB7XG4gICAgICBhY3RpdmVNb2RhbC5jbG9zZShyZWFzb24pO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIERpcmVjdGl2ZSB0byBkaXNtaXNzIHRoZSBtb2RhbCBvbiBjbGlja1xuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbY3hNb2RhbF0nLFxufSlcbmV4cG9ydCBjbGFzcyBNb2RhbERpcmVjdGl2ZSB7XG4gIC8qKlxuICAgKiBBY3Rpb24gdG8gcGVyZm9ybSwgd2hlbiB0aGUgZGlyZWN0aXZlIGlzIGNsaWNrZWQgLSBkaXNtaXNzIG9yIGNsb3NlLlxuICAgKlxuICAgKiBSZWFzb24gY2FuIGJlIGdpdmVuIHZpYSBpbnB1dCBgY3hNb2RhbFJlYXNvbmAsIHdoaWNoIGZhbGxiYWNrcyB0byBVUkwgb2YgdGhlIGByb3V0ZXJMaW5rYCAoaWYgZXhpc3RzIG9uIHRoZSBzYW1lIGVsZW1lbnQpLlxuICAgKi9cbiAgQElucHV0KCkgY3hNb2RhbDogTW9kYWxEaXJlY3RpdmVPcHRpb25zWyd0eXBlJ107XG5cbiAgLyoqXG4gICAqIFJlYXNvbiBmb3IgY2xvc2luZy9kaXNtaXNzaW5nIHRoZSBtb2RhbC4gRmFsbGJhY2tzIHRvIFVSTCBvZiB0aGUgYHJvdXRlckxpbmtgIChpZiBleGlzdHMgb24gdGhlIHNhbWUgZWxlbWVudCkuXG4gICAqL1xuICBASW5wdXQoKSBjeE1vZGFsUmVhc29uOiBNb2RhbERpcmVjdGl2ZU9wdGlvbnNbJ3JlYXNvbiddO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBzZXJ2aWNlOiBNb2RhbERpcmVjdGl2ZVNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIHJvdXRlcjogUm91dGVyLFxuXG4gICAgLy8gYWN0aXZlIG1vZGFsIGNhbiBiZSBpbmplY3RlZCBvbmx5IHdoZW4gdGhlIGRpcmVjdGl2ZSBpcyBwcm9qZWN0ZWQgaW5zaWRlIG1vZGFsXG4gICAgQE9wdGlvbmFsKCkgcHJvdGVjdGVkIGFjdGl2ZU1vZGFsOiBOZ2JBY3RpdmVNb2RhbCxcblxuICAgIEBPcHRpb25hbCgpIHByb3RlY3RlZCByb3V0ZXJMaW5rOiBSb3V0ZXJMaW5rLFxuICAgIEBPcHRpb25hbCgpIHByb3RlY3RlZCByb3V0ZXJMaW5rV2l0aEhyZWY6IFJvdXRlckxpbmtXaXRoSHJlZlxuICApIHt9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgVVJMIGluIGNhc2Ugd2hlbiB0aGUgZGlyZWN0aXZlIGlzIGluIHRoZSBzY29wZSBvZiBhIGByb3V0ZXJMaW5rYCBkaXJlY3RpdmUgYXQgdGhlIHNhbWUgdGltZS5cbiAgICovXG4gIHByb3RlY3RlZCBnZXRVcmwoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCByb3V0ZXJMaW5rID0gdGhpcy5yb3V0ZXJMaW5rID8/IHRoaXMucm91dGVyTGlua1dpdGhIcmVmO1xuICAgIHJldHVybiByb3V0ZXJMaW5rXG4gICAgICA/IHRoaXMucm91dGVyLnNlcmlhbGl6ZVVybChyb3V0ZXJMaW5rLnVybFRyZWUpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcbiAgb25DbGljaygpIHtcbiAgICBpZiAodGhpcy5hY3RpdmVNb2RhbCkge1xuICAgICAgdGhpcy5zZXJ2aWNlLm9uQ2xpY2sodGhpcy5vcHRpb25zLCB0aGlzLmFjdGl2ZU1vZGFsLCB0aGlzLmdldFVybCgpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgdGhlIGRpcmVjdGl2ZSdzIGlucHV0cyB0byB0aGUgc2hhcGUgb2YgbW9kYWwgZGlyZWN0aXZlIG9wdGlvbnNcbiAgICovXG4gIHByb3RlY3RlZCBnZXQgb3B0aW9ucygpOiBNb2RhbERpcmVjdGl2ZU9wdGlvbnMge1xuICAgIHJldHVybiB7IHR5cGU6IHRoaXMuY3hNb2RhbCwgcmVhc29uOiB0aGlzLmN4TW9kYWxSZWFzb24gfTtcbiAgfVxufVxuIl19