import { ChangeDetectionStrategy, Component, ElementRef, Input, isDevMode, } from '@angular/core';
import { tap } from 'rxjs/operators';
import { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';
import { CarouselService } from './carousel.service';
/**
 * Generic carousel component that can be used to render any carousel items,
 * such as products, images, banners, or any component. Carousel items are
 * rendered in so-called carousel slides, and the previous/next buttons as well as
 * the indicator-buttons can used to navigate the slides.
 *
 * The component uses an array of Observables (`items$`) as an input, to allow
 * for lazy loading of items.
 *
 * The number of items per slide is calculated with the `itemWidth`, which can given
 * in pixels or percentage.
 *
 * To allow for flexible rendering of items, the rendering is delegated to the
 * given `template`. This allows for maximum flexibility.
 */
export class CarouselComponent {
    constructor(el, service) {
        this.el = el;
        this.service = service;
        /**
         * Specifies the minimum size of the carousel item, either in px or %.
         * This value is used for the calculation of numbers per carousel, so that
         * the number of carousel items is dynamic. The calculation uses the `itemWidth`
         * and the host element `clientWidth`, so that the carousel is reusable in
         * different layouts (for example in a 50% grid).
         */
        this.itemWidth = '300px';
        /**
         * Indicates whether the visual indicators are used.
         */
        this.hideIndicators = false;
        this.indicatorIcon = ICON_TYPE.CIRCLE;
        this.previousIcon = ICON_TYPE.CARET_LEFT;
        this.nextIcon = ICON_TYPE.CARET_RIGHT;
    }
    set setItems(inputItems) {
        this.items = inputItems;
        //Reset slider when changing products
        this.activeSlide = 0;
    }
    ngOnInit() {
        if (!this.template && isDevMode()) {
            console.error('No template reference provided to render the carousel items for the `cx-carousel`');
            return;
        }
        this.size$ = this.service
            .getItemsPerSlide(this.el.nativeElement, this.itemWidth)
            .pipe(tap(() => (this.activeSlide = 0)));
    }
}
CarouselComponent.decorators = [
    { type: Component, args: [{
                selector: 'cx-carousel',
                template: "<ng-container *ngIf=\"items?.length > 0 && (size$ | async) as size\">\n  <h3 *ngIf=\"title\">{{ title }}</h3>\n\n  <div class=\"carousel-panel\" [ngClass]=\"'size-' + size\">\n    <button\n      *ngIf=\"size < items.length\"\n      class=\"previous\"\n      (click)=\"activeSlide = activeSlide - size\"\n      [disabled]=\"activeSlide === 0\"\n    >\n      <cx-icon [type]=\"previousIcon\"></cx-icon>\n    </button>\n\n    <div class=\"slides\">\n      <ng-container *ngFor=\"let _ of items; let i = index\">\n        <div\n          class=\"slide\"\n          *ngIf=\"i % size === 0\"\n          [class.active]=\"i === activeSlide\"\n        >\n          <ng-container\n            *ngFor=\"let item of items | slice: i:i + size; let j = index\"\n          >\n            <div\n              *ngIf=\"item | async as data\"\n              class=\"item\"\n              [class.active]=\"i === activeSlide\"\n            >\n              <ng-container\n                *ngTemplateOutlet=\"template; context: { item: data }\"\n              ></ng-container>\n            </div>\n          </ng-container>\n        </div>\n      </ng-container>\n    </div>\n\n    <button\n      *ngIf=\"size < items.length\"\n      class=\"next\"\n      (click)=\"activeSlide = activeSlide + size\"\n      tabindex=\"-1\"\n      [disabled]=\"activeSlide > items.length - size - 1\"\n    >\n      <cx-icon [type]=\"nextIcon\"></cx-icon>\n    </button>\n  </div>\n\n  <div *ngIf=\"!hideIndicators && size < items.length\" class=\"indicators\">\n    <ng-container *ngFor=\"let _ of items; let i = index\">\n      <button\n        *ngIf=\"i % size === 0\"\n        (focus)=\"activeSlide = i\"\n        [disabled]=\"i === activeSlide\"\n        tabindex=\"-1\"\n      >\n        <cx-icon [type]=\"indicatorIcon\"></cx-icon>\n      </button>\n    </ng-container>\n  </div>\n</ng-container>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
CarouselComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: CarouselService }
];
CarouselComponent.propDecorators = {
    title: [{ type: Input }],
    setItems: [{ type: Input, args: ['items',] }],
    template: [{ type: Input }],
    itemWidth: [{ type: Input }],
    hideIndicators: [{ type: Input }],
    indicatorIcon: [{ type: Input }],
    previousIcon: [{ type: Input }],
    nextIcon: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9wcm9qZWN0cy9zdG9yZWZyb250bGliL3NyYy8iLCJzb3VyY2VzIjpbInNoYXJlZC9jb21wb25lbnRzL2Nhcm91c2VsL2Nhcm91c2VsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsS0FBSyxFQUNMLFNBQVMsR0FHVixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUVyRDs7Ozs7Ozs7Ozs7Ozs7R0FjRztBQU1ILE1BQU0sT0FBTyxpQkFBaUI7SUE2QzVCLFlBQXNCLEVBQWMsRUFBWSxPQUF3QjtRQUFsRCxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVksWUFBTyxHQUFQLE9BQU8sQ0FBaUI7UUFyQnhFOzs7Ozs7V0FNRztRQUNNLGNBQVMsR0FBRyxPQUFPLENBQUM7UUFFN0I7O1dBRUc7UUFDTSxtQkFBYyxHQUFHLEtBQUssQ0FBQztRQUV2QixrQkFBYSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUM7UUFDakMsaUJBQVksR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFDO1FBQ3BDLGFBQVEsR0FBRyxTQUFTLENBQUMsV0FBVyxDQUFDO0lBS2lDLENBQUM7SUFsQzVFLElBQ0ksUUFBUSxDQUFDLFVBQTZCO1FBQ3hDLElBQUksQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDO1FBQ3hCLHFDQUFxQztRQUNyQyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBK0JELFFBQVE7UUFDTixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxTQUFTLEVBQUUsRUFBRTtZQUNqQyxPQUFPLENBQUMsS0FBSyxDQUNYLG1GQUFtRixDQUNwRixDQUFDO1lBQ0YsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTzthQUN0QixnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO2FBQ3ZELElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3QyxDQUFDOzs7WUE5REYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxhQUFhO2dCQUN2QixxMURBQXdDO2dCQUN4QyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTthQUNoRDs7O1lBOUJDLFVBQVU7WUFTSCxlQUFlOzs7b0JBMEJyQixLQUFLO3VCQU9MLEtBQUssU0FBQyxPQUFPO3VCQVdiLEtBQUs7d0JBU0wsS0FBSzs2QkFLTCxLQUFLOzRCQUVMLEtBQUs7MkJBQ0wsS0FBSzt1QkFDTCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgSW5wdXQsXG4gIGlzRGV2TW9kZSxcbiAgT25Jbml0LFxuICBUZW1wbGF0ZVJlZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBJQ09OX1RZUEUgfSBmcm9tICcuLi8uLi8uLi9jbXMtY29tcG9uZW50cy9taXNjL2ljb24vaWNvbi5tb2RlbCc7XG5pbXBvcnQgeyBDYXJvdXNlbFNlcnZpY2UgfSBmcm9tICcuL2Nhcm91c2VsLnNlcnZpY2UnO1xuXG4vKipcbiAqIEdlbmVyaWMgY2Fyb3VzZWwgY29tcG9uZW50IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVuZGVyIGFueSBjYXJvdXNlbCBpdGVtcyxcbiAqIHN1Y2ggYXMgcHJvZHVjdHMsIGltYWdlcywgYmFubmVycywgb3IgYW55IGNvbXBvbmVudC4gQ2Fyb3VzZWwgaXRlbXMgYXJlXG4gKiByZW5kZXJlZCBpbiBzby1jYWxsZWQgY2Fyb3VzZWwgc2xpZGVzLCBhbmQgdGhlIHByZXZpb3VzL25leHQgYnV0dG9ucyBhcyB3ZWxsIGFzXG4gKiB0aGUgaW5kaWNhdG9yLWJ1dHRvbnMgY2FuIHVzZWQgdG8gbmF2aWdhdGUgdGhlIHNsaWRlcy5cbiAqXG4gKiBUaGUgY29tcG9uZW50IHVzZXMgYW4gYXJyYXkgb2YgT2JzZXJ2YWJsZXMgKGBpdGVtcyRgKSBhcyBhbiBpbnB1dCwgdG8gYWxsb3dcbiAqIGZvciBsYXp5IGxvYWRpbmcgb2YgaXRlbXMuXG4gKlxuICogVGhlIG51bWJlciBvZiBpdGVtcyBwZXIgc2xpZGUgaXMgY2FsY3VsYXRlZCB3aXRoIHRoZSBgaXRlbVdpZHRoYCwgd2hpY2ggY2FuIGdpdmVuXG4gKiBpbiBwaXhlbHMgb3IgcGVyY2VudGFnZS5cbiAqXG4gKiBUbyBhbGxvdyBmb3IgZmxleGlibGUgcmVuZGVyaW5nIG9mIGl0ZW1zLCB0aGUgcmVuZGVyaW5nIGlzIGRlbGVnYXRlZCB0byB0aGVcbiAqIGdpdmVuIGB0ZW1wbGF0ZWAuIFRoaXMgYWxsb3dzIGZvciBtYXhpbXVtIGZsZXhpYmlsaXR5LlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjeC1jYXJvdXNlbCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9jYXJvdXNlbC5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBDYXJvdXNlbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIC8qKlxuICAgKiBUaGUgdGl0bGUgaXMgcmVuZGVyZWQgYXMgdGhlIGNhcm91c2VsIGhlYWRpbmcuXG4gICAqL1xuICBASW5wdXQoKSB0aXRsZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgaXRlbXMkIHJlcHJlc2VudCB0aGUgY2Fyb3VzZWwgaXRlbXMuIFRoZSBpdGVtcyQgYXJlXG4gICAqIG9ic2VydmFibGVzIHNvIHRoYXQgdGhlIGl0ZW1zIGNhbiBiZSBsb2FkZWQgb24gZGVtYW5kLlxuICAgKi9cbiAgaXRlbXM6IE9ic2VydmFibGU8YW55PltdO1xuICBASW5wdXQoJ2l0ZW1zJylcbiAgc2V0IHNldEl0ZW1zKGlucHV0SXRlbXM6IE9ic2VydmFibGU8YW55PltdKSB7XG4gICAgdGhpcy5pdGVtcyA9IGlucHV0SXRlbXM7XG4gICAgLy9SZXNldCBzbGlkZXIgd2hlbiBjaGFuZ2luZyBwcm9kdWN0c1xuICAgIHRoaXMuYWN0aXZlU2xpZGUgPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB0ZW1wbGF0ZSBpcyByZW5kZXJlZCBmb3IgZWFjaCBpdGVtLCBzbyB0aGF0IHRoZSBhY3R1YWxcbiAgICogdmlldyBjYW4gYmUgZ2l2ZW4gYnkgdGhlIGNvbXBvZW50IHRoYXQgdXNlcyB0aGUgYENhcm91c2VsQ29tcG9uZW50YC5cbiAgICovXG4gIEBJbnB1dCgpIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIG1pbmltdW0gc2l6ZSBvZiB0aGUgY2Fyb3VzZWwgaXRlbSwgZWl0aGVyIGluIHB4IG9yICUuXG4gICAqIFRoaXMgdmFsdWUgaXMgdXNlZCBmb3IgdGhlIGNhbGN1bGF0aW9uIG9mIG51bWJlcnMgcGVyIGNhcm91c2VsLCBzbyB0aGF0XG4gICAqIHRoZSBudW1iZXIgb2YgY2Fyb3VzZWwgaXRlbXMgaXMgZHluYW1pYy4gVGhlIGNhbGN1bGF0aW9uIHVzZXMgdGhlIGBpdGVtV2lkdGhgXG4gICAqIGFuZCB0aGUgaG9zdCBlbGVtZW50IGBjbGllbnRXaWR0aGAsIHNvIHRoYXQgdGhlIGNhcm91c2VsIGlzIHJldXNhYmxlIGluXG4gICAqIGRpZmZlcmVudCBsYXlvdXRzIChmb3IgZXhhbXBsZSBpbiBhIDUwJSBncmlkKS5cbiAgICovXG4gIEBJbnB1dCgpIGl0ZW1XaWR0aCA9ICczMDBweCc7XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSB2aXN1YWwgaW5kaWNhdG9ycyBhcmUgdXNlZC5cbiAgICovXG4gIEBJbnB1dCgpIGhpZGVJbmRpY2F0b3JzID0gZmFsc2U7XG5cbiAgQElucHV0KCkgaW5kaWNhdG9ySWNvbiA9IElDT05fVFlQRS5DSVJDTEU7XG4gIEBJbnB1dCgpIHByZXZpb3VzSWNvbiA9IElDT05fVFlQRS5DQVJFVF9MRUZUO1xuICBASW5wdXQoKSBuZXh0SWNvbiA9IElDT05fVFlQRS5DQVJFVF9SSUdIVDtcblxuICBhY3RpdmVTbGlkZTogbnVtYmVyO1xuICBzaXplJDogT2JzZXJ2YWJsZTxudW1iZXI+O1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBlbDogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHNlcnZpY2U6IENhcm91c2VsU2VydmljZSkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAoIXRoaXMudGVtcGxhdGUgJiYgaXNEZXZNb2RlKCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICdObyB0ZW1wbGF0ZSByZWZlcmVuY2UgcHJvdmlkZWQgdG8gcmVuZGVyIHRoZSBjYXJvdXNlbCBpdGVtcyBmb3IgdGhlIGBjeC1jYXJvdXNlbGAnXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnNpemUkID0gdGhpcy5zZXJ2aWNlXG4gICAgICAuZ2V0SXRlbXNQZXJTbGlkZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIHRoaXMuaXRlbVdpZHRoKVxuICAgICAgLnBpcGUodGFwKCgpID0+ICh0aGlzLmFjdGl2ZVNsaWRlID0gMCkpKTtcbiAgfVxufVxuIl19