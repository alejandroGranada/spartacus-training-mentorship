import { Component, EventEmitter, Input, Output } from '@angular/core';
import { DatePickerService } from './date-picker.service';
/**
 * Component that adds a date control. While the native date picker works in most
 * modern browsers, some browsers need more guidance (placeholder), validation and
 * date conversion.
 *
 * The data picker supports (optional) min and max form controls, so that you can
 * limit the start and/or end date.
 *
 * Most of the implementation is done in the `DatePickerFallbackDirective`.
 */
export class DatePickerComponent {
    constructor(service) {
        this.service = service;
        this.update = new EventEmitter();
    }
    change() {
        this.update.emit();
    }
    get placeholder() {
        return this.service.placeholder;
    }
    get pattern() {
        return this.service.pattern;
    }
    /**
     * Only returns the date if we have a valid format. We do this to avoid
     * loads of console errors coming from the datePipe while the user is typing
     * (in those browsers where the date picker isn't supported).
     */
    getDate(date) {
        return this.service.isValidFormat(date) ? date : null;
    }
}
DatePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'cx-date-picker',
                template: "<input\n  class=\"form-control\"\n  type=\"date\"\n  [formControl]=\"control\"\n  [attr.min]=\"min\"\n  [attr.max]=\"max\"\n  (change)=\"change()\"\n  [placeholder]=\"placeholder\"\n  [pattern]=\"pattern\"\n/>\n<cx-form-errors\n  [control]=\"control\"\n  prefix=\"formErrors.date\"\n  [translationParams]=\"{\n    max: getDate(max) | cxDate,\n    min: getDate(min) | cxDate\n  }\"\n></cx-form-errors>\n"
            },] }
];
DatePickerComponent.ctorParameters = () => [
    { type: DatePickerService }
];
DatePickerComponent.propDecorators = {
    control: [{ type: Input }],
    min: [{ type: Input }],
    max: [{ type: Input }],
    update: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1waWNrZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9wcm9qZWN0cy9zdG9yZWZyb250bGliL3NyYy8iLCJzb3VyY2VzIjpbInNoYXJlZC9jb21wb25lbnRzL2Zvcm0vZGF0ZS1waWNrZXIvZGF0ZS1waWNrZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFMUQ7Ozs7Ozs7OztHQVNHO0FBT0gsTUFBTSxPQUFPLG1CQUFtQjtJQUM5QixZQUFzQixPQUEwQjtRQUExQixZQUFPLEdBQVAsT0FBTyxDQUFtQjtRQUt0QyxXQUFNLEdBQXVCLElBQUksWUFBWSxFQUFFLENBQUM7SUFMUCxDQUFDO0lBT3BELE1BQU07UUFDSixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxJQUFJLFdBQVc7UUFDYixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO0lBQzlCLENBQUM7SUFFRDs7OztPQUlHO0lBRUgsT0FBTyxDQUFDLElBQVk7UUFDbEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDeEQsQ0FBQzs7O1lBbENGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2dCQUMxQiw4WkFBMkM7YUFHNUM7OztZQWpCUSxpQkFBaUI7OztzQkFvQnZCLEtBQUs7a0JBQ0wsS0FBSztrQkFDTCxLQUFLO3FCQUVMLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBEYXRlUGlja2VyU2VydmljZSB9IGZyb20gJy4vZGF0ZS1waWNrZXIuc2VydmljZSc7XG5cbi8qKlxuICogQ29tcG9uZW50IHRoYXQgYWRkcyBhIGRhdGUgY29udHJvbC4gV2hpbGUgdGhlIG5hdGl2ZSBkYXRlIHBpY2tlciB3b3JrcyBpbiBtb3N0XG4gKiBtb2Rlcm4gYnJvd3NlcnMsIHNvbWUgYnJvd3NlcnMgbmVlZCBtb3JlIGd1aWRhbmNlIChwbGFjZWhvbGRlciksIHZhbGlkYXRpb24gYW5kXG4gKiBkYXRlIGNvbnZlcnNpb24uXG4gKlxuICogVGhlIGRhdGEgcGlja2VyIHN1cHBvcnRzIChvcHRpb25hbCkgbWluIGFuZCBtYXggZm9ybSBjb250cm9scywgc28gdGhhdCB5b3UgY2FuXG4gKiBsaW1pdCB0aGUgc3RhcnQgYW5kL29yIGVuZCBkYXRlLlxuICpcbiAqIE1vc3Qgb2YgdGhlIGltcGxlbWVudGF0aW9uIGlzIGRvbmUgaW4gdGhlIGBEYXRlUGlja2VyRmFsbGJhY2tEaXJlY3RpdmVgLlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjeC1kYXRlLXBpY2tlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9kYXRlLXBpY2tlci5jb21wb25lbnQuaHRtbCcsXG4gIC8vIHdlIGNhbm5vdCB1c2Ugb25QdXNoIGNoYW5nZSBkZXRlY3Rpb24gYXMgdGhlIGZvcm0gc3RhdGUgaXNuJ3QgdXBkYXRlZCB3aXRob3V0IGV4cGxpY2l0XG4gIC8vIGNoYW5nZSBkZXRlY3Rpb24sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8xMDgxNlxufSlcbmV4cG9ydCBjbGFzcyBEYXRlUGlja2VyQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHNlcnZpY2U6IERhdGVQaWNrZXJTZXJ2aWNlKSB7fVxuICBASW5wdXQoKSBjb250cm9sOiBGb3JtQ29udHJvbDtcbiAgQElucHV0KCkgbWluPzogc3RyaW5nO1xuICBASW5wdXQoKSBtYXg/OiBzdHJpbmc7XG5cbiAgQE91dHB1dCgpIHVwZGF0ZTogRXZlbnRFbWl0dGVyPHZvaWQ+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIGNoYW5nZSgpIHtcbiAgICB0aGlzLnVwZGF0ZS5lbWl0KCk7XG4gIH1cblxuICBnZXQgcGxhY2Vob2xkZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VydmljZS5wbGFjZWhvbGRlcjtcbiAgfVxuXG4gIGdldCBwYXR0ZXJuKCkge1xuICAgIHJldHVybiB0aGlzLnNlcnZpY2UucGF0dGVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBPbmx5IHJldHVybnMgdGhlIGRhdGUgaWYgd2UgaGF2ZSBhIHZhbGlkIGZvcm1hdC4gV2UgZG8gdGhpcyB0byBhdm9pZFxuICAgKiBsb2FkcyBvZiBjb25zb2xlIGVycm9ycyBjb21pbmcgZnJvbSB0aGUgZGF0ZVBpcGUgd2hpbGUgdGhlIHVzZXIgaXMgdHlwaW5nXG4gICAqIChpbiB0aG9zZSBicm93c2VycyB3aGVyZSB0aGUgZGF0ZSBwaWNrZXIgaXNuJ3Qgc3VwcG9ydGVkKS5cbiAgICovXG5cbiAgZ2V0RGF0ZShkYXRlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnNlcnZpY2UuaXNWYWxpZEZvcm1hdChkYXRlKSA/IGRhdGUgOiBudWxsO1xuICB9XG59XG4iXX0=