/**
 * Layout orientation for the table configuration.
 */
export var TableLayout;
(function (TableLayout) {
    /**
     * Renders the table vertically, with a heading on top of the table.
     *
     * Vertical layout is most common and the default layout.
     */
    TableLayout[TableLayout["VERTICAL"] = 1] = "VERTICAL";
    /**
     * Stacks items in a tables by generating a `tbody` for each item.
     */
    TableLayout[TableLayout["VERTICAL_STACKED"] = 2] = "VERTICAL_STACKED";
    /**
     * Horizontal oriented table layout renders the table headers in the first column of the table.
     */
    TableLayout[TableLayout["HORIZONTAL"] = 3] = "HORIZONTAL";
})(TableLayout || (TableLayout = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUubW9kZWwuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvUGF0cnlrL0Rlc2t0b3Avc3BhcnRhY3VzL3Byb2plY3RzL3N0b3JlZnJvbnRsaWIvc3JjLyIsInNvdXJjZXMiOlsic2hhcmVkL2NvbXBvbmVudHMvdGFibGUvdGFibGUubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMkVBOztHQUVHO0FBQ0gsTUFBTSxDQUFOLElBQVksV0FpQlg7QUFqQkQsV0FBWSxXQUFXO0lBQ3JCOzs7O09BSUc7SUFDSCxxREFBWSxDQUFBO0lBRVo7O09BRUc7SUFDSCxxRUFBZ0IsQ0FBQTtJQUVoQjs7T0FFRztJQUNILHlEQUFVLENBQUE7QUFDWixDQUFDLEVBakJXLFdBQVcsS0FBWCxXQUFXLFFBaUJ0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBhZ2luYXRpb25Nb2RlbCB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5cbi8qKlxuICogQ29udGFpbnMgdGhlIHRhYmxlIGRhdGEgYW5kIHN0cnVjdHVyZSBmb3IgdGhlIGBUYWJsZUNvbXBvbmVudGAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGFibGU8VCA9IGFueT4ge1xuICAvKipcbiAgICogVGhlIHRhYmxlIHN0cnVjdHVyZSBwcm92aWRlcyBkZXRhaWxzIGFib3V0IHRoZSBoZWFkZXJzIG9mIHRoZSB0YWJsZS5cbiAgICovXG4gIHN0cnVjdHVyZTogVGFibGVTdHJ1Y3R1cmU7XG5cbiAgLyoqXG4gICAqIFRoZSBkYXRhIHRoYXQgaXMgbGlzdGVkIGluIHRoZSB0YWJsZSBjb21wb25lbnQuXG4gICAqL1xuICBkYXRhOiBUW107XG5cbiAgLyoqXG4gICAqIFRoZSBwYWdpbmF0aW9uIGNvbXBvbmVudCBpcyB1c2VkIHRvIHBhZ2luYXRlIHRocm91Z2ggdGhlIGRhdGEuXG4gICAqL1xuICBwYWdpbmF0aW9uPzogUGFnaW5hdGlvbk1vZGVsO1xuXG4gIC8qKlxuICAgKiBUaGUgc29ydCBvcHRpb25zIGZvciB0aGUgdGFibGUuXG4gICAqL1xuICBzb3J0cz86IGFueVtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRhYmxlU3RydWN0dXJlQ29uZmlndXJhdGlvbiB7XG4gIC8qKlxuICAgKiBQcm92aWRlIHRoZSBiYXJlIHN0cnVjdHVyZSBvZiB0aGUgdGFibGUuXG4gICAqL1xuICBjZWxscz86IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBHbG9iYWwgdGFibGUgc3RydWN0dXJlIG9wdGlvbnMuXG4gICAqL1xuICBvcHRpb25zPzogVGFibGVPcHRpb25zO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRhYmxlT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBEZWZhdWx0IHBhZ2luYXRpb24gZm9yIHRoZSB0YWJsZSB0aGF0IGlzIHVzZWQgZm9yIHRoZSBpbml0aWFsIGxvYWQgb2YgdGhlIHRhYmxlIGRhdGEuXG4gICAqL1xuICBwYWdpbmF0aW9uPzogUGFnaW5hdGlvbk1vZGVsO1xuXG4gIC8qKlxuICAgKiBUaGUgbGF5b3V0IGZvciB0aGUgdGFibGUgY29tcG9uZW50IGNhbiBiZSB1c2VkIGZvciBob3Jpem9udGFsLCB2ZXJ0aWNhbCBhbmQgdmVydGljYWwgc3RhY2tlZFxuICAgKiB0YWJsZSBsYXlvdXRzLlxuICAgKi9cbiAgbGF5b3V0PzogVGFibGVMYXlvdXQ7XG5cbiAgLyoqXG4gICAqIEdsb2JhbCBjb21wb25lbnQgdG8gcmVuZGVyIHRhYmxlIGhlYWRlciBfY29udGVudF8gKGA8dGg+Li4uPC90aD5gKS4gQSBzcGVjaWZpYyBjb21wb25lbnQgcGVyXG4gICAqIGZpZWxkIGNhbiBiZSBjb25maWd1cmVkIGFsdGVybmF0aXZlbHkuXG4gICAqXG4gICAqIElmIG5vIGNvbXBvbmVudCBpcyBhdmFpbGFibGUsIHRoZSB0YWJsZSBjb21wb25lbnQgd2lsbCByZW5kZXIgYSBzdGF0aWMgbGFiZWwgb3IgdXNlIHRoZVxuICAgKiBjb25maWd1cmVkIGkxOG4gbGFiZWwuXG4gICAqL1xuICBoZWFkZXJDb21wb25lbnQ/OiBUeXBlPGFueT47XG5cbiAgLyoqXG4gICAqIEdsb2JhbCBjb21wb25lbnQgdG8gcmVuZGVyIHRhYmxlIGNlbGwgX2NvbnRlbnRfIChgPHRkPi4uLjwvdGQ+YCkuIEEgc3BlY2lmaWMgY29tcG9uZW50IHBlclxuICAgKiBmaWVsZCBjYW4gYmUgY29uZmlndXJlZCBhbHRlcm5hdGl2ZWx5LlxuICAgKlxuICAgKiBJZiBubyBjb21wb25lbnQgaXMgYXZhaWxhYmxlLCB0aGUgdGFibGUgY29udGVudCB3aWxsIHJlbmRlciBhcy1pcy5cbiAgICovXG4gIGRhdGFDb21wb25lbnQ/OiBUeXBlPGFueT47XG5cbiAgLy8gZmllbGQgc3BlY2lmaWMgb3B0aW9uc1xuICBjZWxscz86IHtcbiAgICBbZmllbGRLZXk6IHN0cmluZ106IFRhYmxlRmllbGRPcHRpb25zO1xuICB9O1xufVxuXG4vKipcbiAqIExheW91dCBvcmllbnRhdGlvbiBmb3IgdGhlIHRhYmxlIGNvbmZpZ3VyYXRpb24uXG4gKi9cbmV4cG9ydCBlbnVtIFRhYmxlTGF5b3V0IHtcbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhlIHRhYmxlIHZlcnRpY2FsbHksIHdpdGggYSBoZWFkaW5nIG9uIHRvcCBvZiB0aGUgdGFibGUuXG4gICAqXG4gICAqIFZlcnRpY2FsIGxheW91dCBpcyBtb3N0IGNvbW1vbiBhbmQgdGhlIGRlZmF1bHQgbGF5b3V0LlxuICAgKi9cbiAgVkVSVElDQUwgPSAxLFxuXG4gIC8qKlxuICAgKiBTdGFja3MgaXRlbXMgaW4gYSB0YWJsZXMgYnkgZ2VuZXJhdGluZyBhIGB0Ym9keWAgZm9yIGVhY2ggaXRlbS5cbiAgICovXG4gIFZFUlRJQ0FMX1NUQUNLRUQsXG5cbiAgLyoqXG4gICAqIEhvcml6b250YWwgb3JpZW50ZWQgdGFibGUgbGF5b3V0IHJlbmRlcnMgdGhlIHRhYmxlIGhlYWRlcnMgaW4gdGhlIGZpcnN0IGNvbHVtbiBvZiB0aGUgdGFibGUuXG4gICAqL1xuICBIT1JJWk9OVEFMLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRhYmxlRmllbGRPcHRpb25zIHtcbiAgLyoqXG4gICAqIE9wdGlvbmFsIGxhYmVsIHRvIGFkZCBzdGF0aWMgb3IgbG9jYWxpemVkIGhlYWRlcnMuIElmIHRoZSBsYWJlbCBpcyBub3QgcHJlc2VudCwgdGhlXG4gICAqIGZpZWxkIGtleSBpcyBtYXBwZWQgdG8gYSBpMThuIHByb3BlcnR5LlxuICAgKi9cbiAgbGFiZWw/OiBzdHJpbmcgfCBUYWJsZUhlYWRlcjtcblxuICAvKipcbiAgICogSW5kaWNhdGVzIHdldGhlciB0aGUgY2VsbCBpcyBsaW5rYWJsZS5cbiAgICpcbiAgICogSWYgdGhlIGNlbGxzIGlzIGxpbmthYmxlLCBhbiBhbmNob3IgbGluayBjYW4gYmUgZ2VuZXJhdGVkIGluIHRoZSB0YWJsZSBkYXRhIGVsZW1lbnQuXG4gICAqL1xuICBsaW5rYWJsZT86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIENvbXBvbmVudCB0byByZW5kZXIgdGFibGUgaGVhZGVyIF9jb250ZW50XyAoYDx0aD4uLi48L3RoPmApIGZvciB0aGUgdGFibGUgZmllbGQuXG4gICAqXG4gICAqIElmIG5vIGNvbXBvbmVudCBpcyBjb25maWd1cmVkLCB0aGUgZ2xvYmFsIHRhYmxlIGNvbXBvbmVudCBmb3IgdGhlIGhlYWRlciB3aWxsIGJlIHVzZWRcbiAgICogaW5zdGVhZC5cbiAgICovXG4gIGhlYWRlckNvbXBvbmVudD86IFR5cGU8YW55PjtcblxuICAvKipcbiAgICogQ29tcG9uZW50IHRvIHJlbmRlciB0YWJsZSBkYXRhIF9jb250ZW50XyAoYDx0ZD4uLi48L3RkPmApIGZvciB0aGUgdGFibGUgZmllbGQuXG4gICAqXG4gICAqIElmIG5vIGNvbXBvbmVudCBpcyBjb25maWd1cmVkLCB0aGUgZ2xvYmFsIHRhYmxlIGNvbXBvbmVudCBmb3IgdGhlIGNlbGwgZGF0YSB3aWxsIGJlIHVzZWRcbiAgICogaW5zdGVhZC5cbiAgICovXG4gIGRhdGFDb21wb25lbnQ/OiBUeXBlPGFueT47XG59XG5cbi8qKlxuICogVGhlIFRhYmxlU3RydWN0dXJlIGhvbGRzIHRoZSBoZWFkZXIgc3RydWN0dXJlIG9mIHRoZSB0YWJsZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUYWJsZVN0cnVjdHVyZSBleHRlbmRzIFRhYmxlU3RydWN0dXJlQ29uZmlndXJhdGlvbiB7XG4gIC8qKlxuICAgKiBUaGUgdGFibGUgdHlwZSBpcyBhIG1hbmRhdG9yeSBwcm9wZXJ0eS4gVGhlIHR5cGUgaXMgdXNlZCB0byBpZGVudGlmeSB0aGUgdGFibGVcbiAgICogY29uZmlndXJhdGlvbiBhbmQgaXMgdXNlZCB0byBnZW5lcmF0ZSBhIHVuaXF1ZSBvdXRsZXQgcmVmZXJlbmNlLlxuICAgKi9cbiAgdHlwZTogc3RyaW5nO1xufVxuXG4vKipcbiAqIFByb3ZpZGVzIHRoZSBjb3JlIHRhYmxlIHN0cnVjdHVyZSwgdHlwaWNhbGx5IGJlaW5nIHVzZWQgdG8gcmVuZGVyIHRhYmxlIGNvbHVtbnMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGFibGVIZWFkZXIge1xuICAvKipcbiAgICogVGhlIGhlYWRlciBrZXkgaXMgdXNlZCB0bzpcbiAgICogLSBnZW5lcmF0ZSBhIHVuaXF1ZSBjbGFzcyBvbiBlYWNoIHRhYmxlIHJvd1xuICAgKiAtIGdlbmVyYXRlIGEgdGVtcGxhdGUgZm9yIGVhY2ggdGFibGUgaGVhZGVyIGNlbGwgYW5kIGRhdGEgY2VsbFxuICAgKiAtIHRyYW5zbGF0ZSB0aGUga2V5IHVzaW5nIHRoZSB0cmFuc2xhdGUgbW9kdWxlXG4gICAqICAgKGZhbGxiYWNrIGluIGNhc2UgdGhlcmUgaXMgbm8gbGFiZWwgYXZhaWxhYmxlKVxuICAgKi9cbiAgaTE4bktleT86IHN0cmluZztcblxuICAvLyBkZXByZWNhdGVkXG4gIHNvcnRDb2RlPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRhYmxlSGVhZGVyT3V0bGV0Q29udGV4dCB7XG4gIF90eXBlOiBzdHJpbmc7XG4gIF9maWVsZDogc3RyaW5nO1xuICBfb3B0aW9ucz86IFRhYmxlT3B0aW9ucztcbiAgLyoqXG4gICAqIFRoZSBpMThuUm9vdCBpcyB1c2VkIHRvIGJ1aWxkIGxvY2FsaXplZCB0YWJsZSBoZWFkZXJzLiBUaGUgaTE4blJvb3RcbiAgICogaXMgdXNlZCBhcyBhIHByZWZpeCBmb3IgdGhlIGBfZmllbGRgLiBUYWJsZSBoZWFkZXIgbGFiZWxzIHdpbCB1c2UgdGhlXG4gICAqIGZvbGxvd2luZyBsb2NhbGVzOlxuICAgKlxuICAgKiBgW2kxOG5Sb290XS5bX2ZpZWxkXWBcbiAgICovXG4gIF9pMThuUm9vdD86IHN0cmluZztcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1pbnRlcmZhY2VcbmV4cG9ydCBpbnRlcmZhY2UgVGFibGVEYXRhT3V0bGV0Q29udGV4dCBleHRlbmRzIFRhYmxlSGVhZGVyT3V0bGV0Q29udGV4dCB7XG4gIFtwcm9wZXJ0eTogc3RyaW5nXTogYW55O1xufVxuIl19