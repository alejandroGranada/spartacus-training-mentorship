/**
 * Indicates how the browser should load the image.
 *
 * While this might not add too much value in some scenarios, as we have other
 * optimizations to defer loading of larger pieces of the DOM, there might be
 * components who haven't implemented other lazy loading techniques. Moreover,
 * a server sides rendered page that lands directly in the browser could benefit
 * enormously from the lazy loading of images.
 */
export var ImageLoadingStrategy;
(function (ImageLoadingStrategy) {
    /**
     * Loads the image immediately, regardless of whether or not the image
     * is currently within the visible viewport (this is the default value).
     */
    ImageLoadingStrategy["EAGER"] = "eager";
    /**
     * Defers loading the image until it reaches a calculated distance from the viewport,
     * as defined by the browser. The intent is to avoid the network and storage bandwidth
     * needed to handle the image until it's reasonably certain that it will be needed.
     * This generally improves the performance of the content in most typical use cases.
     */
    ImageLoadingStrategy["LAZY"] = "lazy";
})(ImageLoadingStrategy || (ImageLoadingStrategy = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVkaWEubW9kZWwuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvUGF0cnlrL0Rlc2t0b3Avc3BhcnRhY3VzL3Byb2plY3RzL3N0b3JlZnJvbnRsaWIvc3JjLyIsInNvdXJjZXMiOlsic2hhcmVkL2NvbXBvbmVudHMvbWVkaWEvbWVkaWEubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeUNBOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxDQUFOLElBQVksb0JBYVg7QUFiRCxXQUFZLG9CQUFvQjtJQUM5Qjs7O09BR0c7SUFDSCx1Q0FBZSxDQUFBO0lBQ2Y7Ozs7O09BS0c7SUFDSCxxQ0FBYSxDQUFBO0FBQ2YsQ0FBQyxFQWJXLG9CQUFvQixLQUFwQixvQkFBb0IsUUFhL0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbWFnZSB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWVkaWEge1xuICAvKipcbiAgICogSWRlbnRpZnkgdGhlIOKAnGRlZmF1bHTigJ0gaW1hZ2UgVVJMIHdoaWNoIGlzIHVzZWQgaW4gY2FzZSB0aGUgc3Jjc2V0IGlzIG5vdCBzcGVjaWZpZWQuXG4gICAqIEJyb3dzZXJzIHdpdGhvdXQgc3Jjc2V0IHN1cHBvcnQgd2lsbCBhbHNvIGZhbGxiYWNrIHRvIHRoaXMgVVJsLlxuICAgKi9cbiAgc3JjOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBzcmNzZXQgYXR0cmlidXRlIGhvbGRzIGEgbGlzdCBvZiBpbWFnZSBmaWxlIFVSTHMsIGFsb25nIHdpdGggc2l6ZSBkZXNjcmlwdGlvbnMuXG4gICAqL1xuICBzcmNzZXQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIGFsdGVybmF0aXZlIGluZm9ybWF0aW9uIGZvciBhIG1lZGlhIGlmIGEgdXNlciBjYW5ub3QgdmlldyB0aGUgdmlzdWFsLiBJdCBpc1xuICAgKiBhbHNvIHVzZWQgYnkgd2ViIGNyYXdsZXJzIGFuZCBzY3JlZW4gcmVhZGVycy5cbiAgICovXG4gIGFsdD86IHN0cmluZztcbn1cblxuLyoqXG4gKiBDb250YWlucyBtdWx0aXBsZSBtZWRpYSBmb3IgZGlmZmVyZW50IGZvcm1hdHNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNZWRpYUNvbnRhaW5lciB7XG4gIFtmb3JtYXQ6IHN0cmluZ106IEltYWdlO1xufVxuXG4vKipcbiAqIFNwZWNpZmllcyBtZWRpYSBzaXplIGluZm9ybWF0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gZ2VuZXJhdGUgaW5mb3JtYXRpb24gZm9yIHRoZVxuICogYnJvd3NlciB0byByZXNvbHZlIHRoZSByaWdodCBtZWRpYSBmb3IgdGhlIHJpZ2h0IGxheW91dCBvciBkZXZpY2UuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTWVkaWFGb3JtYXRTaXplIHtcbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0aGUgd2lkdGggZm9yIGEgZ2l2ZW4gbWVkaWEgZm9ybWF0LiBUaGUgbWVkaWEgZm9ybWF0IHdpZHRoIGlzIHVzZWRcbiAgICogdG8gYWxpZ24gdGhlIHdpZHRoIG9mIHRoZSBtZWRpYSB3aXRoIHRoZSBhdmFpbGFibGUgc2l6ZSBpbiB0aGUgbGF5b3V0LCBzbyB0aGF0XG4gICAqIGRpZmZlcmVudCBtZWRpYSdzIGNhbiBiZSB1c2VkIGluIGEgcmVzcG9uc2l2ZSBsYXlvdXQuXG4gICAqL1xuICB3aWR0aD86IG51bWJlcjtcbn1cblxuLyoqXG4gKiBJbmRpY2F0ZXMgaG93IHRoZSBicm93c2VyIHNob3VsZCBsb2FkIHRoZSBpbWFnZS5cbiAqXG4gKiBXaGlsZSB0aGlzIG1pZ2h0IG5vdCBhZGQgdG9vIG11Y2ggdmFsdWUgaW4gc29tZSBzY2VuYXJpb3MsIGFzIHdlIGhhdmUgb3RoZXJcbiAqIG9wdGltaXphdGlvbnMgdG8gZGVmZXIgbG9hZGluZyBvZiBsYXJnZXIgcGllY2VzIG9mIHRoZSBET00sIHRoZXJlIG1pZ2h0IGJlXG4gKiBjb21wb25lbnRzIHdobyBoYXZlbid0IGltcGxlbWVudGVkIG90aGVyIGxhenkgbG9hZGluZyB0ZWNobmlxdWVzLiBNb3Jlb3ZlcixcbiAqIGEgc2VydmVyIHNpZGVzIHJlbmRlcmVkIHBhZ2UgdGhhdCBsYW5kcyBkaXJlY3RseSBpbiB0aGUgYnJvd3NlciBjb3VsZCBiZW5lZml0XG4gKiBlbm9ybW91c2x5IGZyb20gdGhlIGxhenkgbG9hZGluZyBvZiBpbWFnZXMuXG4gKi9cbmV4cG9ydCBlbnVtIEltYWdlTG9hZGluZ1N0cmF0ZWd5IHtcbiAgLyoqXG4gICAqIExvYWRzIHRoZSBpbWFnZSBpbW1lZGlhdGVseSwgcmVnYXJkbGVzcyBvZiB3aGV0aGVyIG9yIG5vdCB0aGUgaW1hZ2VcbiAgICogaXMgY3VycmVudGx5IHdpdGhpbiB0aGUgdmlzaWJsZSB2aWV3cG9ydCAodGhpcyBpcyB0aGUgZGVmYXVsdCB2YWx1ZSkuXG4gICAqL1xuICBFQUdFUiA9ICdlYWdlcicsXG4gIC8qKlxuICAgKiBEZWZlcnMgbG9hZGluZyB0aGUgaW1hZ2UgdW50aWwgaXQgcmVhY2hlcyBhIGNhbGN1bGF0ZWQgZGlzdGFuY2UgZnJvbSB0aGUgdmlld3BvcnQsXG4gICAqIGFzIGRlZmluZWQgYnkgdGhlIGJyb3dzZXIuIFRoZSBpbnRlbnQgaXMgdG8gYXZvaWQgdGhlIG5ldHdvcmsgYW5kIHN0b3JhZ2UgYmFuZHdpZHRoXG4gICAqIG5lZWRlZCB0byBoYW5kbGUgdGhlIGltYWdlIHVudGlsIGl0J3MgcmVhc29uYWJseSBjZXJ0YWluIHRoYXQgaXQgd2lsbCBiZSBuZWVkZWQuXG4gICAqIFRoaXMgZ2VuZXJhbGx5IGltcHJvdmVzIHRoZSBwZXJmb3JtYW5jZSBvZiB0aGUgY29udGVudCBpbiBtb3N0IHR5cGljYWwgdXNlIGNhc2VzLlxuICAgKi9cbiAgTEFaWSA9ICdsYXp5Jyxcbn1cbiJdfQ==