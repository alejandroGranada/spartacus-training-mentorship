import { Directive, ElementRef, Input, ViewContainerRef, ComponentFactoryResolver, Renderer2, ChangeDetectorRef, Output, EventEmitter, HostListener, } from '@angular/core';
import { WindowRef } from '@spartacus/core';
import { skip } from 'rxjs/operators';
import { PopoverComponent } from './popover.component';
import { PopoverEvent } from './popover.model';
import { PositioningService } from '../../services/positioning/positioning.service';
import { PopoverService } from './popover.service';
/**
 * Directive to bind popover with any DOM element.
 */
export class PopoverDirective {
    constructor(element, viewContainer, componentFactoryResolver, renderer, changeDetectorRef, positioningService, popoverService, winRef) {
        this.element = element;
        this.viewContainer = viewContainer;
        this.componentFactoryResolver = componentFactoryResolver;
        this.renderer = renderer;
        this.changeDetectorRef = changeDetectorRef;
        this.positioningService = positioningService;
        this.popoverService = popoverService;
        this.winRef = winRef;
        /**
         * An event emitted when the popover is opened.
         */
        this.openPopover = new EventEmitter();
        /**
         * An event emitted when the popover is closed.
         */
        this.closePopover = new EventEmitter();
    }
    /**
     * Listen events fired on element binded to popover directive.
     *
     * Based on event type some a11y improvements can be made.
     * For example if popover was opened by `space` or `enter` key
     * dedicated `FocusConfig` can be set to autofocus first
     * focusable element in popover container.
     */
    handleOpen(event) {
        if (event.target === this.element.nativeElement)
            this.toggle(event);
    }
    /**
     * Method performs open action for popover component.
     */
    open(event) {
        var _a, _b;
        if (!((_a = this.cxPopoverOptions) === null || _a === void 0 ? void 0 : _a.disable)) {
            this.isOpen = true;
            this.focusConfig = this.popoverService.getFocusConfig(event, ((_b = this.cxPopoverOptions) === null || _b === void 0 ? void 0 : _b.appendToBody) || false);
            this.renderPopover();
            if (this.openPopover)
                this.openPopover.emit();
        }
    }
    /**
     * Method performs close action for popover component.
     */
    close() {
        this.isOpen = false;
        this.viewContainer.clear();
        if (this.closePopover)
            this.closePopover.emit();
    }
    /**
     * Method performs toggle action for popover component.
     */
    toggle(event) {
        if (event && event.target === this.element.nativeElement && !this.isOpen)
            this.open(event);
        else if (this.isOpen)
            this.close();
    }
    /**
     * Method subscribes for events emitted by popover component
     * and based on event performs specific action.
     */
    handlePopoverEvents() {
        return this.popoverContainer.instance.eventSubject
            .pipe(skip(1))
            .subscribe((event) => {
            var _a;
            if (event !== PopoverEvent.INSIDE_CLICK &&
                event !== PopoverEvent.CLOSE_BUTTON_KEYDOWN)
                this.close();
            if (event === PopoverEvent.ESCAPE_KEYDOWN ||
                event === PopoverEvent.CLOSE_BUTTON_KEYDOWN) {
                this.popoverService.setFocusOnElement(this.element, this.focusConfig, (_a = this.cxPopoverOptions) === null || _a === void 0 ? void 0 : _a.appendToBody);
            }
        });
    }
    /**
     * Method creates instance and pass parameters to popover component.
     */
    renderPopover() {
        var _a, _b, _c, _d, _e, _f, _g;
        const containerFactory = this.componentFactoryResolver.resolveComponentFactory(PopoverComponent);
        this.popoverContainer = this.viewContainer.createComponent(containerFactory);
        const componentInstance = this.popoverContainer.instance;
        if (componentInstance) {
            componentInstance.content = this.cxPopover;
            componentInstance.triggerElement = this.element;
            componentInstance.popoverInstance = this.popoverContainer;
            componentInstance.focusConfig = this.focusConfig;
            componentInstance.position = (_a = this.cxPopoverOptions) === null || _a === void 0 ? void 0 : _a.placement;
            componentInstance.customClass = (_b = this.cxPopoverOptions) === null || _b === void 0 ? void 0 : _b.class;
            componentInstance.appendToBody = (_c = this.cxPopoverOptions) === null || _c === void 0 ? void 0 : _c.appendToBody;
            componentInstance.positionOnScroll = (_d = this.cxPopoverOptions) === null || _d === void 0 ? void 0 : _d.positionOnScroll;
            componentInstance.displayCloseButton = (_e = this.cxPopoverOptions) === null || _e === void 0 ? void 0 : _e.displayCloseButton;
            componentInstance.autoPositioning = (_f = this.cxPopoverOptions) === null || _f === void 0 ? void 0 : _f.autoPositioning;
            if ((_g = this.cxPopoverOptions) === null || _g === void 0 ? void 0 : _g.appendToBody) {
                this.renderer.appendChild(this.winRef.document.body, this.popoverContainer.location.nativeElement);
            }
            this.popoverContainer.changeDetectorRef.detectChanges();
            this.handlePopoverEvents();
        }
    }
}
PopoverDirective.decorators = [
    { type: Directive, args: [{
                selector: '[cxPopover]',
            },] }
];
PopoverDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ViewContainerRef },
    { type: ComponentFactoryResolver },
    { type: Renderer2 },
    { type: ChangeDetectorRef },
    { type: PositioningService },
    { type: PopoverService },
    { type: WindowRef }
];
PopoverDirective.propDecorators = {
    cxPopover: [{ type: Input }],
    cxPopoverOptions: [{ type: Input }],
    openPopover: [{ type: Output }],
    closePopover: [{ type: Output }],
    handleOpen: [{ type: HostListener, args: ['click', ['$event'],] }, { type: HostListener, args: ['keydown.enter', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,