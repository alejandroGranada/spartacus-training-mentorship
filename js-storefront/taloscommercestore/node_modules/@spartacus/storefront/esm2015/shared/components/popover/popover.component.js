import { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostBinding, HostListener, Renderer2, TemplateRef, } from '@angular/core';
import { NavigationStart, Router } from '@angular/router';
import { filter } from 'rxjs/operators';
import { WindowRef } from '@spartacus/core';
import { Subject } from 'rxjs';
import { PopoverEvent } from './popover.model';
import { PositioningService } from '../../services/positioning/positioning.service';
import { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';
export class PopoverComponent {
    constructor(positioningService, winRef, changeDetectionRef, renderer, router) {
        this.positioningService = positioningService;
        this.winRef = winRef;
        this.changeDetectionRef = changeDetectionRef;
        this.renderer = renderer;
        this.router = router;
        /**
         * Icon types for close button icon.
         */
        this.iconTypes = ICON_TYPE;
        /**
         * Subject which emits specific type of `PopoverEvent`.
         */
        this.eventSubject = new Subject();
    }
    /**
     * Listens for click inside popover component wrapper.
     */
    insideClick() {
        this.eventSubject.next(PopoverEvent.INSIDE_CLICK);
        this.insideClicked = true;
    }
    /**
     * Listens for every document click and ignores clicks
     * inside component.
     */
    outsideClick() {
        if (!this.insideClicked) {
            this.eventSubject.next(PopoverEvent.OUTSIDE_CLICK);
        }
        this.insideClicked = false;
    }
    /**
     * Listens for `escape` keyodwn event.
     */
    escapeKeydown() {
        this.eventSubject.next(PopoverEvent.ESCAPE_KEYDOWN);
    }
    /**
     * Emits close event trigger.
     */
    close(event) {
        if (event instanceof MouseEvent)
            this.eventSubject.next(PopoverEvent.CLOSE_BUTTON_CLICK);
        else
            this.eventSubject.next(PopoverEvent.CLOSE_BUTTON_KEYDOWN);
    }
    /**
     * Method uses `Renderer2` service to listen window scroll event.
     *
     * Registered only if property `positionOnScroll` is set to `true`.
     */
    triggerScrollEvent() {
        this.scrollEventUnlistener = this.renderer.listen(this.winRef.nativeWindow, 'scroll', () => this.positionPopover());
    }
    /**
     * Method uses positioning service calculation and based on that
     * updates class name for popover component instance.
     */
    positionPopover() {
        this.popoverClass = this.positioningService.positionElements(this.triggerElement.nativeElement, this.popoverInstance.location.nativeElement, this.positioningService.getPositioningClass(this.position, this.autoPositioning), this.appendToBody);
        this.changeDetectionRef.markForCheck();
        this.baseClass = `${this.customClass} ${this.popoverClass} opened`;
    }
    ngOnInit() {
        this.isTemplate = this.content instanceof TemplateRef;
        if (!this.customClass)
            this.customClass = 'cx-popover';
        if (!this.position)
            this.position = 'top';
        if (this.autoPositioning === undefined)
            this.autoPositioning = true;
        this.baseClass = `${this.customClass}`;
        this.resizeSub = this.winRef.resize$.subscribe(() => {
            this.positionPopover();
        });
        this.routeChangeSub = this.router.events
            .pipe(filter((event) => event instanceof NavigationStart))
            .subscribe(() => {
            this.eventSubject.next(PopoverEvent.ROUTE_CHANGE);
        });
        if (this.positionOnScroll) {
            this.triggerScrollEvent();
        }
    }
    ngAfterViewChecked() {
        this.positionPopover();
    }
    ngOnDestroy() {
        if (this.resizeSub) {
            this.resizeSub.unsubscribe();
        }
        if (this.routeChangeSub) {
            this.routeChangeSub.unsubscribe();
        }
        if (this.scrollEventUnlistener) {
            this.scrollEventUnlistener();
        }
    }
}
PopoverComponent.decorators = [
    { type: Component, args: [{
                selector: 'cx-popover',
                template: "<div class=\"arrow\"></div>\n<div class=\"popover-body\" [cxFocus]=\"focusConfig\">\n  <button\n    *ngIf=\"displayCloseButton\"\n    type=\"button\"\n    class=\"close\"\n    (keydown.enter)=\"close($event)\"\n    (keydown.space)=\"close($event)\"\n    (click)=\"close($event)\"\n  >\n    <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\n  </button>\n  <ng-container *ngIf=\"isTemplate\">\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n  </ng-container>\n  <span *ngIf=\"!isTemplate\">{{ content }}</span>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
PopoverComponent.ctorParameters = () => [
    { type: PositioningService },
    { type: WindowRef },
    { type: ChangeDetectorRef },
    { type: Renderer2 },
    { type: Router }
];
PopoverComponent.propDecorators = {
    baseClass: [{ type: HostBinding, args: ['className',] }],
    insideClick: [{ type: HostListener, args: ['click',] }],
    outsideClick: [{ type: HostListener, args: ['document:click',] }],
    escapeKeydown: [{ type: HostListener, args: ['keydown.escape',] }]
};
//# sourceMappingURL=data:application/json;base64,