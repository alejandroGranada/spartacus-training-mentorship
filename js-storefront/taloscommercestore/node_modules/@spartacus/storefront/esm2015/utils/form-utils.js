import { FormArray, FormGroup } from '@angular/forms';
/**
 * Utils for Angular forms
 */
export var FormUtils;
(function (FormUtils) {
    /**
     * Calls the native Angular method `#updateValueAndValidity` for the given from control
     * and all its descendants (in case when it's `FormGroup` or `FormArray`).
     *
     * In particular it's useful for triggering re-emission of observables
     * `valueChanges` and `statusChanges` for all descendant form controls.
     *
     * _Note: Dropping this function may be considered, when it's implemented natively
     * by Angular. See https://github.com/angular/angular/issues/6170_
     *
     * @param control form control
     * @param options additional options
     * * `emitEvent`: When true or not given (the default), the `statusChanges` and
     * `valueChanges` observables emit the latest status and value. When false,
     * it doesn't trigger observables emission.
     */
    function deepUpdateValueAndValidity(control, options = {}) {
        if (control instanceof FormGroup || control instanceof FormArray) {
            Object.values(control.controls).forEach((childControl) => {
                deepUpdateValueAndValidity(childControl, options);
            });
        }
        control.updateValueAndValidity({
            onlySelf: true,
            emitEvent: options.emitEvent,
        });
    }
    FormUtils.deepUpdateValueAndValidity = deepUpdateValueAndValidity;
})(FormUtils || (FormUtils = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS11dGlscy5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy9QYXRyeWsvRGVza3RvcC9zcGFydGFjdXMvcHJvamVjdHMvc3RvcmVmcm9udGxpYi9zcmMvIiwic291cmNlcyI6WyJ1dGlscy9mb3JtLXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBbUIsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXZFOztHQUVHO0FBQ0gsTUFBTSxLQUFXLFNBQVMsQ0FrQ3pCO0FBbENELFdBQWlCLFNBQVM7SUFDeEI7Ozs7Ozs7Ozs7Ozs7OztPQWVHO0lBQ0gsU0FBZ0IsMEJBQTBCLENBQ3hDLE9BQXdCLEVBQ3hCLFVBQW1DLEVBQUU7UUFFckMsSUFBSSxPQUFPLFlBQVksU0FBUyxJQUFJLE9BQU8sWUFBWSxTQUFTLEVBQUU7WUFDaEUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUNyQyxDQUFDLFlBQTZCLEVBQUUsRUFBRTtnQkFDaEMsMEJBQTBCLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ3BELENBQUMsQ0FDRixDQUFDO1NBQ0g7UUFFRCxPQUFPLENBQUMsc0JBQXNCLENBQUM7WUFDN0IsUUFBUSxFQUFFLElBQUk7WUFDZCxTQUFTLEVBQUUsT0FBTyxDQUFDLFNBQVM7U0FDN0IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQWhCZSxvQ0FBMEIsNkJBZ0J6QyxDQUFBO0FBQ0gsQ0FBQyxFQWxDZ0IsU0FBUyxLQUFULFNBQVMsUUFrQ3pCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sLCBGb3JtQXJyYXksIEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuLyoqXG4gKiBVdGlscyBmb3IgQW5ndWxhciBmb3Jtc1xuICovXG5leHBvcnQgbmFtZXNwYWNlIEZvcm1VdGlscyB7XG4gIC8qKlxuICAgKiBDYWxscyB0aGUgbmF0aXZlIEFuZ3VsYXIgbWV0aG9kIGAjdXBkYXRlVmFsdWVBbmRWYWxpZGl0eWAgZm9yIHRoZSBnaXZlbiBmcm9tIGNvbnRyb2xcbiAgICogYW5kIGFsbCBpdHMgZGVzY2VuZGFudHMgKGluIGNhc2Ugd2hlbiBpdCdzIGBGb3JtR3JvdXBgIG9yIGBGb3JtQXJyYXlgKS5cbiAgICpcbiAgICogSW4gcGFydGljdWxhciBpdCdzIHVzZWZ1bCBmb3IgdHJpZ2dlcmluZyByZS1lbWlzc2lvbiBvZiBvYnNlcnZhYmxlc1xuICAgKiBgdmFsdWVDaGFuZ2VzYCBhbmQgYHN0YXR1c0NoYW5nZXNgIGZvciBhbGwgZGVzY2VuZGFudCBmb3JtIGNvbnRyb2xzLlxuICAgKlxuICAgKiBfTm90ZTogRHJvcHBpbmcgdGhpcyBmdW5jdGlvbiBtYXkgYmUgY29uc2lkZXJlZCwgd2hlbiBpdCdzIGltcGxlbWVudGVkIG5hdGl2ZWx5XG4gICAqIGJ5IEFuZ3VsYXIuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy82MTcwX1xuICAgKlxuICAgKiBAcGFyYW0gY29udHJvbCBmb3JtIGNvbnRyb2xcbiAgICogQHBhcmFtIG9wdGlvbnMgYWRkaXRpb25hbCBvcHRpb25zXG4gICAqICogYGVtaXRFdmVudGA6IFdoZW4gdHJ1ZSBvciBub3QgZ2l2ZW4gKHRoZSBkZWZhdWx0KSwgdGhlIGBzdGF0dXNDaGFuZ2VzYCBhbmRcbiAgICogYHZhbHVlQ2hhbmdlc2Agb2JzZXJ2YWJsZXMgZW1pdCB0aGUgbGF0ZXN0IHN0YXR1cyBhbmQgdmFsdWUuIFdoZW4gZmFsc2UsXG4gICAqIGl0IGRvZXNuJ3QgdHJpZ2dlciBvYnNlcnZhYmxlcyBlbWlzc2lvbi5cbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiBkZWVwVXBkYXRlVmFsdWVBbmRWYWxpZGl0eShcbiAgICBjb250cm9sOiBBYnN0cmFjdENvbnRyb2wsXG4gICAgb3B0aW9uczogeyBlbWl0RXZlbnQ/OiBib29sZWFuIH0gPSB7fVxuICApOiB2b2lkIHtcbiAgICBpZiAoY29udHJvbCBpbnN0YW5jZW9mIEZvcm1Hcm91cCB8fCBjb250cm9sIGluc3RhbmNlb2YgRm9ybUFycmF5KSB7XG4gICAgICBPYmplY3QudmFsdWVzKGNvbnRyb2wuY29udHJvbHMpLmZvckVhY2goXG4gICAgICAgIChjaGlsZENvbnRyb2w6IEFic3RyYWN0Q29udHJvbCkgPT4ge1xuICAgICAgICAgIGRlZXBVcGRhdGVWYWx1ZUFuZFZhbGlkaXR5KGNoaWxkQ29udHJvbCwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29udHJvbC51cGRhdGVWYWx1ZUFuZFZhbGlkaXR5KHtcbiAgICAgIG9ubHlTZWxmOiB0cnVlLCAvLyBhdm9pZCBjYWxsaW5nIGAjdXBkYXRlVmFsdWVBbmRWYWxpZGl0eWAgZm9yIGFsbCBhbmNlc3RvcnNcbiAgICAgIGVtaXRFdmVudDogb3B0aW9ucy5lbWl0RXZlbnQsXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==