import { Injectable } from '@angular/core';
import { Meta, Title } from '@angular/platform-browser';
import { isNotNullable, PageMetaService, PageRobotsMeta, } from '@spartacus/core';
import { filter } from 'rxjs/operators';
import { PageMetaLinkService } from './page-meta-link.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
import * as i2 from "@spartacus/core";
import * as i3 from "./page-meta-link.service";
export class SeoMetaService {
    constructor(ngTitle, ngMeta, pageMetaService, pageMetaLinkService) {
        this.ngTitle = ngTitle;
        this.ngMeta = ngMeta;
        this.pageMetaService = pageMetaService;
        this.pageMetaLinkService = pageMetaLinkService;
    }
    init() {
        this.subscription = this.pageMetaService
            .getMeta()
            .pipe(filter(isNotNullable))
            .subscribe((meta) => (this.meta = meta));
    }
    set meta(meta) {
        this.title = meta.title;
        this.description = meta.description;
        this.image = meta.image;
        // TODO(#10467): since we only resolve robots on SSR, we should consider to drop the defaults
        // with next major, as it's confusing to get the wrong defaults while navigating in CSR.
        this.robots = meta.robots || [PageRobotsMeta.INDEX, PageRobotsMeta.FOLLOW];
        this.canonicalUrl = meta.canonicalUrl;
    }
    set title(title) {
        this.ngTitle.setTitle(title || '');
    }
    set description(value) {
        if (value) {
            this.addTag({ name: 'description', content: value || '' });
        }
        else {
            this.ngMeta.removeTag('name="description"');
        }
    }
    set image(imageUrl) {
        if (imageUrl) {
            this.addTag({ name: 'og:image', content: imageUrl });
        }
        else {
            this.ngMeta.removeTag('name="og:image"');
        }
    }
    set robots(value) {
        if (value && value.length > 0) {
            this.addTag({ name: 'robots', content: value.join(', ') });
        }
    }
    /**
     * Add the canonical Url to the head of the page.
     *
     * If the canonical url already exists the link is removed. This is quite
     * unlikely though, since canonical links are (typically) only added in SSR.
     */
    set canonicalUrl(url) {
        var _a;
        (_a = this.pageMetaLinkService) === null || _a === void 0 ? void 0 : _a.setCanonicalLink(url);
    }
    addTag(meta) {
        if (meta.content) {
            this.ngMeta.updateTag(meta);
        }
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
SeoMetaService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SeoMetaService_Factory() { return new SeoMetaService(i0.ɵɵinject(i1.Title), i0.ɵɵinject(i1.Meta), i0.ɵɵinject(i2.PageMetaService), i0.ɵɵinject(i3.PageMetaLinkService)); }, token: SeoMetaService, providedIn: "root" });
SeoMetaService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
SeoMetaService.ctorParameters = () => [
    { type: Title },
    { type: Meta },
    { type: PageMetaService },
    { type: PageMetaLinkService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VvLW1ldGEuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy9QYXRyeWsvRGVza3RvcC9zcGFydGFjdXMvcHJvamVjdHMvc3RvcmVmcm9udGxpYi9zcmMvIiwic291cmNlcyI6WyJjbXMtc3RydWN0dXJlL3Nlby9zZW8tbWV0YS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDdEQsT0FBTyxFQUFFLElBQUksRUFBa0IsS0FBSyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDeEUsT0FBTyxFQUNMLGFBQWEsRUFFYixlQUFlLEVBQ2YsY0FBYyxHQUNmLE1BQU0saUJBQWlCLENBQUM7QUFFekIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDOzs7OztBQUsvRCxNQUFNLE9BQU8sY0FBYztJQUN6QixZQUNZLE9BQWMsRUFDZCxNQUFZLEVBQ1osZUFBZ0MsRUFDaEMsbUJBQXlDO1FBSHpDLFlBQU8sR0FBUCxPQUFPLENBQU87UUFDZCxXQUFNLEdBQU4sTUFBTSxDQUFNO1FBQ1osb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBQ2hDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBc0I7SUFDbEQsQ0FBQztJQUlKLElBQUk7UUFDRixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxlQUFlO2FBQ3JDLE9BQU8sRUFBRTthQUNULElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDM0IsU0FBUyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsSUFBYyxJQUFJLENBQUMsSUFBYztRQUMvQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDeEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN4Qiw2RkFBNkY7UUFDN0Ysd0ZBQXdGO1FBQ3hGLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzNFLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztJQUN4QyxDQUFDO0lBRUQsSUFBYyxLQUFLLENBQUMsS0FBeUI7UUFDM0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxJQUFjLFdBQVcsQ0FBQyxLQUF5QjtRQUNqRCxJQUFJLEtBQUssRUFBRTtZQUNULElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLE9BQU8sRUFBRSxLQUFLLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztTQUM1RDthQUFNO1lBQ0wsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUM3QztJQUNILENBQUM7SUFFRCxJQUFjLEtBQUssQ0FBQyxRQUE0QjtRQUM5QyxJQUFJLFFBQVEsRUFBRTtZQUNaLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1NBQ3REO2FBQU07WUFDTCxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQzFDO0lBQ0gsQ0FBQztJQUVELElBQWMsTUFBTSxDQUFDLEtBQXVCO1FBQzFDLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzdCLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUM1RDtJQUNILENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILElBQWMsWUFBWSxDQUFDLEdBQXVCOztRQUNoRCxNQUFBLElBQUksQ0FBQyxtQkFBbUIsMENBQUUsZ0JBQWdCLENBQUMsR0FBRyxFQUFFO0lBQ2xELENBQUM7SUFFUyxNQUFNLENBQUMsSUFBb0I7UUFDbkMsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzdCO0lBQ0gsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNqQztJQUNILENBQUM7Ozs7WUE1RUYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7WUFiOEIsS0FBSztZQUEzQixJQUFJO1lBSVgsZUFBZTtZQUtSLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWV0YSwgTWV0YURlZmluaXRpb24sIFRpdGxlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQge1xuICBpc05vdE51bGxhYmxlLFxuICBQYWdlTWV0YSxcbiAgUGFnZU1ldGFTZXJ2aWNlLFxuICBQYWdlUm9ib3RzTWV0YSxcbn0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgUGFnZU1ldGFMaW5rU2VydmljZSB9IGZyb20gJy4vcGFnZS1tZXRhLWxpbmsuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBTZW9NZXRhU2VydmljZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBuZ1RpdGxlOiBUaXRsZSxcbiAgICBwcm90ZWN0ZWQgbmdNZXRhOiBNZXRhLFxuICAgIHByb3RlY3RlZCBwYWdlTWV0YVNlcnZpY2U6IFBhZ2VNZXRhU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgcGFnZU1ldGFMaW5rU2VydmljZT86IFBhZ2VNZXRhTGlua1NlcnZpY2VcbiAgKSB7fVxuXG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IHRoaXMucGFnZU1ldGFTZXJ2aWNlXG4gICAgICAuZ2V0TWV0YSgpXG4gICAgICAucGlwZShmaWx0ZXIoaXNOb3ROdWxsYWJsZSkpXG4gICAgICAuc3Vic2NyaWJlKChtZXRhKSA9PiAodGhpcy5tZXRhID0gbWV0YSkpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHNldCBtZXRhKG1ldGE6IFBhZ2VNZXRhKSB7XG4gICAgdGhpcy50aXRsZSA9IG1ldGEudGl0bGU7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IG1ldGEuZGVzY3JpcHRpb247XG4gICAgdGhpcy5pbWFnZSA9IG1ldGEuaW1hZ2U7XG4gICAgLy8gVE9ETygjMTA0NjcpOiBzaW5jZSB3ZSBvbmx5IHJlc29sdmUgcm9ib3RzIG9uIFNTUiwgd2Ugc2hvdWxkIGNvbnNpZGVyIHRvIGRyb3AgdGhlIGRlZmF1bHRzXG4gICAgLy8gd2l0aCBuZXh0IG1ham9yLCBhcyBpdCdzIGNvbmZ1c2luZyB0byBnZXQgdGhlIHdyb25nIGRlZmF1bHRzIHdoaWxlIG5hdmlnYXRpbmcgaW4gQ1NSLlxuICAgIHRoaXMucm9ib3RzID0gbWV0YS5yb2JvdHMgfHwgW1BhZ2VSb2JvdHNNZXRhLklOREVYLCBQYWdlUm9ib3RzTWV0YS5GT0xMT1ddO1xuICAgIHRoaXMuY2Fub25pY2FsVXJsID0gbWV0YS5jYW5vbmljYWxVcmw7XG4gIH1cblxuICBwcm90ZWN0ZWQgc2V0IHRpdGxlKHRpdGxlOiBzdHJpbmcgfCB1bmRlZmluZWQpIHtcbiAgICB0aGlzLm5nVGl0bGUuc2V0VGl0bGUodGl0bGUgfHwgJycpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHNldCBkZXNjcmlwdGlvbih2YWx1ZTogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB0aGlzLmFkZFRhZyh7IG5hbWU6ICdkZXNjcmlwdGlvbicsIGNvbnRlbnQ6IHZhbHVlIHx8ICcnIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm5nTWV0YS5yZW1vdmVUYWcoJ25hbWU9XCJkZXNjcmlwdGlvblwiJyk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIHNldCBpbWFnZShpbWFnZVVybDogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKGltYWdlVXJsKSB7XG4gICAgICB0aGlzLmFkZFRhZyh7IG5hbWU6ICdvZzppbWFnZScsIGNvbnRlbnQ6IGltYWdlVXJsIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm5nTWV0YS5yZW1vdmVUYWcoJ25hbWU9XCJvZzppbWFnZVwiJyk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIHNldCByb2JvdHModmFsdWU6IFBhZ2VSb2JvdHNNZXRhW10pIHtcbiAgICBpZiAodmFsdWUgJiYgdmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5hZGRUYWcoeyBuYW1lOiAncm9ib3RzJywgY29udGVudDogdmFsdWUuam9pbignLCAnKSB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWRkIHRoZSBjYW5vbmljYWwgVXJsIHRvIHRoZSBoZWFkIG9mIHRoZSBwYWdlLlxuICAgKlxuICAgKiBJZiB0aGUgY2Fub25pY2FsIHVybCBhbHJlYWR5IGV4aXN0cyB0aGUgbGluayBpcyByZW1vdmVkLiBUaGlzIGlzIHF1aXRlXG4gICAqIHVubGlrZWx5IHRob3VnaCwgc2luY2UgY2Fub25pY2FsIGxpbmtzIGFyZSAodHlwaWNhbGx5KSBvbmx5IGFkZGVkIGluIFNTUi5cbiAgICovXG4gIHByb3RlY3RlZCBzZXQgY2Fub25pY2FsVXJsKHVybDogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5wYWdlTWV0YUxpbmtTZXJ2aWNlPy5zZXRDYW5vbmljYWxMaW5rKHVybCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYWRkVGFnKG1ldGE6IE1ldGFEZWZpbml0aW9uKSB7XG4gICAgaWYgKG1ldGEuY29udGVudCkge1xuICAgICAgdGhpcy5uZ01ldGEudXBkYXRlVGFnKG1ldGEpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==