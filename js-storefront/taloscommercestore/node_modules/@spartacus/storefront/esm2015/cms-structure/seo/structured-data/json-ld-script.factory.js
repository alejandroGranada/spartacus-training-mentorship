import { isPlatformBrowser } from '@angular/common';
import { Inject, Injectable, isDevMode, PLATFORM_ID, RendererFactory2, SecurityContext, } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { WindowRef } from '@spartacus/core';
import { SeoConfig } from '../config';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "@angular/platform-browser";
import * as i3 from "../config/seo.config";
export class JsonLdScriptFactory {
    constructor(platformId, winRef, rendererFactory, sanitizer, config) {
        this.platformId = platformId;
        this.winRef = winRef;
        this.rendererFactory = rendererFactory;
        this.sanitizer = sanitizer;
        this.config = config;
    }
    build(schema) {
        if (schema && this.isJsonLdRequired()) {
            this.getJsonLdScriptElement().innerHTML = this.sanitize(schema);
        }
    }
    /**
     * Indicates whether json ld data should be generated.
     *
     * This is only required on the server, but can be enabled in dev mode.
     */
    isJsonLdRequired() {
        var _a, _b;
        return (!isPlatformBrowser(this.platformId) ||
            (isDevMode() && !((_b = (_a = this.config.seo) === null || _a === void 0 ? void 0 : _a.structuredData) === null || _b === void 0 ? void 0 : _b.disableInDevMode)));
    }
    /**
     * Creates a json-ld script element. The element is created one, and appended
     * to the html body element.
     *
     * ```html
     * <script id="json-ld" type="application/ld+json">
     * </script>
     * ```
     */
    getJsonLdScriptElement() {
        const id = 'json-ld';
        let scriptElement = (this.winRef.document.getElementById(id));
        if (!scriptElement) {
            const renderer = this.rendererFactory.createRenderer(null, null);
            const script = renderer.createElement('script');
            script.id = id;
            script.type = 'application/ld+json';
            renderer.appendChild(this.winRef.document.body, script);
            scriptElement = script;
        }
        return scriptElement;
    }
    /**
     * Sanitizes the given json-ld schema by leveraging the angular HTML sanitizer.
     *
     * The given schema is not trusted, as malicious code could be injected (XSS)
     * into the json-ld script.
     */
    sanitize(schema) {
        return JSON.stringify(schema, (_key, value) => typeof value === 'string'
            ? this.sanitizer.sanitize(SecurityContext.HTML, value)
            : value);
    }
}
JsonLdScriptFactory.ɵprov = i0.ɵɵdefineInjectable({ factory: function JsonLdScriptFactory_Factory() { return new JsonLdScriptFactory(i0.ɵɵinject(i0.PLATFORM_ID), i0.ɵɵinject(i1.WindowRef), i0.ɵɵinject(i0.RendererFactory2), i0.ɵɵinject(i2.DomSanitizer), i0.ɵɵinject(i3.SeoConfig)); }, token: JsonLdScriptFactory, providedIn: "root" });
JsonLdScriptFactory.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
JsonLdScriptFactory.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: WindowRef },
    { type: RendererFactory2 },
    { type: DomSanitizer },
    { type: SeoConfig }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi1sZC1zY3JpcHQuZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy9QYXRyeWsvRGVza3RvcC9zcGFydGFjdXMvcHJvamVjdHMvc3RvcmVmcm9udGxpYi9zcmMvIiwic291cmNlcyI6WyJjbXMtc3RydWN0dXJlL3Nlby9zdHJ1Y3R1cmVkLWRhdGEvanNvbi1sZC1zY3JpcHQuZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNwRCxPQUFPLEVBQ0wsTUFBTSxFQUNOLFVBQVUsRUFDVixTQUFTLEVBQ1QsV0FBVyxFQUVYLGdCQUFnQixFQUNoQixlQUFlLEdBQ2hCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDNUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFdBQVcsQ0FBQzs7Ozs7QUFLdEMsTUFBTSxPQUFPLG1CQUFtQjtJQUM5QixZQUNpQyxVQUFrQixFQUN2QyxNQUFpQixFQUNqQixlQUFpQyxFQUNqQyxTQUF1QixFQUN2QixNQUFpQjtRQUpJLGVBQVUsR0FBVixVQUFVLENBQVE7UUFDdkMsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUNqQixvQkFBZSxHQUFmLGVBQWUsQ0FBa0I7UUFDakMsY0FBUyxHQUFULFNBQVMsQ0FBYztRQUN2QixXQUFNLEdBQU4sTUFBTSxDQUFXO0lBQzFCLENBQUM7SUFFSixLQUFLLENBQUMsTUFBWTtRQUNoQixJQUFJLE1BQU0sSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsRUFBRTtZQUNyQyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNqRTtJQUNILENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsZ0JBQWdCOztRQUNkLE9BQU8sQ0FDTCxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7WUFDbkMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxjQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRywwQ0FBRSxjQUFjLDBDQUFFLGdCQUFnQixDQUFBLENBQUMsQ0FDcEUsQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUNPLHNCQUFzQjtRQUM5QixNQUFNLEVBQUUsR0FBRyxTQUFTLENBQUM7UUFDckIsSUFBSSxhQUFhLEdBQXlDLENBQ3hELElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FDeEMsQ0FBQztRQUVGLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDbEIsTUFBTSxRQUFRLEdBQWMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQzdELElBQUksRUFDSixJQUFJLENBQ0wsQ0FBQztZQUNGLE1BQU0sTUFBTSxHQUFzQixRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ25FLE1BQU0sQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1lBQ2YsTUFBTSxDQUFDLElBQUksR0FBRyxxQkFBcUIsQ0FBQztZQUNwQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztZQUN4RCxhQUFhLEdBQUcsTUFBTSxDQUFDO1NBQ3hCO1FBQ0QsT0FBTyxhQUFhLENBQUM7SUFDdkIsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsUUFBUSxDQUFDLE1BQVU7UUFDakIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUM1QyxPQUFPLEtBQUssS0FBSyxRQUFRO1lBQ3ZCLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQztZQUN0RCxDQUFDLENBQUMsS0FBSyxDQUNWLENBQUM7SUFDSixDQUFDOzs7O1lBdkVGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7O3lDQUdJLE1BQU0sU0FBQyxXQUFXO1lBUmQsU0FBUztZQUpoQixnQkFBZ0I7WUFHVCxZQUFZO1lBRVosU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7XG4gIEluamVjdCxcbiAgSW5qZWN0YWJsZSxcbiAgaXNEZXZNb2RlLFxuICBQTEFURk9STV9JRCxcbiAgUmVuZGVyZXIyLFxuICBSZW5kZXJlckZhY3RvcnkyLFxuICBTZWN1cml0eUNvbnRleHQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBXaW5kb3dSZWYgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHsgU2VvQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIEpzb25MZFNjcmlwdEZhY3Rvcnkge1xuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcm90ZWN0ZWQgcGxhdGZvcm1JZDogc3RyaW5nLFxuICAgIHByb3RlY3RlZCB3aW5SZWY6IFdpbmRvd1JlZixcbiAgICBwcm90ZWN0ZWQgcmVuZGVyZXJGYWN0b3J5OiBSZW5kZXJlckZhY3RvcnkyLFxuICAgIHByb3RlY3RlZCBzYW5pdGl6ZXI6IERvbVNhbml0aXplcixcbiAgICBwcm90ZWN0ZWQgY29uZmlnOiBTZW9Db25maWdcbiAgKSB7fVxuXG4gIGJ1aWxkKHNjaGVtYToge31bXSk6IHZvaWQge1xuICAgIGlmIChzY2hlbWEgJiYgdGhpcy5pc0pzb25MZFJlcXVpcmVkKCkpIHtcbiAgICAgIHRoaXMuZ2V0SnNvbkxkU2NyaXB0RWxlbWVudCgpLmlubmVySFRNTCA9IHRoaXMuc2FuaXRpemUoc2NoZW1hKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW5kaWNhdGVzIHdoZXRoZXIganNvbiBsZCBkYXRhIHNob3VsZCBiZSBnZW5lcmF0ZWQuXG4gICAqXG4gICAqIFRoaXMgaXMgb25seSByZXF1aXJlZCBvbiB0aGUgc2VydmVyLCBidXQgY2FuIGJlIGVuYWJsZWQgaW4gZGV2IG1vZGUuXG4gICAqL1xuICBpc0pzb25MZFJlcXVpcmVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoXG4gICAgICAhaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSB8fFxuICAgICAgKGlzRGV2TW9kZSgpICYmICF0aGlzLmNvbmZpZy5zZW8/LnN0cnVjdHVyZWREYXRhPy5kaXNhYmxlSW5EZXZNb2RlKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGpzb24tbGQgc2NyaXB0IGVsZW1lbnQuIFRoZSBlbGVtZW50IGlzIGNyZWF0ZWQgb25lLCBhbmQgYXBwZW5kZWRcbiAgICogdG8gdGhlIGh0bWwgYm9keSBlbGVtZW50LlxuICAgKlxuICAgKiBgYGBodG1sXG4gICAqIDxzY3JpcHQgaWQ9XCJqc29uLWxkXCIgdHlwZT1cImFwcGxpY2F0aW9uL2xkK2pzb25cIj5cbiAgICogPC9zY3JpcHQ+XG4gICAqIGBgYFxuICAgKi9cbiAgcHJvdGVjdGVkIGdldEpzb25MZFNjcmlwdEVsZW1lbnQoKTogSFRNTFNjcmlwdEVsZW1lbnQge1xuICAgIGNvbnN0IGlkID0gJ2pzb24tbGQnO1xuICAgIGxldCBzY3JpcHRFbGVtZW50OiBIVE1MU2NyaXB0RWxlbWVudCA9IDxIVE1MU2NyaXB0RWxlbWVudD4oXG4gICAgICB0aGlzLndpblJlZi5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZClcbiAgICApO1xuXG4gICAgaWYgKCFzY3JpcHRFbGVtZW50KSB7XG4gICAgICBjb25zdCByZW5kZXJlcjogUmVuZGVyZXIyID0gdGhpcy5yZW5kZXJlckZhY3RvcnkuY3JlYXRlUmVuZGVyZXIoXG4gICAgICAgIG51bGwsXG4gICAgICAgIG51bGxcbiAgICAgICk7XG4gICAgICBjb25zdCBzY3JpcHQ6IEhUTUxTY3JpcHRFbGVtZW50ID0gcmVuZGVyZXIuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICBzY3JpcHQuaWQgPSBpZDtcbiAgICAgIHNjcmlwdC50eXBlID0gJ2FwcGxpY2F0aW9uL2xkK2pzb24nO1xuICAgICAgcmVuZGVyZXIuYXBwZW5kQ2hpbGQodGhpcy53aW5SZWYuZG9jdW1lbnQuYm9keSwgc2NyaXB0KTtcbiAgICAgIHNjcmlwdEVsZW1lbnQgPSBzY3JpcHQ7XG4gICAgfVxuICAgIHJldHVybiBzY3JpcHRFbGVtZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIFNhbml0aXplcyB0aGUgZ2l2ZW4ganNvbi1sZCBzY2hlbWEgYnkgbGV2ZXJhZ2luZyB0aGUgYW5ndWxhciBIVE1MIHNhbml0aXplci5cbiAgICpcbiAgICogVGhlIGdpdmVuIHNjaGVtYSBpcyBub3QgdHJ1c3RlZCwgYXMgbWFsaWNpb3VzIGNvZGUgY291bGQgYmUgaW5qZWN0ZWQgKFhTUylcbiAgICogaW50byB0aGUganNvbi1sZCBzY3JpcHQuXG4gICAqL1xuICBzYW5pdGl6ZShzY2hlbWE6IHt9KTogc3RyaW5nIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoc2NoZW1hLCAoX2tleSwgdmFsdWUpID0+XG4gICAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnXG4gICAgICAgID8gdGhpcy5zYW5pdGl6ZXIuc2FuaXRpemUoU2VjdXJpdHlDb250ZXh0LkhUTUwsIHZhbHVlKVxuICAgICAgICA6IHZhbHVlXG4gICAgKTtcbiAgfVxufVxuIl19