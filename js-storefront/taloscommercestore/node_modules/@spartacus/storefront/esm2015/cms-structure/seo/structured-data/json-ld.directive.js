import { Directive, HostBinding, Input } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { JsonLdScriptFactory } from './json-ld-script.factory';
/**
 * Low level directive that adds a json-ld script tag to the component.
 * This code bypasses the strict XSS security, as otherwise we're not able
 * to append a script tag with JS inside.
 *
 * This helper directive is actually not used in Spartacus, as Spartacus
 * appends json-ld the data to the document body.
 *
 * This directive can however be used by merchants to write static schema data
 * to the DOM in a save way.
 */
export class JsonLdDirective {
    constructor(jsonLdScriptFactory, sanitizer) {
        this.jsonLdScriptFactory = jsonLdScriptFactory;
        this.sanitizer = sanitizer;
    }
    /**
     * Writes the schema data to a json-ld script element.
     */
    set cxJsonLd(schema) {
        this.jsonLD = this.generateJsonLdScript(schema);
    }
    /**
     * Returns the json-ld script tag with the schema data. The script is
     * _bypassing_ sanitization explicitly.
     */
    generateJsonLdScript(schema) {
        if (schema && this.jsonLdScriptFactory.isJsonLdRequired()) {
            const sanitizedSchema = this.jsonLdScriptFactory.sanitize(schema);
            const html = `<script type="application/ld+json">${sanitizedSchema}</script>`;
            return this.sanitizer.bypassSecurityTrustHtml(html);
        }
    }
}
JsonLdDirective.decorators = [
    { type: Directive, args: [{
                selector: '[cxJsonLd]',
            },] }
];
JsonLdDirective.ctorParameters = () => [
    { type: JsonLdScriptFactory },
    { type: DomSanitizer }
];
JsonLdDirective.propDecorators = {
    cxJsonLd: [{ type: Input }],
    jsonLD: [{ type: HostBinding, args: ['innerHTML',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi1sZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvUGF0cnlrL0Rlc2t0b3Avc3BhcnRhY3VzL3Byb2plY3RzL3N0b3JlZnJvbnRsaWIvc3JjLyIsInNvdXJjZXMiOlsiY21zLXN0cnVjdHVyZS9zZW8vc3RydWN0dXJlZC1kYXRhL2pzb24tbGQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsWUFBWSxFQUFZLE1BQU0sMkJBQTJCLENBQUM7QUFDbkUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFL0Q7Ozs7Ozs7Ozs7R0FVRztBQUlILE1BQU0sT0FBTyxlQUFlO0lBVTFCLFlBQ1ksbUJBQXdDLEVBQ3hDLFNBQXVCO1FBRHZCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFDeEMsY0FBUyxHQUFULFNBQVMsQ0FBYztJQUNoQyxDQUFDO0lBWko7O09BRUc7SUFDSCxJQUFhLFFBQVEsQ0FBQyxNQUFtQjtRQUN2QyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBU0Q7OztPQUdHO0lBQ08sb0JBQW9CLENBQUMsTUFBbUI7UUFDaEQsSUFBSSxNQUFNLElBQUksSUFBSSxDQUFDLG1CQUFtQixDQUFDLGdCQUFnQixFQUFFLEVBQUU7WUFDekQsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNsRSxNQUFNLElBQUksR0FBRyxzQ0FBc0MsZUFBZSxXQUFXLENBQUM7WUFDOUUsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3JEO0lBQ0gsQ0FBQzs7O1lBNUJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsWUFBWTthQUN2Qjs7O1lBZlEsbUJBQW1CO1lBRG5CLFlBQVk7Ozt1QkFxQmxCLEtBQUs7cUJBSUwsV0FBVyxTQUFDLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RCaW5kaW5nLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyLCBTYWZlSHRtbCB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgSnNvbkxkU2NyaXB0RmFjdG9yeSB9IGZyb20gJy4vanNvbi1sZC1zY3JpcHQuZmFjdG9yeSc7XG5cbi8qKlxuICogTG93IGxldmVsIGRpcmVjdGl2ZSB0aGF0IGFkZHMgYSBqc29uLWxkIHNjcmlwdCB0YWcgdG8gdGhlIGNvbXBvbmVudC5cbiAqIFRoaXMgY29kZSBieXBhc3NlcyB0aGUgc3RyaWN0IFhTUyBzZWN1cml0eSwgYXMgb3RoZXJ3aXNlIHdlJ3JlIG5vdCBhYmxlXG4gKiB0byBhcHBlbmQgYSBzY3JpcHQgdGFnIHdpdGggSlMgaW5zaWRlLlxuICpcbiAqIFRoaXMgaGVscGVyIGRpcmVjdGl2ZSBpcyBhY3R1YWxseSBub3QgdXNlZCBpbiBTcGFydGFjdXMsIGFzIFNwYXJ0YWN1c1xuICogYXBwZW5kcyBqc29uLWxkIHRoZSBkYXRhIHRvIHRoZSBkb2N1bWVudCBib2R5LlxuICpcbiAqIFRoaXMgZGlyZWN0aXZlIGNhbiBob3dldmVyIGJlIHVzZWQgYnkgbWVyY2hhbnRzIHRvIHdyaXRlIHN0YXRpYyBzY2hlbWEgZGF0YVxuICogdG8gdGhlIERPTSBpbiBhIHNhdmUgd2F5LlxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbY3hKc29uTGRdJyxcbn0pXG5leHBvcnQgY2xhc3MgSnNvbkxkRGlyZWN0aXZlIHtcbiAgLyoqXG4gICAqIFdyaXRlcyB0aGUgc2NoZW1hIGRhdGEgdG8gYSBqc29uLWxkIHNjcmlwdCBlbGVtZW50LlxuICAgKi9cbiAgQElucHV0KCkgc2V0IGN4SnNvbkxkKHNjaGVtYTogc3RyaW5nIHwge30pIHtcbiAgICB0aGlzLmpzb25MRCA9IHRoaXMuZ2VuZXJhdGVKc29uTGRTY3JpcHQoc2NoZW1hKTtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnaW5uZXJIVE1MJykganNvbkxEOiBTYWZlSHRtbDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQganNvbkxkU2NyaXB0RmFjdG9yeTogSnNvbkxkU2NyaXB0RmFjdG9yeSxcbiAgICBwcm90ZWN0ZWQgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXJcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBqc29uLWxkIHNjcmlwdCB0YWcgd2l0aCB0aGUgc2NoZW1hIGRhdGEuIFRoZSBzY3JpcHQgaXNcbiAgICogX2J5cGFzc2luZ18gc2FuaXRpemF0aW9uIGV4cGxpY2l0bHkuXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2VuZXJhdGVKc29uTGRTY3JpcHQoc2NoZW1hOiBzdHJpbmcgfCB7fSk6IFNhZmVIdG1sIHtcbiAgICBpZiAoc2NoZW1hICYmIHRoaXMuanNvbkxkU2NyaXB0RmFjdG9yeS5pc0pzb25MZFJlcXVpcmVkKCkpIHtcbiAgICAgIGNvbnN0IHNhbml0aXplZFNjaGVtYSA9IHRoaXMuanNvbkxkU2NyaXB0RmFjdG9yeS5zYW5pdGl6ZShzY2hlbWEpO1xuICAgICAgY29uc3QgaHRtbCA9IGA8c2NyaXB0IHR5cGU9XCJhcHBsaWNhdGlvbi9sZCtqc29uXCI+JHtzYW5pdGl6ZWRTY2hlbWF9PC9zY3JpcHQ+YDtcbiAgICAgIHJldHVybiB0aGlzLnNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0SHRtbChodG1sKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==