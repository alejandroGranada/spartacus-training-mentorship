import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * Builds the basic structured data for the product, see https://schema.org/product.
 * This builder includes data for sku number, name, description, brand and main image.
 */
export class JsonLdBaseProductBuilder {
    build(product) {
        return of(Object.assign(Object.assign(Object.assign({}, this.getProductBase(product)), this.getProductBrand(product)), this.getProductImage(product)));
    }
    /**
     * Returns the product sku, name and description.
     */
    getProductBase(product) {
        const result = { sku: product.code };
        if (product.name) {
            result.name = product.name;
        }
        if (product.summary) {
            result.description = product.summary;
        }
        return result;
    }
    /**
     * Returns the image object with the main product image url.
     *
     * If the image is not available, an empty object is returned.
     */
    getProductImage(product) {
        var _a, _b, _c;
        const image = (_c = (_b = (_a = product.images) === null || _a === void 0 ? void 0 : _a.PRIMARY) === null || _b === void 0 ? void 0 : _b['zoom']) === null || _c === void 0 ? void 0 : _c.url;
        return image ? { image } : {};
    }
    /**
     * Returns the brand object with the product manufacturer.
     *
     * If the brand is not available, an empty object is returned.
     */
    getProductBrand(product) {
        const brand = product.manufacturer;
        return brand ? { brand } : {};
    }
}
JsonLdBaseProductBuilder.ɵprov = i0.ɵɵdefineInjectable({ factory: function JsonLdBaseProductBuilder_Factory() { return new JsonLdBaseProductBuilder(); }, token: JsonLdBaseProductBuilder, providedIn: "root" });
JsonLdBaseProductBuilder.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbmxkLWJhc2UtcHJvZHVjdC5idWlsZGVyLmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9wcm9qZWN0cy9zdG9yZWZyb250bGliL3NyYy8iLCJzb3VyY2VzIjpbImNtcy1zdHJ1Y3R1cmUvc2VvL3N0cnVjdHVyZWQtZGF0YS9idWlsZGVycy9wcm9kdWN0L2pzb25sZC1iYXNlLXByb2R1Y3QuYnVpbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7O0FBR3RDOzs7R0FHRztBQUlILE1BQU0sT0FBTyx3QkFBd0I7SUFDbkMsS0FBSyxDQUFDLE9BQWdCO1FBQ3BCLE9BQU8sRUFBRSwrQ0FDSixJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxHQUM1QixJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxHQUM3QixJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxFQUNoQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOztPQUVHO0lBQ0ssY0FBYyxDQUFDLE9BQWdCO1FBQ3JDLE1BQU0sTUFBTSxHQUFRLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUMxQyxJQUFJLE9BQU8sQ0FBQyxJQUFJLEVBQUU7WUFDaEIsTUFBTSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1NBQzVCO1FBQ0QsSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO1lBQ25CLE1BQU0sQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQztTQUN0QztRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRDs7OztPQUlHO0lBQ08sZUFBZSxDQUFDLE9BQWdCOztRQUN4QyxNQUFNLEtBQUsscUJBQUcsT0FBTyxDQUFDLE1BQU0sMENBQUUsT0FBTywwQ0FBRyxNQUFNLDJDQUFHLEdBQUcsQ0FBQztRQUNyRCxPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFFRDs7OztPQUlHO0lBQ08sZUFBZSxDQUFDLE9BQWdCO1FBQ3hDLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUM7UUFDbkMsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNoQyxDQUFDOzs7O1lBNUNGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFByb2R1Y3QgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEpzb25MZEJ1aWxkZXIgfSBmcm9tICcuLi9zY2hlbWEuaW50ZXJmYWNlJztcblxuLyoqXG4gKiBCdWlsZHMgdGhlIGJhc2ljIHN0cnVjdHVyZWQgZGF0YSBmb3IgdGhlIHByb2R1Y3QsIHNlZSBodHRwczovL3NjaGVtYS5vcmcvcHJvZHVjdC5cbiAqIFRoaXMgYnVpbGRlciBpbmNsdWRlcyBkYXRhIGZvciBza3UgbnVtYmVyLCBuYW1lLCBkZXNjcmlwdGlvbiwgYnJhbmQgYW5kIG1haW4gaW1hZ2UuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBKc29uTGRCYXNlUHJvZHVjdEJ1aWxkZXIgaW1wbGVtZW50cyBKc29uTGRCdWlsZGVyPFByb2R1Y3Q+IHtcbiAgYnVpbGQocHJvZHVjdDogUHJvZHVjdCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIG9mKHtcbiAgICAgIC4uLnRoaXMuZ2V0UHJvZHVjdEJhc2UocHJvZHVjdCksXG4gICAgICAuLi50aGlzLmdldFByb2R1Y3RCcmFuZChwcm9kdWN0KSxcbiAgICAgIC4uLnRoaXMuZ2V0UHJvZHVjdEltYWdlKHByb2R1Y3QpLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHByb2R1Y3Qgc2t1LCBuYW1lIGFuZCBkZXNjcmlwdGlvbi5cbiAgICovXG4gIHByaXZhdGUgZ2V0UHJvZHVjdEJhc2UocHJvZHVjdDogUHJvZHVjdCkge1xuICAgIGNvbnN0IHJlc3VsdDogYW55ID0geyBza3U6IHByb2R1Y3QuY29kZSB9O1xuICAgIGlmIChwcm9kdWN0Lm5hbWUpIHtcbiAgICAgIHJlc3VsdC5uYW1lID0gcHJvZHVjdC5uYW1lO1xuICAgIH1cbiAgICBpZiAocHJvZHVjdC5zdW1tYXJ5KSB7XG4gICAgICByZXN1bHQuZGVzY3JpcHRpb24gPSBwcm9kdWN0LnN1bW1hcnk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgaW1hZ2Ugb2JqZWN0IHdpdGggdGhlIG1haW4gcHJvZHVjdCBpbWFnZSB1cmwuXG4gICAqXG4gICAqIElmIHRoZSBpbWFnZSBpcyBub3QgYXZhaWxhYmxlLCBhbiBlbXB0eSBvYmplY3QgaXMgcmV0dXJuZWQuXG4gICAqL1xuICBwcm90ZWN0ZWQgZ2V0UHJvZHVjdEltYWdlKHByb2R1Y3Q6IFByb2R1Y3QpOiB7IGltYWdlPzogc3RyaW5nIH0ge1xuICAgIGNvbnN0IGltYWdlID0gcHJvZHVjdC5pbWFnZXM/LlBSSU1BUlk/Llsnem9vbSddPy51cmw7XG4gICAgcmV0dXJuIGltYWdlID8geyBpbWFnZSB9IDoge307XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYnJhbmQgb2JqZWN0IHdpdGggdGhlIHByb2R1Y3QgbWFudWZhY3R1cmVyLlxuICAgKlxuICAgKiBJZiB0aGUgYnJhbmQgaXMgbm90IGF2YWlsYWJsZSwgYW4gZW1wdHkgb2JqZWN0IGlzIHJldHVybmVkLlxuICAgKi9cbiAgcHJvdGVjdGVkIGdldFByb2R1Y3RCcmFuZChwcm9kdWN0OiBQcm9kdWN0KTogeyBicmFuZD86IHN0cmluZyB9IHtcbiAgICBjb25zdCBicmFuZCA9IHByb2R1Y3QubWFudWZhY3R1cmVyO1xuICAgIHJldHVybiBicmFuZCA/IHsgYnJhbmQgfSA6IHt9O1xuICB9XG59XG4iXX0=