import { Injectable, RendererFactory2 } from '@angular/core';
import { WindowRef } from '@spartacus/core';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
export class PageMetaLinkService {
    constructor(winRef, rendererFactory) {
        this.winRef = winRef;
        this.rendererFactory = rendererFactory;
    }
    /**
     * Adds a canonical link element to the document head.
     *
     * If an id is provided, the link will be updated.
     * If no url is provided, the link element will be deleted.
     */
    setCanonicalLink(url) {
        let link = this.winRef.document.querySelector('link[rel="canonical"]');
        if (!url) {
            // Removing the link is an edge case, but useful if the canonical url
            // is created in CSR while developing/testing.
            link === null || link === void 0 ? void 0 : link.remove();
            return;
        }
        if (!link) {
            link = this.renderer.createElement('link');
            link.rel = 'canonical';
            link.href = url;
            this.renderer.appendChild(this.winRef.document.head, link);
        }
        else {
            link === null || link === void 0 ? void 0 : link.setAttribute('href', url);
        }
    }
    get renderer() {
        return this.rendererFactory.createRenderer(null, null);
    }
}
PageMetaLinkService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PageMetaLinkService_Factory() { return new PageMetaLinkService(i0.ɵɵinject(i1.WindowRef), i0.ɵɵinject(i0.RendererFactory2)); }, token: PageMetaLinkService, providedIn: "root" });
PageMetaLinkService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
PageMetaLinkService.ctorParameters = () => [
    { type: WindowRef },
    { type: RendererFactory2 }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS1tZXRhLWxpbmsuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy9QYXRyeWsvRGVza3RvcC9zcGFydGFjdXMvcHJvamVjdHMvc3RvcmVmcm9udGxpYi9zcmMvIiwic291cmNlcyI6WyJjbXMtc3RydWN0dXJlL3Nlby9wYWdlLW1ldGEtbGluay5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWEsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7QUFLNUMsTUFBTSxPQUFPLG1CQUFtQjtJQUM5QixZQUNZLE1BQWlCLEVBQ2pCLGVBQWlDO1FBRGpDLFdBQU0sR0FBTixNQUFNLENBQVc7UUFDakIsb0JBQWUsR0FBZixlQUFlLENBQWtCO0lBQzFDLENBQUM7SUFFSjs7Ozs7T0FLRztJQUNILGdCQUFnQixDQUFDLEdBQXVCO1FBQ3RDLElBQUksSUFBSSxHQUFvQixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQzVELHVCQUF1QixDQUNMLENBQUM7UUFFckIsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNSLHFFQUFxRTtZQUNyRSw4Q0FBOEM7WUFDOUMsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLE1BQU0sR0FBRztZQUNmLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDVCxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDM0MsSUFBSSxDQUFDLEdBQUcsR0FBRyxXQUFXLENBQUM7WUFDdkIsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7WUFDaEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQzVEO2FBQU07WUFDTCxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsWUFBWSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7U0FDakM7SUFDSCxDQUFDO0lBRUQsSUFBYyxRQUFRO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3pELENBQUM7Ozs7WUF2Q0YsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7WUFKUSxTQUFTO1lBRGMsZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgUmVuZGVyZXIyLCBSZW5kZXJlckZhY3RvcnkyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBXaW5kb3dSZWYgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgUGFnZU1ldGFMaW5rU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCB3aW5SZWY6IFdpbmRvd1JlZixcbiAgICBwcm90ZWN0ZWQgcmVuZGVyZXJGYWN0b3J5OiBSZW5kZXJlckZhY3RvcnkyXG4gICkge31cblxuICAvKipcbiAgICogQWRkcyBhIGNhbm9uaWNhbCBsaW5rIGVsZW1lbnQgdG8gdGhlIGRvY3VtZW50IGhlYWQuXG4gICAqXG4gICAqIElmIGFuIGlkIGlzIHByb3ZpZGVkLCB0aGUgbGluayB3aWxsIGJlIHVwZGF0ZWQuXG4gICAqIElmIG5vIHVybCBpcyBwcm92aWRlZCwgdGhlIGxpbmsgZWxlbWVudCB3aWxsIGJlIGRlbGV0ZWQuXG4gICAqL1xuICBzZXRDYW5vbmljYWxMaW5rKHVybDogc3RyaW5nIHwgdW5kZWZpbmVkKTogdm9pZCB7XG4gICAgbGV0IGxpbms6IEhUTUxMaW5rRWxlbWVudCA9IHRoaXMud2luUmVmLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAnbGlua1tyZWw9XCJjYW5vbmljYWxcIl0nXG4gICAgKSBhcyBIVE1MTGlua0VsZW1lbnQ7XG5cbiAgICBpZiAoIXVybCkge1xuICAgICAgLy8gUmVtb3ZpbmcgdGhlIGxpbmsgaXMgYW4gZWRnZSBjYXNlLCBidXQgdXNlZnVsIGlmIHRoZSBjYW5vbmljYWwgdXJsXG4gICAgICAvLyBpcyBjcmVhdGVkIGluIENTUiB3aGlsZSBkZXZlbG9waW5nL3Rlc3RpbmcuXG4gICAgICBsaW5rPy5yZW1vdmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWxpbmspIHtcbiAgICAgIGxpbmsgPSB0aGlzLnJlbmRlcmVyLmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTtcbiAgICAgIGxpbmsucmVsID0gJ2Nhbm9uaWNhbCc7XG4gICAgICBsaW5rLmhyZWYgPSB1cmw7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFwcGVuZENoaWxkKHRoaXMud2luUmVmLmRvY3VtZW50LmhlYWQsIGxpbmspO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaW5rPy5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCB1cmwpO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBnZXQgcmVuZGVyZXIoKTogUmVuZGVyZXIyIHtcbiAgICByZXR1cm4gdGhpcy5yZW5kZXJlckZhY3RvcnkuY3JlYXRlUmVuZGVyZXIobnVsbCwgbnVsbCk7XG4gIH1cbn1cbiJdfQ==