import { NgModule } from '@angular/core';
import { BreadcrumbSchemaBuilder } from './breadcrumb/index';
import { JsonLdBaseProductBuilder, JsonLdProductOfferBuilder, JsonLdProductReviewBuilder, ProductSchemaBuilder, } from './product/index';
import { JSONLD_PRODUCT_BUILDER, SCHEMA_BUILDER } from './tokens';
/**
 * Provides several standard json-ld builders that contribute
 * to collecting and building json-ld data.
 */
export class JsonLdBuilderModule {
}
JsonLdBuilderModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    {
                        provide: SCHEMA_BUILDER,
                        useExisting: ProductSchemaBuilder,
                        multi: true,
                    },
                    {
                        provide: SCHEMA_BUILDER,
                        useExisting: BreadcrumbSchemaBuilder,
                        multi: true,
                    },
                    // lower level json-ld builder classes offering fine-grained control
                    // for product related schemas
                    {
                        provide: JSONLD_PRODUCT_BUILDER,
                        useExisting: JsonLdBaseProductBuilder,
                        multi: true,
                    },
                    {
                        provide: JSONLD_PRODUCT_BUILDER,
                        useExisting: JsonLdProductOfferBuilder,
                        multi: true,
                    },
                    {
                        provide: JSONLD_PRODUCT_BUILDER,
                        useExisting: JsonLdProductReviewBuilder,
                        multi: true,
                    },
                ],
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi1sZC1idWlsZGVyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy9QYXRyeWsvRGVza3RvcC9zcGFydGFjdXMvcHJvamVjdHMvc3RvcmVmcm9udGxpYi9zcmMvIiwic291cmNlcyI6WyJjbXMtc3RydWN0dXJlL3Nlby9zdHJ1Y3R1cmVkLWRhdGEvYnVpbGRlcnMvanNvbi1sZC1idWlsZGVyLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzdELE9BQU8sRUFDTCx3QkFBd0IsRUFDeEIseUJBQXlCLEVBQ3pCLDBCQUEwQixFQUMxQixvQkFBb0IsR0FDckIsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsY0FBYyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRWxFOzs7R0FHRztBQWdDSCxNQUFNLE9BQU8sbUJBQW1COzs7WUEvQi9CLFFBQVEsU0FBQztnQkFDUixTQUFTLEVBQUU7b0JBQ1Q7d0JBQ0UsT0FBTyxFQUFFLGNBQWM7d0JBQ3ZCLFdBQVcsRUFBRSxvQkFBb0I7d0JBQ2pDLEtBQUssRUFBRSxJQUFJO3FCQUNaO29CQUNEO3dCQUNFLE9BQU8sRUFBRSxjQUFjO3dCQUN2QixXQUFXLEVBQUUsdUJBQXVCO3dCQUNwQyxLQUFLLEVBQUUsSUFBSTtxQkFDWjtvQkFDRCxvRUFBb0U7b0JBQ3BFLDhCQUE4QjtvQkFDOUI7d0JBQ0UsT0FBTyxFQUFFLHNCQUFzQjt3QkFDL0IsV0FBVyxFQUFFLHdCQUF3Qjt3QkFDckMsS0FBSyxFQUFFLElBQUk7cUJBQ1o7b0JBQ0Q7d0JBQ0UsT0FBTyxFQUFFLHNCQUFzQjt3QkFDL0IsV0FBVyxFQUFFLHlCQUF5Qjt3QkFDdEMsS0FBSyxFQUFFLElBQUk7cUJBQ1o7b0JBQ0Q7d0JBQ0UsT0FBTyxFQUFFLHNCQUFzQjt3QkFDL0IsV0FBVyxFQUFFLDBCQUEwQjt3QkFDdkMsS0FBSyxFQUFFLElBQUk7cUJBQ1o7aUJBQ0Y7YUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCcmVhZGNydW1iU2NoZW1hQnVpbGRlciB9IGZyb20gJy4vYnJlYWRjcnVtYi9pbmRleCc7XG5pbXBvcnQge1xuICBKc29uTGRCYXNlUHJvZHVjdEJ1aWxkZXIsXG4gIEpzb25MZFByb2R1Y3RPZmZlckJ1aWxkZXIsXG4gIEpzb25MZFByb2R1Y3RSZXZpZXdCdWlsZGVyLFxuICBQcm9kdWN0U2NoZW1hQnVpbGRlcixcbn0gZnJvbSAnLi9wcm9kdWN0L2luZGV4JztcbmltcG9ydCB7IEpTT05MRF9QUk9EVUNUX0JVSUxERVIsIFNDSEVNQV9CVUlMREVSIH0gZnJvbSAnLi90b2tlbnMnO1xuXG4vKipcbiAqIFByb3ZpZGVzIHNldmVyYWwgc3RhbmRhcmQganNvbi1sZCBidWlsZGVycyB0aGF0IGNvbnRyaWJ1dGVcbiAqIHRvIGNvbGxlY3RpbmcgYW5kIGJ1aWxkaW5nIGpzb24tbGQgZGF0YS5cbiAqL1xuQE5nTW9kdWxlKHtcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogU0NIRU1BX0JVSUxERVIsXG4gICAgICB1c2VFeGlzdGluZzogUHJvZHVjdFNjaGVtYUJ1aWxkZXIsXG4gICAgICBtdWx0aTogdHJ1ZSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IFNDSEVNQV9CVUlMREVSLFxuICAgICAgdXNlRXhpc3Rpbmc6IEJyZWFkY3J1bWJTY2hlbWFCdWlsZGVyLFxuICAgICAgbXVsdGk6IHRydWUsXG4gICAgfSxcbiAgICAvLyBsb3dlciBsZXZlbCBqc29uLWxkIGJ1aWxkZXIgY2xhc3NlcyBvZmZlcmluZyBmaW5lLWdyYWluZWQgY29udHJvbFxuICAgIC8vIGZvciBwcm9kdWN0IHJlbGF0ZWQgc2NoZW1hc1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IEpTT05MRF9QUk9EVUNUX0JVSUxERVIsXG4gICAgICB1c2VFeGlzdGluZzogSnNvbkxkQmFzZVByb2R1Y3RCdWlsZGVyLFxuICAgICAgbXVsdGk6IHRydWUsXG4gICAgfSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBKU09OTERfUFJPRFVDVF9CVUlMREVSLFxuICAgICAgdXNlRXhpc3Rpbmc6IEpzb25MZFByb2R1Y3RPZmZlckJ1aWxkZXIsXG4gICAgICBtdWx0aTogdHJ1ZSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IEpTT05MRF9QUk9EVUNUX0JVSUxERVIsXG4gICAgICB1c2VFeGlzdGluZzogSnNvbkxkUHJvZHVjdFJldmlld0J1aWxkZXIsXG4gICAgICBtdWx0aTogdHJ1ZSxcbiAgICB9LFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBKc29uTGRCdWlsZGVyTW9kdWxlIHt9XG4iXX0=