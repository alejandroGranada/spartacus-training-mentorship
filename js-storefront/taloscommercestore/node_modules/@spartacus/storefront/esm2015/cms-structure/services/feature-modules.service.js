import { Injectable, InjectFlags, } from '@angular/core';
import { ConfigChunk, ConfigInitializerService, deepMerge, DefaultConfigChunk, LazyModulesService, } from '@spartacus/core';
import { defer, forkJoin, merge, of } from 'rxjs';
import { map, shareReplay, switchMap } from 'rxjs/operators';
import { CmsFeaturesService } from './cms-features.service';
import * as i0 from "@angular/core";
import * as i1 from "./cms-features.service";
/**
 * Service responsible for resolving cms config based feature modules.
 *
 * @deprecated since 3.2, use CmsFeaturesService instead
 */
export class FeatureModulesService {
    constructor(configInitializer, lazyModules) {
        this.configInitializer = configInitializer;
        this.lazyModules = lazyModules;
        // maps componentType to feature
        this.componentFeatureMap = new Map();
        /*
         * Contains either FeatureInstance or FeatureInstance resolver for not yet
         * resolved feature modules
         */
        this.features = new Map();
        this.initFeatureMap();
    }
    initFeatureMap() {
        this.configInitializer.getStable('featureModules').subscribe((config) => {
            var _a, _b;
            this.featureModulesConfig = (_a = config.featureModules) !== null && _a !== void 0 ? _a : {};
            for (const [featureName, featureConfig] of Object.entries(this.featureModulesConfig)) {
                if ((featureConfig === null || featureConfig === void 0 ? void 0 : featureConfig.module) && ((_b = featureConfig === null || featureConfig === void 0 ? void 0 : featureConfig.cmsComponents) === null || _b === void 0 ? void 0 : _b.length)) {
                    for (const component of featureConfig.cmsComponents) {
                        this.componentFeatureMap.set(component, featureName);
                    }
                }
            }
        });
    }
    /**
     * Check if there is feature module configuration that covers specified
     * component type
     */
    hasFeatureFor(componentType) {
        return this.componentFeatureMap.has(componentType);
    }
    /**
     * Return full CmsComponent mapping defined in feature module
     */
    getCmsMapping(componentType) {
        const feature = this.componentFeatureMap.get(componentType);
        return this.resolveFeature(feature).pipe(map((featureInstance) => featureInstance.componentsMappings[componentType]));
    }
    /**
     * Resolves feature module for provided component type
     *
     * @param componentType
     */
    getModule(componentType) {
        var _a;
        const feature = this.componentFeatureMap.get(componentType);
        let module;
        // we are returning injectors only for already resolved features
        (_a = this.features
            .get(feature)) === null || _a === void 0 ? void 0 : _a.subscribe((featureInstance) => {
            module = featureInstance.moduleRef;
        }).unsubscribe();
        return module;
    }
    /**
     * Resolve feature based on feature name, if feature was not yet resolved
     *
     * It will first resolve all module dependencies if defined
     */
    resolveFeature(featureName) {
        return defer(() => {
            var _a;
            if (!this.features.has(featureName)) {
                const featureConfig = this.featureModulesConfig[featureName];
                if (!(featureConfig === null || featureConfig === void 0 ? void 0 : featureConfig.module)) {
                    throw new Error('No module defined for Feature Module ' + featureName);
                }
                // resolve dependencies first (if any)
                const depsResolve = ((_a = featureConfig.dependencies) === null || _a === void 0 ? void 0 : _a.length) ? forkJoin(featureConfig.dependencies.map((depModuleFunc) => {
                    return typeof depModuleFunc === 'string'
                        ? this.resolveFeature(depModuleFunc).pipe(map((feature) => feature.moduleRef))
                        : this.lazyModules.resolveDependencyModuleInstance(depModuleFunc);
                }))
                    : of(undefined);
                this.features.set(featureName, depsResolve.pipe(switchMap((deps) => this.resolveFeatureModule(featureConfig, deps, featureName)), shareReplay()));
            }
            return this.features.get(featureName);
        });
    }
    /**
     * Initialize feature module by returning feature instance
     */
    resolveFeatureModule(featureConfig, dependencyModuleRefs = [], feature) {
        return this.lazyModules
            .resolveModuleInstance(featureConfig === null || featureConfig === void 0 ? void 0 : featureConfig.module, feature, dependencyModuleRefs)
            .pipe(map((moduleRef) => {
            var _a, _b;
            const featureInstance = Object.assign(Object.assign({}, featureConfig), { moduleRef,
                dependencyModuleRefs, componentsMappings: {} });
            // resolve configuration for feature module
            const resolvedConfiguration = this.resolveFeatureConfiguration(moduleRef.injector);
            // extract cms components configuration from feature config
            for (const componentType of featureInstance.cmsComponents) {
                featureInstance.componentsMappings[componentType] = (_b = (_a = resolvedConfiguration.cmsComponents) === null || _a === void 0 ? void 0 : _a[componentType]) !== null && _b !== void 0 ? _b : {};
            }
            return featureInstance;
        }));
    }
    /**
     * Returns configuration provided in feature module
     */
    resolveFeatureConfiguration(featureInjector) {
        // get config chunks from feature lib
        const featureConfigChunks = featureInjector.get(ConfigChunk, [], InjectFlags.Self);
        // get default config chunks from feature lib
        const featureDefaultConfigChunks = featureInjector.get(DefaultConfigChunk, [], InjectFlags.Self);
        return deepMerge({}, ...(featureDefaultConfigChunks !== null && featureDefaultConfigChunks !== void 0 ? featureDefaultConfigChunks : []), ...(featureConfigChunks !== null && featureConfigChunks !== void 0 ? featureConfigChunks : []));
    }
    ngOnDestroy() {
        // clean up all initialized features
        merge(...Array.from(this.features.values())).subscribe((featureInstance) => { var _a; return (_a = featureInstance.moduleRef) === null || _a === void 0 ? void 0 : _a.destroy(); });
    }
}
FeatureModulesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function FeatureModulesService_Factory() { return i0.ɵɵinject(i1.CmsFeaturesService); }, token: FeatureModulesService, providedIn: "root" });
FeatureModulesService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
                useExisting: CmsFeaturesService,
            },] }
];
FeatureModulesService.ctorParameters = () => [
    { type: ConfigInitializerService },
    { type: LazyModulesService }
];
//# sourceMappingURL=data:application/json;base64,