import { Injectable } from '@angular/core';
import { AVOID_STACKED_OUTLETS, OutletPosition } from './outlet.model';
import * as i0 from "@angular/core";
export class OutletService {
    constructor() {
        this.templatesRefs = {
            [OutletPosition.BEFORE]: new Map(),
            [OutletPosition.REPLACE]: new Map(),
            [OutletPosition.AFTER]: new Map(),
        };
    }
    /**
     * @param templateOrFactory A `ComponentFactory` that inserts a component dynamically.
     */
    add(outlet, templateOrFactory, position = OutletPosition.REPLACE) {
        const store = this.templatesRefs[position];
        if (store) {
            const existing = store.get(outlet) || [];
            const newValue = existing.concat([templateOrFactory]);
            store.set(outlet, newValue);
        }
    }
    /**
     *
     * Returns a single object or multiple objects for the given outlet reference,
     * depending on the `stacked` argument.
     *
     * @param outlet The outlet reference
     * @param position the outlet position, `OutletPosition.before`, `OutletPosition.AFTER` or `OutletPosition.REPLACE`
     * @param stacked Indicates whether an array of outlet components is returned
     */
    get(outlet, position = OutletPosition.REPLACE, stacked = AVOID_STACKED_OUTLETS) {
        const store = this.templatesRefs[position] ||
            this.templatesRefs[OutletPosition.REPLACE];
        const templateRef = store.get(outlet);
        if (templateRef && !stacked) {
            return templateRef[0];
        }
        return templateRef;
    }
    remove(outlet, position = OutletPosition.REPLACE, value) {
        const store = this.templatesRefs[position] ||
            this.templatesRefs[OutletPosition.REPLACE];
        this.removeValueOrAll(store, outlet, value);
    }
    removeValueOrAll(store, outlet, value) {
        if (!value && store.has(outlet)) {
            store.delete(outlet);
        }
        else if (value && store.has(outlet)) {
            let existing = store.get(outlet);
            existing = existing.filter((val) => val !== value);
            store.set(outlet, existing);
        }
    }
}
OutletService.ɵprov = i0.ɵɵdefineInjectable({ factory: function OutletService_Factory() { return new OutletService(); }, token: OutletService, providedIn: "root" });
OutletService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3V0bGV0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvUGF0cnlrL0Rlc2t0b3Avc3BhcnRhY3VzL3Byb2plY3RzL3N0b3JlZnJvbnRsaWIvc3JjLyIsInNvdXJjZXMiOlsiY21zLXN0cnVjdHVyZS9vdXRsZXQvb3V0bGV0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFvQixVQUFVLEVBQWUsTUFBTSxlQUFlLENBQUM7QUFDMUUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLGNBQWMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUt2RSxNQUFNLE9BQU8sYUFBYTtJQUgxQjtRQUlVLGtCQUFhLEdBQUc7WUFDdEIsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxHQUFHLEVBQWU7WUFDL0MsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxHQUFHLEVBQWU7WUFDaEQsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxHQUFHLEVBQWU7U0FDL0MsQ0FBQztLQTBGSDtJQXBFQzs7T0FFRztJQUNILEdBQUcsQ0FDRCxNQUFjLEVBQ2QsaUJBQW9CLEVBQ3BCLFdBQTJCLGNBQWMsQ0FBQyxPQUFPO1FBRWpELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDM0MsSUFBSSxLQUFLLEVBQUU7WUFDVCxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUN6QyxNQUFNLFFBQVEsR0FBUSxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1lBQzNELEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQzdCO0lBQ0gsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0gsR0FBRyxDQUNELE1BQWMsRUFDZCxXQUEyQixjQUFjLENBQUMsT0FBTyxFQUNqRCxPQUFPLEdBQUcscUJBQXFCO1FBRS9CLE1BQU0sS0FBSyxHQUNULElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDO1lBQzVCLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTdDLE1BQU0sV0FBVyxHQUFRLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDM0MsSUFBSSxXQUFXLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDM0IsT0FBTyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDdkI7UUFDRCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0lBRUQsTUFBTSxDQUNKLE1BQWMsRUFDZCxXQUEyQixjQUFjLENBQUMsT0FBTyxFQUNqRCxLQUFTO1FBRVQsTUFBTSxLQUFLLEdBQ1QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7WUFDNUIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFN0MsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVTLGdCQUFnQixDQUN4QixLQUF1QixFQUN2QixNQUFjLEVBQ2QsS0FBUztRQUVULElBQUksQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUMvQixLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU0sSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNyQyxJQUFJLFFBQVEsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRWpDLFFBQVEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEtBQUssS0FBSyxDQUFDLENBQUM7WUFFbkQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDN0I7SUFDSCxDQUFDOzs7O1lBakdGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudEZhY3RvcnksIEluamVjdGFibGUsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBVk9JRF9TVEFDS0VEX09VVExFVFMsIE91dGxldFBvc2l0aW9uIH0gZnJvbSAnLi9vdXRsZXQubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgT3V0bGV0U2VydmljZTxUID0gVGVtcGxhdGVSZWY8YW55PiB8IENvbXBvbmVudEZhY3Rvcnk8YW55Pj4ge1xuICBwcml2YXRlIHRlbXBsYXRlc1JlZnMgPSB7XG4gICAgW091dGxldFBvc2l0aW9uLkJFRk9SRV06IG5ldyBNYXA8c3RyaW5nLCBUW10+KCksXG4gICAgW091dGxldFBvc2l0aW9uLlJFUExBQ0VdOiBuZXcgTWFwPHN0cmluZywgVFtdPigpLFxuICAgIFtPdXRsZXRQb3NpdGlvbi5BRlRFUl06IG5ldyBNYXA8c3RyaW5nLCBUW10+KCksXG4gIH07XG5cbiAgLyoqXG4gICAqIEFkZHMgYSB0ZW1wbGF0ZSBvciBDb21wb25lbnRGYWN0b3J5LCBzbyB0aGF0IFVJIG91dGxldHMgY2FuIGJlIHJlcGxhY2VkIGR5bmFtaWNhbGx5LlxuICAgKiBUaGUgVUkgcG9zaXRpb24gd2hlcmUgdGhpcyB0ZW1wbGF0ZSBvciBDb21wb25lbnRGYWN0b3J5IGlzIGluc2VydGVkIGlzIGdpdmVuIGJ5IGFcbiAgICogc3RyaW5nIHJlZmVyZW5jZSAoY2FsbGVkIGBvdXRsZXRgKSBhbmQgb3B0aW9uYWwgYE91dGxldFBvc2l0aW9uYC4gVGhlIGBPdXRsZXRQb3NpdGlvbmBcbiAgICogaXMgZWl0aGVyIGJlZm9yZSBvciBhZnRlciwgb3IgcmVwbGFjZXMgdGhlIGVudGlyZSBVSS5cbiAgICpcbiAgICogQHBhcmFtIG91dGxldCB0aGUgVUkgbG9jYXRpb24gcmVwcmVzZW50ZWQgYnkgYSBzdHJpbmdcbiAgICogQHBhcmFtIHRlbXBsYXRlIHRoZSBgVGVtcGxhdGVSZWZgIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGluc2VydCBVSVxuICAgKiBAcGFyYW0gcG9zaXRpb24gdGhlIGBPdXRsZXRQb3NpdGlvbmAgaW4gdGhlIFVJXG4gICAqL1xuICBhZGQob3V0bGV0OiBzdHJpbmcsIHRlbXBsYXRlOiBULCBwb3NpdGlvbj86IE91dGxldFBvc2l0aW9uKTogdm9pZDtcbiAgLyoqXG4gICAqIEBwYXJhbSBmYWN0b3J5IFRoZSBgQ29tcG9uZW50RmFjdG9yeWAgdGhhdCB3aWxsIGJlIGR5bmFtaWNhbGx5IGFkZGVkIHRvIHRoZSBvdXRsZXQgVUlcbiAgICovXG4gIGFkZChcbiAgICBvdXRsZXQ6IHN0cmluZyxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuaWZpZWQtc2lnbmF0dXJlc1xuICAgIGZhY3Rvcnk6IFQsXG4gICAgcG9zaXRpb24/OiBPdXRsZXRQb3NpdGlvblxuICApOiB2b2lkO1xuICAvKipcbiAgICogQHBhcmFtIHRlbXBsYXRlT3JGYWN0b3J5IEEgYENvbXBvbmVudEZhY3RvcnlgIHRoYXQgaW5zZXJ0cyBhIGNvbXBvbmVudCBkeW5hbWljYWxseS5cbiAgICovXG4gIGFkZChcbiAgICBvdXRsZXQ6IHN0cmluZyxcbiAgICB0ZW1wbGF0ZU9yRmFjdG9yeTogVCxcbiAgICBwb3NpdGlvbjogT3V0bGV0UG9zaXRpb24gPSBPdXRsZXRQb3NpdGlvbi5SRVBMQUNFXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IHN0b3JlID0gdGhpcy50ZW1wbGF0ZXNSZWZzW3Bvc2l0aW9uXTtcbiAgICBpZiAoc3RvcmUpIHtcbiAgICAgIGNvbnN0IGV4aXN0aW5nID0gc3RvcmUuZ2V0KG91dGxldCkgfHwgW107XG4gICAgICBjb25zdCBuZXdWYWx1ZTogVFtdID0gZXhpc3RpbmcuY29uY2F0KFt0ZW1wbGF0ZU9yRmFjdG9yeV0pO1xuICAgICAgc3RvcmUuc2V0KG91dGxldCwgbmV3VmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBSZXR1cm5zIGEgc2luZ2xlIG9iamVjdCBvciBtdWx0aXBsZSBvYmplY3RzIGZvciB0aGUgZ2l2ZW4gb3V0bGV0IHJlZmVyZW5jZSxcbiAgICogZGVwZW5kaW5nIG9uIHRoZSBgc3RhY2tlZGAgYXJndW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSBvdXRsZXQgVGhlIG91dGxldCByZWZlcmVuY2VcbiAgICogQHBhcmFtIHBvc2l0aW9uIHRoZSBvdXRsZXQgcG9zaXRpb24sIGBPdXRsZXRQb3NpdGlvbi5iZWZvcmVgLCBgT3V0bGV0UG9zaXRpb24uQUZURVJgIG9yIGBPdXRsZXRQb3NpdGlvbi5SRVBMQUNFYFxuICAgKiBAcGFyYW0gc3RhY2tlZCBJbmRpY2F0ZXMgd2hldGhlciBhbiBhcnJheSBvZiBvdXRsZXQgY29tcG9uZW50cyBpcyByZXR1cm5lZFxuICAgKi9cbiAgZ2V0KFxuICAgIG91dGxldDogc3RyaW5nLFxuICAgIHBvc2l0aW9uOiBPdXRsZXRQb3NpdGlvbiA9IE91dGxldFBvc2l0aW9uLlJFUExBQ0UsXG4gICAgc3RhY2tlZCA9IEFWT0lEX1NUQUNLRURfT1VUTEVUU1xuICApOiBUW10gfCBUIHtcbiAgICBjb25zdCBzdG9yZSA9XG4gICAgICB0aGlzLnRlbXBsYXRlc1JlZnNbcG9zaXRpb25dIHx8XG4gICAgICB0aGlzLnRlbXBsYXRlc1JlZnNbT3V0bGV0UG9zaXRpb24uUkVQTEFDRV07XG5cbiAgICBjb25zdCB0ZW1wbGF0ZVJlZjogVFtdID0gc3RvcmUuZ2V0KG91dGxldCk7XG4gICAgaWYgKHRlbXBsYXRlUmVmICYmICFzdGFja2VkKSB7XG4gICAgICByZXR1cm4gdGVtcGxhdGVSZWZbMF07XG4gICAgfVxuICAgIHJldHVybiB0ZW1wbGF0ZVJlZjtcbiAgfVxuXG4gIHJlbW92ZShcbiAgICBvdXRsZXQ6IHN0cmluZyxcbiAgICBwb3NpdGlvbjogT3V0bGV0UG9zaXRpb24gPSBPdXRsZXRQb3NpdGlvbi5SRVBMQUNFLFxuICAgIHZhbHVlPzogVFxuICApOiB2b2lkIHtcbiAgICBjb25zdCBzdG9yZSA9XG4gICAgICB0aGlzLnRlbXBsYXRlc1JlZnNbcG9zaXRpb25dIHx8XG4gICAgICB0aGlzLnRlbXBsYXRlc1JlZnNbT3V0bGV0UG9zaXRpb24uUkVQTEFDRV07XG5cbiAgICB0aGlzLnJlbW92ZVZhbHVlT3JBbGwoc3RvcmUsIG91dGxldCwgdmFsdWUpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHJlbW92ZVZhbHVlT3JBbGwoXG4gICAgc3RvcmU6IE1hcDxzdHJpbmcsIFRbXT4sXG4gICAgb3V0bGV0OiBzdHJpbmcsXG4gICAgdmFsdWU/OiBUXG4gICk6IHZvaWQge1xuICAgIGlmICghdmFsdWUgJiYgc3RvcmUuaGFzKG91dGxldCkpIHtcbiAgICAgIHN0b3JlLmRlbGV0ZShvdXRsZXQpO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgJiYgc3RvcmUuaGFzKG91dGxldCkpIHtcbiAgICAgIGxldCBleGlzdGluZyA9IHN0b3JlLmdldChvdXRsZXQpO1xuXG4gICAgICBleGlzdGluZyA9IGV4aXN0aW5nLmZpbHRlcigodmFsKSA9PiB2YWwgIT09IHZhbHVlKTtcblxuICAgICAgc3RvcmUuc2V0KG91dGxldCwgZXhpc3RpbmcpO1xuICAgIH1cbiAgfVxufVxuIl19