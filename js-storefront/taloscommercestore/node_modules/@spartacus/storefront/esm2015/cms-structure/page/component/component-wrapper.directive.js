import { ChangeDetectorRef, Directive, Injector, Input, Optional, Renderer2, ViewContainerRef, } from '@angular/core';
import { DynamicAttributeService, EventService, } from '@spartacus/core';
import { finalize, tap } from 'rxjs/operators';
import { CmsComponentsService } from '../../services/cms-components.service';
import { ComponentCreateEvent, ComponentDestroyEvent, } from './events/component.event';
import { CmsInjectorService } from './services/cms-injector.service';
import { ComponentHandlerService } from './services/component-handler.service';
/**
 * Directive used to facilitate instantiation of CMS driven dynamic components
 */
export class ComponentWrapperDirective {
    constructor(vcr, cmsComponentsService, injector, dynamicAttributeService, renderer, componentHandler, cmsInjector, eventService) {
        this.vcr = vcr;
        this.cmsComponentsService = cmsComponentsService;
        this.injector = injector;
        this.dynamicAttributeService = dynamicAttributeService;
        this.renderer = renderer;
        this.componentHandler = componentHandler;
        this.cmsInjector = cmsInjector;
        this.eventService = eventService;
    }
    ngOnInit() {
        this.cmsComponentsService
            .determineMappings([this.cxComponentWrapper.flexType])
            .subscribe(() => {
            if (this.cmsComponentsService.shouldRender(this.cxComponentWrapper.flexType)) {
                this.launchComponent();
            }
        });
    }
    launchComponent() {
        const componentMapping = this.cmsComponentsService.getMapping(this.cxComponentWrapper.flexType);
        if (!componentMapping) {
            return;
        }
        this.launcherResource = this.componentHandler
            .getLauncher(componentMapping, this.vcr, this.cmsInjector.getInjector(this.cxComponentWrapper.flexType, this.cxComponentWrapper.uid, this.injector), this.cmsComponentsService.getModule(this.cxComponentWrapper.flexType))
            .pipe(tap(({ elementRef, componentRef }) => {
            this.cmpRef = componentRef;
            this.dispatchEvent(ComponentCreateEvent, elementRef);
            this.decorate(elementRef);
            this.injector.get(ChangeDetectorRef).markForCheck();
        }), finalize(() => this.dispatchEvent(ComponentDestroyEvent)))
            .subscribe();
    }
    /**
     * Dispatch the component event.
     *
     * The event is dispatched during creation and removal of the component.
     */
    dispatchEvent(event, elementRef) {
        var _a;
        const payload = {
            typeCode: this.cxComponentWrapper.typeCode,
            id: this.cxComponentWrapper.uid,
        };
        if (event === ComponentCreateEvent) {
            payload.host = elementRef === null || elementRef === void 0 ? void 0 : elementRef.nativeElement;
        }
        (_a = this.eventService) === null || _a === void 0 ? void 0 : _a.dispatch(payload, event);
    }
    decorate(elementRef) {
        if (this.dynamicAttributeService.addAttributesToComponent) {
            this.dynamicAttributeService.addAttributesToComponent(elementRef.nativeElement, this.renderer, this.cxComponentWrapper);
        }
        else {
            this.dynamicAttributeService.addDynamicAttributes(elementRef.nativeElement, this.renderer, { componentData: this.cxComponentWrapper });
        }
    }
    ngOnDestroy() {
        if (this.launcherResource) {
            this.launcherResource.unsubscribe();
        }
    }
}
ComponentWrapperDirective.decorators = [
    { type: Directive, args: [{
                selector: '[cxComponentWrapper]',
            },] }
];
ComponentWrapperDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: CmsComponentsService },
    { type: Injector },
    { type: DynamicAttributeService },
    { type: Renderer2 },
    { type: ComponentHandlerService },
    { type: CmsInjectorService },
    { type: EventService, decorators: [{ type: Optional }] }
];
ComponentWrapperDirective.propDecorators = {
    cxComponentWrapper: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,