import { Injectable } from '@angular/core';
import { CmsService } from '@spartacus/core';
import { defer, EMPTY, of } from 'rxjs';
import { map, startWith } from 'rxjs/operators';
import { CmsComponentsService } from '../../../services/cms-components.service';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/cms-components.service";
import * as i2 from "@spartacus/core";
/**
 * Provides data for `CmsComponentData`. This is used while component is injected
 * dynamically, so that the component implementation can access the data.
 *
 * The data is resolved from dynamic data (CMS api) as well as static configured data.
 */
export class ComponentDataProvider {
    constructor(componentsService, cmsService) {
        this.componentsService = componentsService;
        this.cmsService = cmsService;
    }
    /**
     * Return the component data for a component given by the `uid`.
     *
     * If the `type` is provided, static component data (if available) is
     * merged into the component data. The static data is complemented and
     * overridden with data retrieved from the cms service.
     */
    get(uid, type) {
        return defer(() => {
            let staticComponentData;
            if (type) {
                staticComponentData = this.componentsService.getStaticData(type);
            }
            if (uid) {
                if (staticComponentData) {
                    return this.cmsService.getComponentData(uid).pipe(map((data) => (Object.assign(Object.assign({}, staticComponentData), data))), startWith(staticComponentData));
                }
                else {
                    return this.cmsService.getComponentData(uid);
                }
            }
            else {
                return staticComponentData ? of(staticComponentData) : EMPTY;
            }
        });
    }
}
ComponentDataProvider.ɵprov = i0.ɵɵdefineInjectable({ factory: function ComponentDataProvider_Factory() { return new ComponentDataProvider(i0.ɵɵinject(i1.CmsComponentsService), i0.ɵɵinject(i2.CmsService)); }, token: ComponentDataProvider, providedIn: "root" });
ComponentDataProvider.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
ComponentDataProvider.ctorParameters = () => [
    { type: CmsComponentsService },
    { type: CmsService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LWRhdGEucHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvUGF0cnlrL0Rlc2t0b3Avc3BhcnRhY3VzL3Byb2plY3RzL3N0b3JlZnJvbnRsaWIvc3JjLyIsInNvdXJjZXMiOlsiY21zLXN0cnVjdHVyZS9wYWdlL2NvbXBvbmVudC9zZXJ2aWNlcy9jb21wb25lbnQtZGF0YS5wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM3QyxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDcEQsT0FBTyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQzs7OztBQUVoRjs7Ozs7R0FLRztBQUlILE1BQU0sT0FBTyxxQkFBcUI7SUFDaEMsWUFDWSxpQkFBdUMsRUFDdkMsVUFBc0I7UUFEdEIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFzQjtRQUN2QyxlQUFVLEdBQVYsVUFBVSxDQUFZO0lBQy9CLENBQUM7SUFFSjs7Ozs7O09BTUc7SUFDSCxHQUFHLENBQUksR0FBVyxFQUFFLElBQWE7UUFDL0IsT0FBTyxLQUFLLENBQUMsR0FBRyxFQUFFO1lBQ2hCLElBQUksbUJBQXNCLENBQUM7WUFFM0IsSUFBSSxJQUFJLEVBQUU7Z0JBQ1IsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsQ0FBSSxJQUFJLENBQUMsQ0FBQzthQUNyRTtZQUVELElBQUksR0FBRyxFQUFFO2dCQUNQLElBQUksbUJBQW1CLEVBQUU7b0JBQ3ZCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQ2xELEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsaUNBQ1QsbUJBQW1CLEdBQ25CLElBQUksRUFDUCxDQUFDLEVBQ0gsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQy9CLENBQUM7aUJBQ0g7cUJBQU07b0JBQ0wsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFJLEdBQUcsQ0FBQyxDQUFDO2lCQUNqRDthQUNGO2lCQUFNO2dCQUNMLE9BQU8sbUJBQW1CLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7YUFDOUQ7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7WUF4Q0YsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7WUFWUSxvQkFBb0I7WUFIcEIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENtc1NlcnZpY2UgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHsgZGVmZXIsIEVNUFRZLCBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBzdGFydFdpdGggfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBDbXNDb21wb25lbnRzU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2VzL2Ntcy1jb21wb25lbnRzLnNlcnZpY2UnO1xuXG4vKipcbiAqIFByb3ZpZGVzIGRhdGEgZm9yIGBDbXNDb21wb25lbnREYXRhYC4gVGhpcyBpcyB1c2VkIHdoaWxlIGNvbXBvbmVudCBpcyBpbmplY3RlZFxuICogZHluYW1pY2FsbHksIHNvIHRoYXQgdGhlIGNvbXBvbmVudCBpbXBsZW1lbnRhdGlvbiBjYW4gYWNjZXNzIHRoZSBkYXRhLlxuICpcbiAqIFRoZSBkYXRhIGlzIHJlc29sdmVkIGZyb20gZHluYW1pYyBkYXRhIChDTVMgYXBpKSBhcyB3ZWxsIGFzIHN0YXRpYyBjb25maWd1cmVkIGRhdGEuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBDb21wb25lbnREYXRhUHJvdmlkZXIge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgY29tcG9uZW50c1NlcnZpY2U6IENtc0NvbXBvbmVudHNTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBjbXNTZXJ2aWNlOiBDbXNTZXJ2aWNlXG4gICkge31cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBjb21wb25lbnQgZGF0YSBmb3IgYSBjb21wb25lbnQgZ2l2ZW4gYnkgdGhlIGB1aWRgLlxuICAgKlxuICAgKiBJZiB0aGUgYHR5cGVgIGlzIHByb3ZpZGVkLCBzdGF0aWMgY29tcG9uZW50IGRhdGEgKGlmIGF2YWlsYWJsZSkgaXNcbiAgICogbWVyZ2VkIGludG8gdGhlIGNvbXBvbmVudCBkYXRhLiBUaGUgc3RhdGljIGRhdGEgaXMgY29tcGxlbWVudGVkIGFuZFxuICAgKiBvdmVycmlkZGVuIHdpdGggZGF0YSByZXRyaWV2ZWQgZnJvbSB0aGUgY21zIHNlcnZpY2UuXG4gICAqL1xuICBnZXQ8VD4odWlkOiBzdHJpbmcsIHR5cGU/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPFQ+IHtcbiAgICByZXR1cm4gZGVmZXIoKCkgPT4ge1xuICAgICAgbGV0IHN0YXRpY0NvbXBvbmVudERhdGE6IFQ7XG5cbiAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgIHN0YXRpY0NvbXBvbmVudERhdGEgPSB0aGlzLmNvbXBvbmVudHNTZXJ2aWNlLmdldFN0YXRpY0RhdGE8VD4odHlwZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh1aWQpIHtcbiAgICAgICAgaWYgKHN0YXRpY0NvbXBvbmVudERhdGEpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5jbXNTZXJ2aWNlLmdldENvbXBvbmVudERhdGE8VD4odWlkKS5waXBlKFxuICAgICAgICAgICAgbWFwKChkYXRhKSA9PiAoe1xuICAgICAgICAgICAgICAuLi5zdGF0aWNDb21wb25lbnREYXRhLFxuICAgICAgICAgICAgICAuLi5kYXRhLFxuICAgICAgICAgICAgfSkpLFxuICAgICAgICAgICAgc3RhcnRXaXRoKHN0YXRpY0NvbXBvbmVudERhdGEpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5jbXNTZXJ2aWNlLmdldENvbXBvbmVudERhdGE8VD4odWlkKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHN0YXRpY0NvbXBvbmVudERhdGEgPyBvZihzdGF0aWNDb21wb25lbnREYXRhKSA6IEVNUFRZO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iXX0=