import { Component, ViewContainerRef } from '@angular/core';
import { AnonymousConsentsService } from '@spartacus/core';
import { LaunchDialogService, } from '../../../layout/launch-dialog';
import { Subscription } from 'rxjs';
import { tap } from 'rxjs/operators';
import { AnonymousConsentLaunchDialogService } from '../anonymous-consent-launch-dialog.service';
export class AnonymousConsentManagementBannerComponent {
    constructor(anonymousConsentsService, anonymousConsentLaunchDialogService, vcr, launchDialogService) {
        this.anonymousConsentsService = anonymousConsentsService;
        this.anonymousConsentLaunchDialogService = anonymousConsentLaunchDialogService;
        this.vcr = vcr;
        this.launchDialogService = launchDialogService;
        this.subscriptions = new Subscription();
        this.bannerVisible$ = this.anonymousConsentsService.isBannerVisible();
    }
    viewDetails() {
        this.hideBanner();
        // TODO(#12167): use launchDialogService only
        if (this.launchDialogService) {
            const dialog = this.launchDialogService.openDialog("ANONYMOUS_CONSENT" /* ANONYMOUS_CONSENT */, null, this.vcr);
            if (dialog) {
                this.subscriptions.add(dialog.subscribe());
            }
        }
        else {
            const dialog = this.anonymousConsentLaunchDialogService.openDialog(null, this.vcr);
            if (dialog) {
                this.subscriptions.add(dialog.subscribe());
            }
        }
    }
    allowAll() {
        this.subscriptions.add(this.anonymousConsentsService
            .giveAllConsents()
            .pipe(tap(() => this.hideBanner()))
            .subscribe());
    }
    hideBanner() {
        this.anonymousConsentsService.toggleBannerDismissed(true);
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
}
AnonymousConsentManagementBannerComponent.decorators = [
    { type: Component, args: [{
                selector: 'cx-anonymous-consent-management-banner',
                template: "<ng-container *ngIf=\"bannerVisible$ | async as bannerVisible\">\n  <div\n    [ngClass]=\"{ 'anonymous-consent-banner-hidden': !bannerVisible }\"\n    class=\"anonymous-consent-banner\"\n  >\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-lg-8 col-xs-12\">\n          <div class=\"cx-banner-title\">\n            {{ 'anonymousConsents.banner.title' | cxTranslate }}\n          </div>\n          <div class=\"cx-banner-description\">\n            {{ 'anonymousConsents.banner.description' | cxTranslate }}\n          </div>\n        </div>\n\n        <div class=\"col-lg-4 col-xs-12 cx-banner-buttons\">\n          <button class=\"btn btn-action\" (click)=\"viewDetails()\">\n            {{ 'anonymousConsents.banner.viewDetails' | cxTranslate }}\n          </button>\n          <button class=\"btn btn-primary\" (click)=\"allowAll()\">\n            {{ 'anonymousConsents.banner.allowAll' | cxTranslate }}\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-container>\n"
            },] }
];
AnonymousConsentManagementBannerComponent.ctorParameters = () => [
    { type: AnonymousConsentsService },
    { type: AnonymousConsentLaunchDialogService },
    { type: ViewContainerRef },
    { type: LaunchDialogService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5vbnltb3VzLWNvbnNlbnQtbWFuYWdlbWVudC1iYW5uZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9wcm9qZWN0cy9zdG9yZWZyb250bGliL3NyYy8iLCJzb3VyY2VzIjpbImNtcy1jb21wb25lbnRzL2Fub255bW91cy1jb25zZW50LW1hbmFnZW1lbnQvYmFubmVyL2Fub255bW91cy1jb25zZW50LW1hbmFnZW1lbnQtYmFubmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFhLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNELE9BQU8sRUFDTCxtQkFBbUIsR0FFcEIsTUFBTSwrQkFBK0IsQ0FBQztBQUN2QyxPQUFPLEVBQWMsWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2hELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsbUNBQW1DLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQU1qRyxNQUFNLE9BQU8seUNBQXlDO0lBNEJwRCxZQUNZLHdCQUFrRCxFQUNsRCxtQ0FBd0UsRUFDeEUsR0FBcUIsRUFDckIsbUJBQXlDO1FBSHpDLDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBMEI7UUFDbEQsd0NBQW1DLEdBQW5DLG1DQUFtQyxDQUFxQztRQUN4RSxRQUFHLEdBQUgsR0FBRyxDQUFrQjtRQUNyQix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXNCO1FBL0I3QyxrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFM0MsbUJBQWMsR0FBd0IsSUFBSSxDQUFDLHdCQUF3QixDQUFDLGVBQWUsRUFBRSxDQUFDO0lBOEJuRixDQUFDO0lBRUosV0FBVztRQUNULElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNsQiw2Q0FBNkM7UUFDN0MsSUFBSSxJQUFJLENBQUMsbUJBQW1CLEVBQUU7WUFDNUIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFVBQVUsOENBRWhELElBQUksRUFDSixJQUFJLENBQUMsR0FBRyxDQUNULENBQUM7WUFDRixJQUFJLE1BQU0sRUFBRTtnQkFDVixJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQzthQUM1QztTQUNGO2FBQU07WUFDTCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsbUNBQW1DLENBQUMsVUFBVSxDQUNoRSxJQUFJLEVBQ0osSUFBSSxDQUFDLEdBQUcsQ0FDVCxDQUFDO1lBQ0YsSUFBSSxNQUFNLEVBQUU7Z0JBQ1YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7YUFDNUM7U0FDRjtJQUNILENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQ3BCLElBQUksQ0FBQyx3QkFBd0I7YUFDMUIsZUFBZSxFQUFFO2FBQ2pCLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7YUFDbEMsU0FBUyxFQUFFLENBQ2YsQ0FBQztJQUNKLENBQUM7SUFFRCxVQUFVO1FBQ1IsSUFBSSxDQUFDLHdCQUF3QixDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNuQyxDQUFDOzs7WUE3RUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSx3Q0FBd0M7Z0JBQ2xELG9oQ0FBbUU7YUFDcEU7OztZQVpRLHdCQUF3QjtZQU94QixtQ0FBbUM7WUFSYixnQkFBZ0I7WUFHN0MsbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkRlc3Ryb3ksIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFub255bW91c0NvbnNlbnRzU2VydmljZSB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQge1xuICBMYXVuY2hEaWFsb2dTZXJ2aWNlLFxuICBMQVVOQ0hfQ0FMTEVSLFxufSBmcm9tICcuLi8uLi8uLi9sYXlvdXQvbGF1bmNoLWRpYWxvZyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEFub255bW91c0NvbnNlbnRMYXVuY2hEaWFsb2dTZXJ2aWNlIH0gZnJvbSAnLi4vYW5vbnltb3VzLWNvbnNlbnQtbGF1bmNoLWRpYWxvZy5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY3gtYW5vbnltb3VzLWNvbnNlbnQtbWFuYWdlbWVudC1iYW5uZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vYW5vbnltb3VzLWNvbnNlbnQtbWFuYWdlbWVudC1iYW5uZXIuY29tcG9uZW50Lmh0bWwnLFxufSlcbmV4cG9ydCBjbGFzcyBBbm9ueW1vdXNDb25zZW50TWFuYWdlbWVudEJhbm5lckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9ucyA9IG5ldyBTdWJzY3JpcHRpb24oKTtcblxuICBiYW5uZXJWaXNpYmxlJDogT2JzZXJ2YWJsZTxib29sZWFuPiA9IHRoaXMuYW5vbnltb3VzQ29uc2VudHNTZXJ2aWNlLmlzQmFubmVyVmlzaWJsZSgpO1xuXG4gIC8vIFRPRE8oIzEyMTY3KTogbWFrZSBsYXVuY2hEaWFsb2dTZXJ2aWNlIGEgcmVxdWlyZWQgZGVwZW5kZW5jeSBpbnN0ZWFkIG9mIGFub255bW91c0NvbnNlbnRMYXVuY2hEaWFsb2dTZXJ2aWNlIGFuZCByZW1vdmUgZGVwcmVjYXRlZCBjb25zdHJ1Y3RvcnNcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIHNpbmNlIDMuM1xuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgYW5vbnltb3VzQ29uc2VudHNTZXJ2aWNlOiBBbm9ueW1vdXNDb25zZW50c1NlcnZpY2UsXG4gICAgYW5vbnltb3VzQ29uc2VudExhdW5jaERpYWxvZ1NlcnZpY2U6IEFub255bW91c0NvbnNlbnRMYXVuY2hEaWFsb2dTZXJ2aWNlLFxuICAgIHZjcjogVmlld0NvbnRhaW5lclJlZlxuICApO1xuICAvKipcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciB3aWxsIGJlXG4gICAqXG4gICAqIEBwYXJhbSB7QW5vbnltb3VzQ29uc2VudHNTZXJ2aWNlfSBhbm9ueW1vdXNDb25zZW50c1NlcnZpY2VcbiAgICogQHBhcmFtIHtWaWV3Q29udGFpbmVyUmVmfSB2Y3JcbiAgICogQHBhcmFtIHtMYXVuY2hEaWFsb2dTZXJ2aWNlfSBsYXVuY2hEaWFsb2dTZXJ2aWNlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBhbm9ueW1vdXNDb25zZW50c1NlcnZpY2U6IEFub255bW91c0NvbnNlbnRzU2VydmljZSxcbiAgICBhbm9ueW1vdXNDb25zZW50TGF1bmNoRGlhbG9nU2VydmljZTogQW5vbnltb3VzQ29uc2VudExhdW5jaERpYWxvZ1NlcnZpY2UsXG4gICAgdmNyOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5pZmllZC1zaWduYXR1cmVzXG4gICAgbGF1bmNoRGlhbG9nU2VydmljZTogTGF1bmNoRGlhbG9nU2VydmljZVxuICApO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgYW5vbnltb3VzQ29uc2VudHNTZXJ2aWNlOiBBbm9ueW1vdXNDb25zZW50c1NlcnZpY2UsXG4gICAgcHJvdGVjdGVkIGFub255bW91c0NvbnNlbnRMYXVuY2hEaWFsb2dTZXJ2aWNlOiBBbm9ueW1vdXNDb25zZW50TGF1bmNoRGlhbG9nU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgdmNyOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIHByb3RlY3RlZCBsYXVuY2hEaWFsb2dTZXJ2aWNlPzogTGF1bmNoRGlhbG9nU2VydmljZVxuICApIHt9XG5cbiAgdmlld0RldGFpbHMoKTogdm9pZCB7XG4gICAgdGhpcy5oaWRlQmFubmVyKCk7XG4gICAgLy8gVE9ETygjMTIxNjcpOiB1c2UgbGF1bmNoRGlhbG9nU2VydmljZSBvbmx5XG4gICAgaWYgKHRoaXMubGF1bmNoRGlhbG9nU2VydmljZSkge1xuICAgICAgY29uc3QgZGlhbG9nID0gdGhpcy5sYXVuY2hEaWFsb2dTZXJ2aWNlLm9wZW5EaWFsb2coXG4gICAgICAgIExBVU5DSF9DQUxMRVIuQU5PTllNT1VTX0NPTlNFTlQsXG4gICAgICAgIG51bGwsXG4gICAgICAgIHRoaXMudmNyXG4gICAgICApO1xuICAgICAgaWYgKGRpYWxvZykge1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMuYWRkKGRpYWxvZy5zdWJzY3JpYmUoKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGRpYWxvZyA9IHRoaXMuYW5vbnltb3VzQ29uc2VudExhdW5jaERpYWxvZ1NlcnZpY2Uub3BlbkRpYWxvZyhcbiAgICAgICAgbnVsbCxcbiAgICAgICAgdGhpcy52Y3JcbiAgICAgICk7XG4gICAgICBpZiAoZGlhbG9nKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5hZGQoZGlhbG9nLnN1YnNjcmliZSgpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBhbGxvd0FsbCgpOiB2b2lkIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMuYWRkKFxuICAgICAgdGhpcy5hbm9ueW1vdXNDb25zZW50c1NlcnZpY2VcbiAgICAgICAgLmdpdmVBbGxDb25zZW50cygpXG4gICAgICAgIC5waXBlKHRhcCgoKSA9PiB0aGlzLmhpZGVCYW5uZXIoKSkpXG4gICAgICAgIC5zdWJzY3JpYmUoKVxuICAgICk7XG4gIH1cblxuICBoaWRlQmFubmVyKCk6IHZvaWQge1xuICAgIHRoaXMuYW5vbnltb3VzQ29uc2VudHNTZXJ2aWNlLnRvZ2dsZUJhbm5lckRpc21pc3NlZCh0cnVlKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy51bnN1YnNjcmliZSgpO1xuICB9XG59XG4iXX0=