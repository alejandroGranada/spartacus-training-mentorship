import { Component, ViewChild, ViewContainerRef, } from '@angular/core';
import { LaunchDialogService, } from '../../../layout/launch-dialog';
import { take } from 'rxjs/operators';
import { AnonymousConsentLaunchDialogService } from '../anonymous-consent-launch-dialog.service';
export class AnonymousConsentOpenDialogComponent {
    constructor(vcr, anonymousConsentLaunchDialogService, launchDialogService) {
        this.vcr = vcr;
        this.anonymousConsentLaunchDialogService = anonymousConsentLaunchDialogService;
        this.launchDialogService = launchDialogService;
    }
    openDialog() {
        // TODO(#12167): use launchDialogService only
        if (this.launchDialogService) {
            const dialog = this.launchDialogService.openDialog("ANONYMOUS_CONSENT" /* ANONYMOUS_CONSENT */, this.openElement, this.vcr);
            if (dialog) {
                dialog.pipe(take(1)).subscribe();
            }
        }
        else {
            const dialog = this.anonymousConsentLaunchDialogService.openDialog(this.openElement, this.vcr);
            if (dialog) {
                dialog.pipe(take(1)).subscribe();
            }
        }
    }
}
AnonymousConsentOpenDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'cx-anonymous-consent-open-dialog',
                template: "<button #open class=\"btn btn-link\" (click)=\"openDialog()\">\n  {{ 'anonymousConsents.preferences' | cxTranslate }}\n</button>\n"
            },] }
];
AnonymousConsentOpenDialogComponent.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: AnonymousConsentLaunchDialogService },
    { type: LaunchDialogService }
];
AnonymousConsentOpenDialogComponent.propDecorators = {
    openElement: [{ type: ViewChild, args: ['open',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5vbnltb3VzLWNvbnNlbnQtb3Blbi1kaWFsb2cuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9wcm9qZWN0cy9zdG9yZWZyb250bGliL3NyYy8iLCJzb3VyY2VzIjpbImNtcy1jb21wb25lbnRzL2Fub255bW91cy1jb25zZW50LW1hbmFnZW1lbnQvb3Blbi1kaWFsb2cvYW5vbnltb3VzLWNvbnNlbnQtb3Blbi1kaWFsb2cuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBRVQsU0FBUyxFQUNULGdCQUFnQixHQUNqQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQ0wsbUJBQW1CLEdBRXBCLE1BQU0sK0JBQStCLENBQUM7QUFDdkMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3RDLE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBTWpHLE1BQU0sT0FBTyxtQ0FBbUM7SUFzQjlDLFlBQ1ksR0FBcUIsRUFDckIsbUNBQXdFLEVBQ3hFLG1CQUF5QztRQUZ6QyxRQUFHLEdBQUgsR0FBRyxDQUFrQjtRQUNyQix3Q0FBbUMsR0FBbkMsbUNBQW1DLENBQXFDO1FBQ3hFLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBc0I7SUFDbEQsQ0FBQztJQUVKLFVBQVU7UUFDUiw2Q0FBNkM7UUFDN0MsSUFBSSxJQUFJLENBQUMsbUJBQW1CLEVBQUU7WUFDNUIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFVBQVUsOENBRWhELElBQUksQ0FBQyxXQUFXLEVBQ2hCLElBQUksQ0FBQyxHQUFHLENBQ1QsQ0FBQztZQUNGLElBQUksTUFBTSxFQUFFO2dCQUNWLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7YUFDbEM7U0FDRjthQUFNO1lBQ0wsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLG1DQUFtQyxDQUFDLFVBQVUsQ0FDaEUsSUFBSSxDQUFDLFdBQVcsRUFDaEIsSUFBSSxDQUFDLEdBQUcsQ0FDVCxDQUFDO1lBQ0YsSUFBSSxNQUFNLEVBQUU7Z0JBQ1YsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQzthQUNsQztTQUNGO0lBQ0gsQ0FBQzs7O1lBcERGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsa0NBQWtDO2dCQUM1Qyw4SUFBNkQ7YUFDOUQ7OztZQVpDLGdCQUFnQjtZQU9ULG1DQUFtQztZQUoxQyxtQkFBbUI7OzswQkFXbEIsU0FBUyxTQUFDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIFZpZXdDaGlsZCxcbiAgVmlld0NvbnRhaW5lclJlZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBMYXVuY2hEaWFsb2dTZXJ2aWNlLFxuICBMQVVOQ0hfQ0FMTEVSLFxufSBmcm9tICcuLi8uLi8uLi9sYXlvdXQvbGF1bmNoLWRpYWxvZyc7XG5pbXBvcnQgeyB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQW5vbnltb3VzQ29uc2VudExhdW5jaERpYWxvZ1NlcnZpY2UgfSBmcm9tICcuLi9hbm9ueW1vdXMtY29uc2VudC1sYXVuY2gtZGlhbG9nLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjeC1hbm9ueW1vdXMtY29uc2VudC1vcGVuLWRpYWxvZycsXG4gIHRlbXBsYXRlVXJsOiAnLi9hbm9ueW1vdXMtY29uc2VudC1vcGVuLWRpYWxvZy5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIEFub255bW91c0NvbnNlbnRPcGVuRGlhbG9nQ29tcG9uZW50IHtcbiAgQFZpZXdDaGlsZCgnb3BlbicpIG9wZW5FbGVtZW50OiBFbGVtZW50UmVmO1xuXG4gIC8vIFRPRE8oIzEyMTY3KTogbWFrZSBsYXVuY2hEaWFsb2dTZXJ2aWNlIGEgcmVxdWlyZWQgZGVwZW5kZW5jeSBpbnN0ZWFkIG9mIGFub255bW91c0NvbnNlbnRMYXVuY2hEaWFsb2dTZXJ2aWNlIGFuZCByZW1vdmUgZGVwcmVjYXRlZCBjb25zdHJ1Y3RvcnNcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIHNpbmNlIDMuM1xuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgdmNyOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIGFub255bW91c0NvbnNlbnRMYXVuY2hEaWFsb2dTZXJ2aWNlOiBBbm9ueW1vdXNDb25zZW50TGF1bmNoRGlhbG9nU2VydmljZVxuICApO1xuICAvKipcbiAgICogRGVmYXVsdCBjb25zdHJ1Y3RvciB3aWxsIGJlXG4gICAqIEBwYXJhbSB7Vmlld0NvbnRhaW5lclJlZn0gdmNyXG4gICAqIEBwYXJhbSB7TGF1bmNoRGlhbG9nU2VydmljZX0gbGF1bmNoRGlhbG9nU2VydmljZVxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgdmNyOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIGFub255bW91c0NvbnNlbnRMYXVuY2hEaWFsb2dTZXJ2aWNlOiBBbm9ueW1vdXNDb25zZW50TGF1bmNoRGlhbG9nU2VydmljZSxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuaWZpZWQtc2lnbmF0dXJlc1xuICAgIGxhdW5jaERpYWxvZ1NlcnZpY2U6IExhdW5jaERpYWxvZ1NlcnZpY2VcbiAgKTtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIHZjcjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcm90ZWN0ZWQgYW5vbnltb3VzQ29uc2VudExhdW5jaERpYWxvZ1NlcnZpY2U6IEFub255bW91c0NvbnNlbnRMYXVuY2hEaWFsb2dTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBsYXVuY2hEaWFsb2dTZXJ2aWNlPzogTGF1bmNoRGlhbG9nU2VydmljZVxuICApIHt9XG5cbiAgb3BlbkRpYWxvZygpOiB2b2lkIHtcbiAgICAvLyBUT0RPKCMxMjE2Nyk6IHVzZSBsYXVuY2hEaWFsb2dTZXJ2aWNlIG9ubHlcbiAgICBpZiAodGhpcy5sYXVuY2hEaWFsb2dTZXJ2aWNlKSB7XG4gICAgICBjb25zdCBkaWFsb2cgPSB0aGlzLmxhdW5jaERpYWxvZ1NlcnZpY2Uub3BlbkRpYWxvZyhcbiAgICAgICAgTEFVTkNIX0NBTExFUi5BTk9OWU1PVVNfQ09OU0VOVCxcbiAgICAgICAgdGhpcy5vcGVuRWxlbWVudCxcbiAgICAgICAgdGhpcy52Y3JcbiAgICAgICk7XG4gICAgICBpZiAoZGlhbG9nKSB7XG4gICAgICAgIGRpYWxvZy5waXBlKHRha2UoMSkpLnN1YnNjcmliZSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBkaWFsb2cgPSB0aGlzLmFub255bW91c0NvbnNlbnRMYXVuY2hEaWFsb2dTZXJ2aWNlLm9wZW5EaWFsb2coXG4gICAgICAgIHRoaXMub3BlbkVsZW1lbnQsXG4gICAgICAgIHRoaXMudmNyXG4gICAgICApO1xuICAgICAgaWYgKGRpYWxvZykge1xuICAgICAgICBkaWFsb2cucGlwZSh0YWtlKDEpKS5zdWJzY3JpYmUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==