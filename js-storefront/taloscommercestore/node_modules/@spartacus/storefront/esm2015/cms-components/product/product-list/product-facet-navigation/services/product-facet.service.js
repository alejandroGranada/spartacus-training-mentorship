import { Injectable } from '@angular/core';
import { PageType, RoutingService, } from '@spartacus/core';
import { filter, map, pluck, switchMap } from 'rxjs/operators';
import { ProductListComponentService } from '../../container/product-list-component.service';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "../../container/product-list-component.service";
/**
 * Provides access to all the facets and active facets for the Product Listing Page.
 */
export class ProductFacetService {
    constructor(routing, productListComponentService) {
        this.routing = routing;
        this.productListComponentService = productListComponentService;
        this.routeState$ = this.routing
            .getRouterState()
            .pipe(pluck('state'));
        /**
         * Returns the search results for the current page.
         */
        this.searchResult$ = this.routeState$.pipe(switchMap((state) => this.productListComponentService.model$.pipe(filter((page) => this.filterForPage(state, page)), map((page) => {
            var _a;
            return (Object.assign(Object.assign({}, page), { breadcrumbs: this.filterBreadcrumbs((_a = page === null || page === void 0 ? void 0 : page.breadcrumbs) !== null && _a !== void 0 ? _a : [], state.params) }));
        }))));
        /**
         * Observes the facets and active facets for the given page. The facet data
         * is provided in a `FacetList`.
         */
        this.facetList$ = this.searchResult$.pipe(map((result) => ({
            facets: result.facets,
            activeFacets: result.breadcrumbs,
        })));
    }
    /**
     * Filters the current result by verifying if the result is related to the page.
     * This is done to avoid a combination of the next page and the current search results.
     */
    filterForPage(state, page) {
        var _a, _b;
        if (!((_b = (_a = page.currentQuery) === null || _a === void 0 ? void 0 : _a.query) === null || _b === void 0 ? void 0 : _b.value)) {
            return false;
        }
        if (state.context.type === PageType.CATEGORY_PAGE) {
            return (page.currentQuery.query.value.indexOf(`allCategories:${state.context.id}`) > -1);
        }
        if (state.context.type === PageType.CONTENT_PAGE &&
            state.context.id === 'search') {
            return page.currentQuery.query.value.startsWith(`${state.params.query}:`);
        }
        return false;
    }
    /**
     * Filter breadcrumbs which are not actively selected but coming from
     * the route navigation.
     *
     * The breadcrumbs might include the active category page code, which is not actively
     * selected by the user.
     */
    filterBreadcrumbs(breadcrumbs, params) {
        return breadcrumbs
            ? breadcrumbs.filter((breadcrumb) => !(breadcrumb.facetCode === 'allCategories' &&
                (breadcrumb.facetValueCode === params.categoryCode ||
                    breadcrumb.facetValueCode === params.brandCode)))
            : [];
    }
}
ProductFacetService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProductFacetService_Factory() { return new ProductFacetService(i0.ɵɵinject(i1.RoutingService), i0.ɵɵinject(i2.ProductListComponentService)); }, token: ProductFacetService, providedIn: "root" });
ProductFacetService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
ProductFacetService.ctorParameters = () => [
    { type: RoutingService },
    { type: ProductListComponentService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1mYWNldC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9wcm9qZWN0cy9zdG9yZWZyb250bGliL3NyYy8iLCJzb3VyY2VzIjpbImNtcy1jb21wb25lbnRzL3Byb2R1Y3QvcHJvZHVjdC1saXN0L3Byb2R1Y3QtZmFjZXQtbmF2aWdhdGlvbi9zZXJ2aWNlcy9wcm9kdWN0LWZhY2V0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBR0wsUUFBUSxFQUVSLGNBQWMsR0FDZixNQUFNLGlCQUFpQixDQUFDO0FBRXpCLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQzs7OztBQUc3Rjs7R0FFRztBQUlILE1BQU0sT0FBTyxtQkFBbUI7SUFDOUIsWUFDWSxPQUF1QixFQUN2QiwyQkFBd0Q7UUFEeEQsWUFBTyxHQUFQLE9BQU8sQ0FBZ0I7UUFDdkIsZ0NBQTJCLEdBQTNCLDJCQUEyQixDQUE2QjtRQUdqRCxnQkFBVyxHQUFHLElBQUksQ0FBQyxPQUFPO2FBQzFDLGNBQWMsRUFBRTthQUNoQixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFFeEI7O1dBRUc7UUFDZ0Isa0JBQWEsR0FBa0MsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQ3JGLFNBQVMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQ2xCLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUMxQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQ2pELEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFOztZQUFDLE9BQUEsaUNBQ1QsSUFBSSxLQUNQLFdBQVcsRUFBRSxJQUFJLENBQUMsaUJBQWlCLE9BQ2pDLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxXQUFXLG1DQUFJLEVBQUUsRUFDdkIsS0FBSyxDQUFDLE1BQU0sQ0FDYixJQUNELENBQUE7U0FBQSxDQUFDLENBQ0osQ0FDRixDQUNGLENBQUM7UUFFRjs7O1dBR0c7UUFDTSxlQUFVLEdBQTBCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUNsRSxHQUFHLENBQ0QsQ0FBQyxNQUF5QixFQUFFLEVBQUUsQ0FDNUIsQ0FBQztZQUNDLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTTtZQUNyQixZQUFZLEVBQUUsTUFBTSxDQUFDLFdBQVc7U0FDbkIsQ0FBQSxDQUNsQixDQUNGLENBQUM7SUFwQ0MsQ0FBQztJQXNDSjs7O09BR0c7SUFDTyxhQUFhLENBQ3JCLEtBQW1DLEVBQ25DLElBQXVCOztRQUV2QixJQUFJLGNBQUMsSUFBSSxDQUFDLFlBQVksMENBQUUsS0FBSywwQ0FBRSxLQUFLLENBQUEsRUFBRTtZQUNwQyxPQUFPLEtBQUssQ0FBQztTQUNkO1FBQ0QsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksS0FBSyxRQUFRLENBQUMsYUFBYSxFQUFFO1lBQ2pELE9BQU8sQ0FDTCxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUNuQyxpQkFBaUIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FDcEMsR0FBRyxDQUFDLENBQUMsQ0FDUCxDQUFDO1NBQ0g7UUFFRCxJQUNFLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQyxZQUFZO1lBQzVDLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxLQUFLLFFBQVEsRUFDN0I7WUFDQSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7U0FDM0U7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDTyxpQkFBaUIsQ0FDekIsV0FBeUIsRUFDekIsTUFBYztRQUVkLE9BQU8sV0FBVztZQUNoQixDQUFDLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FDaEIsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUNiLENBQUMsQ0FDQyxVQUFVLENBQUMsU0FBUyxLQUFLLGVBQWU7Z0JBQ3hDLENBQUMsVUFBVSxDQUFDLGNBQWMsS0FBSyxNQUFNLENBQUMsWUFBWTtvQkFDaEQsVUFBVSxDQUFDLGNBQWMsS0FBSyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQ2xELENBQ0o7WUFDSCxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ1QsQ0FBQzs7OztZQTlGRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7OztZQVpDLGNBQWM7WUFJUCwyQkFBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHtcbiAgQWN0aXZhdGVkUm91dGVyU3RhdGVTbmFwc2hvdCxcbiAgQnJlYWRjcnVtYixcbiAgUGFnZVR5cGUsXG4gIFByb2R1Y3RTZWFyY2hQYWdlLFxuICBSb3V0aW5nU2VydmljZSxcbn0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciwgbWFwLCBwbHVjaywgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgUHJvZHVjdExpc3RDb21wb25lbnRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vY29udGFpbmVyL3Byb2R1Y3QtbGlzdC1jb21wb25lbnQuc2VydmljZSc7XG5pbXBvcnQgeyBGYWNldExpc3QgfSBmcm9tICcuLi9mYWNldC5tb2RlbCc7XG5cbi8qKlxuICogUHJvdmlkZXMgYWNjZXNzIHRvIGFsbCB0aGUgZmFjZXRzIGFuZCBhY3RpdmUgZmFjZXRzIGZvciB0aGUgUHJvZHVjdCBMaXN0aW5nIFBhZ2UuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBQcm9kdWN0RmFjZXRTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIHJvdXRpbmc6IFJvdXRpbmdTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBwcm9kdWN0TGlzdENvbXBvbmVudFNlcnZpY2U6IFByb2R1Y3RMaXN0Q29tcG9uZW50U2VydmljZVxuICApIHt9XG5cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IHJvdXRlU3RhdGUkID0gdGhpcy5yb3V0aW5nXG4gICAgLmdldFJvdXRlclN0YXRlKClcbiAgICAucGlwZShwbHVjaygnc3RhdGUnKSk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHNlYXJjaCByZXN1bHRzIGZvciB0aGUgY3VycmVudCBwYWdlLlxuICAgKi9cbiAgcHJvdGVjdGVkIHJlYWRvbmx5IHNlYXJjaFJlc3VsdCQ6IE9ic2VydmFibGU8UHJvZHVjdFNlYXJjaFBhZ2U+ID0gdGhpcy5yb3V0ZVN0YXRlJC5waXBlKFxuICAgIHN3aXRjaE1hcCgoc3RhdGUpID0+XG4gICAgICB0aGlzLnByb2R1Y3RMaXN0Q29tcG9uZW50U2VydmljZS5tb2RlbCQucGlwZShcbiAgICAgICAgZmlsdGVyKChwYWdlKSA9PiB0aGlzLmZpbHRlckZvclBhZ2Uoc3RhdGUsIHBhZ2UpKSxcbiAgICAgICAgbWFwKChwYWdlKSA9PiAoe1xuICAgICAgICAgIC4uLnBhZ2UsXG4gICAgICAgICAgYnJlYWRjcnVtYnM6IHRoaXMuZmlsdGVyQnJlYWRjcnVtYnMoXG4gICAgICAgICAgICBwYWdlPy5icmVhZGNydW1icyA/PyBbXSxcbiAgICAgICAgICAgIHN0YXRlLnBhcmFtc1xuICAgICAgICAgICksXG4gICAgICAgIH0pKVxuICAgICAgKVxuICAgIClcbiAgKTtcblxuICAvKipcbiAgICogT2JzZXJ2ZXMgdGhlIGZhY2V0cyBhbmQgYWN0aXZlIGZhY2V0cyBmb3IgdGhlIGdpdmVuIHBhZ2UuIFRoZSBmYWNldCBkYXRhXG4gICAqIGlzIHByb3ZpZGVkIGluIGEgYEZhY2V0TGlzdGAuXG4gICAqL1xuICByZWFkb25seSBmYWNldExpc3QkOiBPYnNlcnZhYmxlPEZhY2V0TGlzdD4gPSB0aGlzLnNlYXJjaFJlc3VsdCQucGlwZShcbiAgICBtYXAoXG4gICAgICAocmVzdWx0OiBQcm9kdWN0U2VhcmNoUGFnZSkgPT5cbiAgICAgICAgKHtcbiAgICAgICAgICBmYWNldHM6IHJlc3VsdC5mYWNldHMsXG4gICAgICAgICAgYWN0aXZlRmFjZXRzOiByZXN1bHQuYnJlYWRjcnVtYnMsXG4gICAgICAgIH0gYXMgRmFjZXRMaXN0KVxuICAgIClcbiAgKTtcblxuICAvKipcbiAgICogRmlsdGVycyB0aGUgY3VycmVudCByZXN1bHQgYnkgdmVyaWZ5aW5nIGlmIHRoZSByZXN1bHQgaXMgcmVsYXRlZCB0byB0aGUgcGFnZS5cbiAgICogVGhpcyBpcyBkb25lIHRvIGF2b2lkIGEgY29tYmluYXRpb24gb2YgdGhlIG5leHQgcGFnZSBhbmQgdGhlIGN1cnJlbnQgc2VhcmNoIHJlc3VsdHMuXG4gICAqL1xuICBwcm90ZWN0ZWQgZmlsdGVyRm9yUGFnZShcbiAgICBzdGF0ZTogQWN0aXZhdGVkUm91dGVyU3RhdGVTbmFwc2hvdCxcbiAgICBwYWdlOiBQcm9kdWN0U2VhcmNoUGFnZVxuICApOiBib29sZWFuIHtcbiAgICBpZiAoIXBhZ2UuY3VycmVudFF1ZXJ5Py5xdWVyeT8udmFsdWUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHN0YXRlLmNvbnRleHQudHlwZSA9PT0gUGFnZVR5cGUuQ0FURUdPUllfUEFHRSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgcGFnZS5jdXJyZW50UXVlcnkucXVlcnkudmFsdWUuaW5kZXhPZihcbiAgICAgICAgICBgYWxsQ2F0ZWdvcmllczoke3N0YXRlLmNvbnRleHQuaWR9YFxuICAgICAgICApID4gLTFcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgc3RhdGUuY29udGV4dC50eXBlID09PSBQYWdlVHlwZS5DT05URU5UX1BBR0UgJiZcbiAgICAgIHN0YXRlLmNvbnRleHQuaWQgPT09ICdzZWFyY2gnXG4gICAgKSB7XG4gICAgICByZXR1cm4gcGFnZS5jdXJyZW50UXVlcnkucXVlcnkudmFsdWUuc3RhcnRzV2l0aChgJHtzdGF0ZS5wYXJhbXMucXVlcnl9OmApO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogRmlsdGVyIGJyZWFkY3J1bWJzIHdoaWNoIGFyZSBub3QgYWN0aXZlbHkgc2VsZWN0ZWQgYnV0IGNvbWluZyBmcm9tXG4gICAqIHRoZSByb3V0ZSBuYXZpZ2F0aW9uLlxuICAgKlxuICAgKiBUaGUgYnJlYWRjcnVtYnMgbWlnaHQgaW5jbHVkZSB0aGUgYWN0aXZlIGNhdGVnb3J5IHBhZ2UgY29kZSwgd2hpY2ggaXMgbm90IGFjdGl2ZWx5XG4gICAqIHNlbGVjdGVkIGJ5IHRoZSB1c2VyLlxuICAgKi9cbiAgcHJvdGVjdGVkIGZpbHRlckJyZWFkY3J1bWJzKFxuICAgIGJyZWFkY3J1bWJzOiBCcmVhZGNydW1iW10sXG4gICAgcGFyYW1zOiBQYXJhbXNcbiAgKTogQnJlYWRjcnVtYltdIHtcbiAgICByZXR1cm4gYnJlYWRjcnVtYnNcbiAgICAgID8gYnJlYWRjcnVtYnMuZmlsdGVyKFxuICAgICAgICAgIChicmVhZGNydW1iKSA9PlxuICAgICAgICAgICAgIShcbiAgICAgICAgICAgICAgYnJlYWRjcnVtYi5mYWNldENvZGUgPT09ICdhbGxDYXRlZ29yaWVzJyAmJlxuICAgICAgICAgICAgICAoYnJlYWRjcnVtYi5mYWNldFZhbHVlQ29kZSA9PT0gcGFyYW1zLmNhdGVnb3J5Q29kZSB8fFxuICAgICAgICAgICAgICAgIGJyZWFkY3J1bWIuZmFjZXRWYWx1ZUNvZGUgPT09IHBhcmFtcy5icmFuZENvZGUpXG4gICAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgIDogW107XG4gIH1cbn1cbiJdfQ==