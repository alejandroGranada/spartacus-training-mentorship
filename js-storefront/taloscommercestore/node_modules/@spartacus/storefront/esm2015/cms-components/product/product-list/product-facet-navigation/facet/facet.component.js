import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, Input, ViewChild, ViewChildren, } from '@angular/core';
import { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';
import { FocusDirective } from '../../../../../layout/a11y/keyboard-focus/focus.directive';
import { FacetService } from '../services/facet.service';
export class FacetComponent {
    constructor(facetService, elementRef, cd) {
        this.facetService = facetService;
        this.elementRef = elementRef;
        this.cd = cd;
        /** configurable icon that is used to collapse the facet group  */
        this.expandIcon = ICON_TYPE.EXPAND;
        this.collapseIcon = ICON_TYPE.COLLAPSE;
    }
    set facet(value) {
        this._facet = value;
        this.isMultiSelect = !!value.multiSelect;
        this.state$ = this.facetService.getState(value);
    }
    get facet() {
        return this._facet;
    }
    /**
     * Handles clicking the heading of the facet group, which means toggling
     * the visibility of the group (collapse / expand) and optionally focusing
     * the group.
     */
    toggleGroup(event) {
        var _a;
        const host = this.elementRef.nativeElement;
        const isLocked = (_a = this.keyboardFocus) === null || _a === void 0 ? void 0 : _a.isLocked;
        this.facetService.toggle(this.facet, this.isExpanded);
        if (!isLocked || this.isExpanded) {
            host.focus();
            // we stop propagating the event as otherwise the focus on the host will trigger
            // an unlock event from the LockFocus directive.
            event.stopPropagation();
        }
    }
    get isExpanded() {
        return this.values.first.nativeElement.offsetParent !== null;
    }
    openLink(event) {
        event.target.click();
        event.preventDefault();
    }
    /**
     * Increases the number of visible values for the facet. This is delegated
     * to `facetService.increaseVisibleValues`.
     */
    increaseVisibleValues() {
        this.facetService.increaseVisibleValues(this.facet);
    }
    /**
     * Decreases the number of visible values for the facet. This is delegated
     * to `facetService.decreaseVisibleValues`.
     */
    decreaseVisibleValues() {
        this.facetService.decreaseVisibleValues(this.facet);
    }
    getLinkParams(value) {
        var _a;
        return this.facetService.getLinkParams((_a = value.query) === null || _a === void 0 ? void 0 : _a.query.value);
    }
}
FacetComponent.decorators = [
    { type: Component, args: [{
                selector: 'cx-facet',
                template: "<ng-container *ngIf=\"state$ | async as state\">\n  <button class=\"heading\" (click)=\"toggleGroup($event)\">\n    {{ facet.name }}\n    <cx-icon class=\"collapse-icon\" [type]=\"collapseIcon\"></cx-icon>\n    <cx-icon class=\"expand-icon\" [type]=\"expandIcon\"></cx-icon>\n  </button>\n\n  <a\n    *ngFor=\"let value of facet.values | slice: 0:state.topVisible\"\n    #facetValue\n    routerLink=\"./\"\n    [queryParams]=\"getLinkParams(value)\"\n    class=\"value\"\n    [class.selected]=\"value.selected\"\n    [cxFocus]=\"value.name\"\n    (keydown.space)=\"openLink($event)\"\n  >\n    <span>\n      <span class=\"label\">{{ value.name }}</span>\n      <span class=\"count\">{{ value.count }}</span>\n    </span>\n  </a>\n\n  <div class=\"more\">\n    <a\n      *ngFor=\"\n        let value of facet.values | slice: state.topVisible:state.maxVisible\n      \"\n      #facetValue\n      routerLink=\"./\"\n      [queryParams]=\"getLinkParams(value)\"\n      class=\"value\"\n      [class.selected]=\"value.selected\"\n      [cxFocus]=\"value.name\"\n      (keydown.space)=\"openLink($event)\"\n    >\n      <span\n        >{{ value.name }}<span class=\"count\">{{ value.count }}</span></span\n      >\n    </a>\n\n    <button\n      *ngIf=\"state.maxVisible > state.topVisible\"\n      (click)=\"decreaseVisibleValues()\"\n      class=\"cx-action-link\"\n      cxFocus=\"moreorless\"\n    >\n      {{ 'productList.showLess' | cxTranslate }}\n    </button>\n\n    <button\n      *ngIf=\"state.maxVisible > 0 && state.maxVisible < facet.values.length\"\n      (click)=\"increaseVisibleValues()\"\n      class=\"cx-action-link\"\n      cxFocus=\"moreorless\"\n    >\n      {{ 'productList.showMore' | cxTranslate }}\n    </button>\n  </div>\n</ng-container>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
FacetComponent.ctorParameters = () => [
    { type: FacetService },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
FacetComponent.propDecorators = {
    expandIcon: [{ type: Input }],
    collapseIcon: [{ type: Input }],
    isMultiSelect: [{ type: HostBinding, args: ['class.multi-select',] }],
    values: [{ type: ViewChildren, args: ['facetValue',] }],
    keyboardFocus: [{ type: ViewChild, args: [FocusDirective,] }],
    facet: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjZXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9wcm9qZWN0cy9zdG9yZWZyb250bGliL3NyYy8iLCJzb3VyY2VzIjpbImNtcy1jb21wb25lbnRzL3Byb2R1Y3QvcHJvZHVjdC1saXN0L3Byb2R1Y3QtZmFjZXQtbmF2aWdhdGlvbi9mYWNldC9mYWNldC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixpQkFBaUIsRUFDakIsU0FBUyxFQUNULFVBQVUsRUFDVixXQUFXLEVBQ1gsS0FBSyxFQUVMLFNBQVMsRUFDVCxZQUFZLEdBQ2IsTUFBTSxlQUFlLENBQUM7QUFHdkIsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBQy9FLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwyREFBMkQsQ0FBQztBQUUzRixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFPekQsTUFBTSxPQUFPLGNBQWM7SUEwQnpCLFlBQ1ksWUFBMEIsRUFDMUIsVUFBbUMsRUFDbkMsRUFBcUI7UUFGckIsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDMUIsZUFBVSxHQUFWLFVBQVUsQ0FBeUI7UUFDbkMsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUF4QmpDLGtFQUFrRTtRQUN6RCxlQUFVLEdBQWMsU0FBUyxDQUFDLE1BQU0sQ0FBQztRQUN6QyxpQkFBWSxHQUFjLFNBQVMsQ0FBQyxRQUFRLENBQUM7SUF1Qm5ELENBQUM7SUFmSixJQUNJLEtBQUssQ0FBQyxLQUFZO1FBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUM7UUFDekMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFRRDs7OztPQUlHO0lBQ0gsV0FBVyxDQUFDLEtBQWM7O1FBQ3hCLE1BQU0sSUFBSSxHQUFnQixJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQztRQUN4RCxNQUFNLFFBQVEsU0FBRyxJQUFJLENBQUMsYUFBYSwwQ0FBRSxRQUFRLENBQUM7UUFFOUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFdEQsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2hDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNiLGdGQUFnRjtZQUNoRixnREFBZ0Q7WUFDaEQsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQztJQUVELElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFlBQVksS0FBSyxJQUFJLENBQUM7SUFDL0QsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUFvQjtRQUMxQixLQUFLLENBQUMsTUFBc0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN0QyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDekIsQ0FBQztJQUVEOzs7T0FHRztJQUNILHFCQUFxQjtRQUNuQixJQUFJLENBQUMsWUFBWSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gscUJBQXFCO1FBQ25CLElBQUksQ0FBQyxZQUFZLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxhQUFhLENBQUMsS0FBaUI7O1FBQzdCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLE9BQUMsS0FBSyxDQUFDLEtBQUssMENBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25FLENBQUM7OztZQW5GRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFVBQVU7Z0JBQ3BCLCt1REFBcUM7Z0JBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2hEOzs7WUFOUSxZQUFZO1lBWm5CLFVBQVU7WUFGVixpQkFBaUI7Ozt5QkEyQmhCLEtBQUs7MkJBQ0wsS0FBSzs0QkFFTCxXQUFXLFNBQUMsb0JBQW9CO3FCQUVoQyxZQUFZLFNBQUMsWUFBWTs0QkFFekIsU0FBUyxTQUFDLGNBQWM7b0JBRXhCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgSG9zdEJpbmRpbmcsXG4gIElucHV0LFxuICBRdWVyeUxpc3QsXG4gIFZpZXdDaGlsZCxcbiAgVmlld0NoaWxkcmVuLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZhY2V0LCBGYWNldFZhbHVlIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IElDT05fVFlQRSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2Ntcy1jb21wb25lbnRzL21pc2MvaWNvbi9pY29uLm1vZGVsJztcbmltcG9ydCB7IEZvY3VzRGlyZWN0aXZlIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vbGF5b3V0L2ExMXkva2V5Ym9hcmQtZm9jdXMvZm9jdXMuZGlyZWN0aXZlJztcbmltcG9ydCB7IEZhY2V0Q29sbGFwc2VTdGF0ZSB9IGZyb20gJy4uL2ZhY2V0Lm1vZGVsJztcbmltcG9ydCB7IEZhY2V0U2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2ZhY2V0LnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjeC1mYWNldCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9mYWNldC5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBGYWNldENvbXBvbmVudCB7XG4gIHByb3RlY3RlZCBfZmFjZXQ6IEZhY2V0O1xuXG4gIHN0YXRlJDogT2JzZXJ2YWJsZTxGYWNldENvbGxhcHNlU3RhdGU+O1xuXG4gIC8qKiBjb25maWd1cmFibGUgaWNvbiB0aGF0IGlzIHVzZWQgdG8gY29sbGFwc2UgdGhlIGZhY2V0IGdyb3VwICAqL1xuICBASW5wdXQoKSBleHBhbmRJY29uOiBJQ09OX1RZUEUgPSBJQ09OX1RZUEUuRVhQQU5EO1xuICBASW5wdXQoKSBjb2xsYXBzZUljb246IElDT05fVFlQRSA9IElDT05fVFlQRS5DT0xMQVBTRTtcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLm11bHRpLXNlbGVjdCcpIGlzTXVsdGlTZWxlY3Q6IGJvb2xlYW47XG5cbiAgQFZpZXdDaGlsZHJlbignZmFjZXRWYWx1ZScpIHZhbHVlczogUXVlcnlMaXN0PEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+PjtcblxuICBAVmlld0NoaWxkKEZvY3VzRGlyZWN0aXZlKSBrZXlib2FyZEZvY3VzOiBGb2N1c0RpcmVjdGl2ZTtcblxuICBASW5wdXQoKVxuICBzZXQgZmFjZXQodmFsdWU6IEZhY2V0KSB7XG4gICAgdGhpcy5fZmFjZXQgPSB2YWx1ZTtcbiAgICB0aGlzLmlzTXVsdGlTZWxlY3QgPSAhIXZhbHVlLm11bHRpU2VsZWN0O1xuICAgIHRoaXMuc3RhdGUkID0gdGhpcy5mYWNldFNlcnZpY2UuZ2V0U3RhdGUodmFsdWUpO1xuICB9XG5cbiAgZ2V0IGZhY2V0KCk6IEZhY2V0IHtcbiAgICByZXR1cm4gdGhpcy5fZmFjZXQ7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgZmFjZXRTZXJ2aWNlOiBGYWNldFNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgIHByb3RlY3RlZCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWZcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIGNsaWNraW5nIHRoZSBoZWFkaW5nIG9mIHRoZSBmYWNldCBncm91cCwgd2hpY2ggbWVhbnMgdG9nZ2xpbmdcbiAgICogdGhlIHZpc2liaWxpdHkgb2YgdGhlIGdyb3VwIChjb2xsYXBzZSAvIGV4cGFuZCkgYW5kIG9wdGlvbmFsbHkgZm9jdXNpbmdcbiAgICogdGhlIGdyb3VwLlxuICAgKi9cbiAgdG9nZ2xlR3JvdXAoZXZlbnQ6IFVJRXZlbnQpIHtcbiAgICBjb25zdCBob3N0OiBIVE1MRWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICAgIGNvbnN0IGlzTG9ja2VkID0gdGhpcy5rZXlib2FyZEZvY3VzPy5pc0xvY2tlZDtcblxuICAgIHRoaXMuZmFjZXRTZXJ2aWNlLnRvZ2dsZSh0aGlzLmZhY2V0LCB0aGlzLmlzRXhwYW5kZWQpO1xuXG4gICAgaWYgKCFpc0xvY2tlZCB8fCB0aGlzLmlzRXhwYW5kZWQpIHtcbiAgICAgIGhvc3QuZm9jdXMoKTtcbiAgICAgIC8vIHdlIHN0b3AgcHJvcGFnYXRpbmcgdGhlIGV2ZW50IGFzIG90aGVyd2lzZSB0aGUgZm9jdXMgb24gdGhlIGhvc3Qgd2lsbCB0cmlnZ2VyXG4gICAgICAvLyBhbiB1bmxvY2sgZXZlbnQgZnJvbSB0aGUgTG9ja0ZvY3VzIGRpcmVjdGl2ZS5cbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBpc0V4cGFuZGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnZhbHVlcy5maXJzdC5uYXRpdmVFbGVtZW50Lm9mZnNldFBhcmVudCAhPT0gbnVsbDtcbiAgfVxuXG4gIG9wZW5MaW5rKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgKGV2ZW50LnRhcmdldCBhcyBIVE1MRWxlbWVudCkuY2xpY2soKTtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluY3JlYXNlcyB0aGUgbnVtYmVyIG9mIHZpc2libGUgdmFsdWVzIGZvciB0aGUgZmFjZXQuIFRoaXMgaXMgZGVsZWdhdGVkXG4gICAqIHRvIGBmYWNldFNlcnZpY2UuaW5jcmVhc2VWaXNpYmxlVmFsdWVzYC5cbiAgICovXG4gIGluY3JlYXNlVmlzaWJsZVZhbHVlcygpOiB2b2lkIHtcbiAgICB0aGlzLmZhY2V0U2VydmljZS5pbmNyZWFzZVZpc2libGVWYWx1ZXModGhpcy5mYWNldCk7XG4gIH1cblxuICAvKipcbiAgICogRGVjcmVhc2VzIHRoZSBudW1iZXIgb2YgdmlzaWJsZSB2YWx1ZXMgZm9yIHRoZSBmYWNldC4gVGhpcyBpcyBkZWxlZ2F0ZWRcbiAgICogdG8gYGZhY2V0U2VydmljZS5kZWNyZWFzZVZpc2libGVWYWx1ZXNgLlxuICAgKi9cbiAgZGVjcmVhc2VWaXNpYmxlVmFsdWVzKCk6IHZvaWQge1xuICAgIHRoaXMuZmFjZXRTZXJ2aWNlLmRlY3JlYXNlVmlzaWJsZVZhbHVlcyh0aGlzLmZhY2V0KTtcbiAgfVxuXG4gIGdldExpbmtQYXJhbXModmFsdWU6IEZhY2V0VmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5mYWNldFNlcnZpY2UuZ2V0TGlua1BhcmFtcyh2YWx1ZS5xdWVyeT8ucXVlcnkudmFsdWUpO1xuICB9XG59XG4iXX0=