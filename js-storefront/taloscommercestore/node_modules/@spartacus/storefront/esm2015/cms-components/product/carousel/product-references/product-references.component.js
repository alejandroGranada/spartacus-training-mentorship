import { ChangeDetectionStrategy, Component } from '@angular/core';
import { isNotNullable, ProductReferenceService, } from '@spartacus/core';
import { of } from 'rxjs';
import { filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';
import { CmsComponentData } from '../../../../cms-structure/page/model/cms-component-data';
import { CurrentProductService } from '../../current-product.service';
export class ProductReferencesComponent {
    constructor(cmsComponentData, currentProductService, productReferenceService) {
        this.cmsComponentData = cmsComponentData;
        this.currentProductService = currentProductService;
        this.productReferenceService = productReferenceService;
        /**
         * Observable with an Array of Observables. This is done so that
         * the component UI could consider to lazy load the UI components when they're
         * in the viewpoint.
         */
        this.items$ = this.productCode$.pipe(withLatestFrom(this.componentData$), tap(([productCode, data]) => this.productReferenceService.loadProductReferences(productCode, data === null || data === void 0 ? void 0 : data.productReferenceTypes)), switchMap(([productCode, data]) => this.getProductReferences(productCode, data === null || data === void 0 ? void 0 : data.productReferenceTypes)));
    }
    get componentData$() {
        return this.cmsComponentData.data$.pipe(filter(Boolean));
    }
    /**
     * Returns an Observable String for the product code
     */
    get productCode$() {
        return this.currentProductService.getProduct().pipe(filter(isNotNullable), map((product) => product.code), tap((_) => this.productReferenceService.cleanReferences()));
    }
    /**
     * Returns an Observable String for the title
     */
    get title$() {
        return this.componentData$.pipe(map((data) => data === null || data === void 0 ? void 0 : data.title));
    }
    /**
     * Returns an observable for product references
     */
    getProductReferences(code, referenceType) {
        return this.productReferenceService
            .getProductReferences(code, referenceType)
            .pipe(filter(Boolean), map((references) => references.map((reference) => of(reference.target))));
    }
}
ProductReferencesComponent.decorators = [
    { type: Component, args: [{
                selector: 'cx-product-references',
                template: "<cx-carousel\n  [title]=\"title$ | async\"\n  [items]=\"items$ | async\"\n  [template]=\"carouselItem\"\n>\n</cx-carousel>\n\n<ng-template #carouselItem let-item=\"item\">\n  <a tabindex=\"0\" [routerLink]=\"{ cxRoute: 'product', params: item } | cxUrl\">\n    <cx-media [container]=\"item.images?.PRIMARY\" format=\"product\"></cx-media>\n    <h4>{{ item.name }}</h4>\n    <div class=\"price\">{{ item.price?.formattedValue }}</div>\n  </a>\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
ProductReferencesComponent.ctorParameters = () => [
    { type: CmsComponentData },
    { type: CurrentProductService },
    { type: ProductReferenceService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1yZWZlcmVuY2VzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy9QYXRyeWsvRGVza3RvcC9zcGFydGFjdXMvcHJvamVjdHMvc3RvcmVmcm9udGxpYi9zcmMvIiwic291cmNlcyI6WyJjbXMtY29tcG9uZW50cy9wcm9kdWN0L2Nhcm91c2VsL3Byb2R1Y3QtcmVmZXJlbmNlcy9wcm9kdWN0LXJlZmVyZW5jZXMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkUsT0FBTyxFQUVMLGFBQWEsRUFHYix1QkFBdUIsR0FDeEIsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0UsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0seURBQXlELENBQUM7QUFDM0YsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFPdEUsTUFBTSxPQUFPLDBCQUEwQjtJQUNyQyxZQUNZLGdCQUFpRSxFQUNqRSxxQkFBNEMsRUFDNUMsdUJBQWdEO1FBRmhELHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBaUQ7UUFDakUsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtRQUM1Qyw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQXlCO1FBeUI1RDs7OztXQUlHO1FBQ0gsV0FBTSxHQUFzQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FDaEUsY0FBYyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsRUFDbkMsR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUMxQixJQUFJLENBQUMsdUJBQXVCLENBQUMscUJBQXFCLENBQ2hELFdBQVcsRUFDWCxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUscUJBQXFCLENBQzVCLENBQ0YsRUFDRCxTQUFTLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQ2hDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLEVBQUUsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLHFCQUFxQixDQUFDLENBQ3BFLENBQ0YsQ0FBQztJQXhDQyxDQUFDO0lBRUosSUFBYyxjQUFjO1FBQzFCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBYyxZQUFZO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FDakQsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUNyQixHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFDOUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FDM0QsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNILElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBb0JEOztPQUVHO0lBQ0ssb0JBQW9CLENBQzFCLElBQVksRUFDWixhQUFxQjtRQUVyQixPQUFPLElBQUksQ0FBQyx1QkFBdUI7YUFDaEMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQzthQUN6QyxJQUFJLENBQ0gsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUNmLEdBQUcsQ0FBQyxDQUFDLFVBQThCLEVBQUUsRUFBRSxDQUNyQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQ3BELENBQ0YsQ0FBQztJQUNOLENBQUM7OztZQW5FRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHVCQUF1QjtnQkFDakMsdWRBQWtEO2dCQUNsRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTthQUNoRDs7O1lBUFEsZ0JBQWdCO1lBQ2hCLHFCQUFxQjtZQUw1Qix1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBDbXNQcm9kdWN0UmVmZXJlbmNlc0NvbXBvbmVudCxcbiAgaXNOb3ROdWxsYWJsZSxcbiAgUHJvZHVjdCxcbiAgUHJvZHVjdFJlZmVyZW5jZSxcbiAgUHJvZHVjdFJlZmVyZW5jZVNlcnZpY2UsXG59IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyLCBtYXAsIHN3aXRjaE1hcCwgdGFwLCB3aXRoTGF0ZXN0RnJvbSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IENtc0NvbXBvbmVudERhdGEgfSBmcm9tICcuLi8uLi8uLi8uLi9jbXMtc3RydWN0dXJlL3BhZ2UvbW9kZWwvY21zLWNvbXBvbmVudC1kYXRhJztcbmltcG9ydCB7IEN1cnJlbnRQcm9kdWN0U2VydmljZSB9IGZyb20gJy4uLy4uL2N1cnJlbnQtcHJvZHVjdC5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY3gtcHJvZHVjdC1yZWZlcmVuY2VzJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3Byb2R1Y3QtcmVmZXJlbmNlcy5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBQcm9kdWN0UmVmZXJlbmNlc0NvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBjbXNDb21wb25lbnREYXRhOiBDbXNDb21wb25lbnREYXRhPENtc1Byb2R1Y3RSZWZlcmVuY2VzQ29tcG9uZW50PixcbiAgICBwcm90ZWN0ZWQgY3VycmVudFByb2R1Y3RTZXJ2aWNlOiBDdXJyZW50UHJvZHVjdFNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIHByb2R1Y3RSZWZlcmVuY2VTZXJ2aWNlOiBQcm9kdWN0UmVmZXJlbmNlU2VydmljZVxuICApIHt9XG5cbiAgcHJvdGVjdGVkIGdldCBjb21wb25lbnREYXRhJCgpOiBPYnNlcnZhYmxlPENtc1Byb2R1Y3RSZWZlcmVuY2VzQ29tcG9uZW50PiB7XG4gICAgcmV0dXJuIHRoaXMuY21zQ29tcG9uZW50RGF0YS5kYXRhJC5waXBlKGZpbHRlcihCb29sZWFuKSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBPYnNlcnZhYmxlIFN0cmluZyBmb3IgdGhlIHByb2R1Y3QgY29kZVxuICAgKi9cbiAgcHJvdGVjdGVkIGdldCBwcm9kdWN0Q29kZSQoKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50UHJvZHVjdFNlcnZpY2UuZ2V0UHJvZHVjdCgpLnBpcGUoXG4gICAgICBmaWx0ZXIoaXNOb3ROdWxsYWJsZSksXG4gICAgICBtYXAoKHByb2R1Y3QpID0+IHByb2R1Y3QuY29kZSksXG4gICAgICB0YXAoKF8pID0+IHRoaXMucHJvZHVjdFJlZmVyZW5jZVNlcnZpY2UuY2xlYW5SZWZlcmVuY2VzKCkpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIE9ic2VydmFibGUgU3RyaW5nIGZvciB0aGUgdGl0bGVcbiAgICovXG4gIGdldCB0aXRsZSQoKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5jb21wb25lbnREYXRhJC5waXBlKG1hcCgoZGF0YSkgPT4gZGF0YT8udGl0bGUpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPYnNlcnZhYmxlIHdpdGggYW4gQXJyYXkgb2YgT2JzZXJ2YWJsZXMuIFRoaXMgaXMgZG9uZSBzbyB0aGF0XG4gICAqIHRoZSBjb21wb25lbnQgVUkgY291bGQgY29uc2lkZXIgdG8gbGF6eSBsb2FkIHRoZSBVSSBjb21wb25lbnRzIHdoZW4gdGhleSdyZVxuICAgKiBpbiB0aGUgdmlld3BvaW50LlxuICAgKi9cbiAgaXRlbXMkOiBPYnNlcnZhYmxlPE9ic2VydmFibGU8UHJvZHVjdD5bXT4gPSB0aGlzLnByb2R1Y3RDb2RlJC5waXBlKFxuICAgIHdpdGhMYXRlc3RGcm9tKHRoaXMuY29tcG9uZW50RGF0YSQpLFxuICAgIHRhcCgoW3Byb2R1Y3RDb2RlLCBkYXRhXSkgPT5cbiAgICAgIHRoaXMucHJvZHVjdFJlZmVyZW5jZVNlcnZpY2UubG9hZFByb2R1Y3RSZWZlcmVuY2VzKFxuICAgICAgICBwcm9kdWN0Q29kZSxcbiAgICAgICAgZGF0YT8ucHJvZHVjdFJlZmVyZW5jZVR5cGVzXG4gICAgICApXG4gICAgKSxcbiAgICBzd2l0Y2hNYXAoKFtwcm9kdWN0Q29kZSwgZGF0YV0pID0+XG4gICAgICB0aGlzLmdldFByb2R1Y3RSZWZlcmVuY2VzKHByb2R1Y3RDb2RlLCBkYXRhPy5wcm9kdWN0UmVmZXJlbmNlVHlwZXMpXG4gICAgKVxuICApO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIG9ic2VydmFibGUgZm9yIHByb2R1Y3QgcmVmZXJlbmNlc1xuICAgKi9cbiAgcHJpdmF0ZSBnZXRQcm9kdWN0UmVmZXJlbmNlcyhcbiAgICBjb2RlOiBzdHJpbmcsXG4gICAgcmVmZXJlbmNlVHlwZTogc3RyaW5nXG4gICk6IE9ic2VydmFibGU8T2JzZXJ2YWJsZTxQcm9kdWN0PltdPiB7XG4gICAgcmV0dXJuIHRoaXMucHJvZHVjdFJlZmVyZW5jZVNlcnZpY2VcbiAgICAgIC5nZXRQcm9kdWN0UmVmZXJlbmNlcyhjb2RlLCByZWZlcmVuY2VUeXBlKVxuICAgICAgLnBpcGUoXG4gICAgICAgIGZpbHRlcihCb29sZWFuKSxcbiAgICAgICAgbWFwKChyZWZlcmVuY2VzOiBQcm9kdWN0UmVmZXJlbmNlW10pID0+XG4gICAgICAgICAgcmVmZXJlbmNlcy5tYXAoKHJlZmVyZW5jZSkgPT4gb2YocmVmZXJlbmNlLnRhcmdldCkpXG4gICAgICAgIClcbiAgICAgICk7XG4gIH1cbn1cbiJdfQ==