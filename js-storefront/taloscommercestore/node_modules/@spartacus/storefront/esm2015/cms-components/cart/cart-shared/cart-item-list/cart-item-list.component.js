import { ChangeDetectionStrategy, Component, Input, } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { ActiveCartService, FeatureConfigService, MultiCartService, PromotionLocation, SelectiveCartService, UserIdService, } from '@spartacus/core';
import { Subscription } from 'rxjs';
import { map, startWith, tap } from 'rxjs/operators';
export class CartItemListComponent {
    constructor(activeCartService, selectiveCartService, featureConfigService, userIdService, multiCartService) {
        var _a;
        this.activeCartService = activeCartService;
        this.selectiveCartService = selectiveCartService;
        this.featureConfigService = featureConfigService;
        this.userIdService = userIdService;
        this.multiCartService = multiCartService;
        this.subscription = new Subscription();
        this.readonly = false;
        this.hasHeader = true;
        this.options = {
            isSaveForLater: false,
            optionalBtn: null,
        };
        this._items = [];
        this.form = ((_a = this.featureConfigService) === null || _a === void 0 ? void 0 : _a.isLevel('3.1')) ? new FormGroup({})
            : undefined;
        this.promotionLocation = PromotionLocation.ActiveCart;
    }
    set items(items) {
        this.resolveItems(items);
        this.createForm();
    }
    get items() {
        return this._items;
    }
    set setLoading(value) {
        if (!this.readonly) {
            // Whenever the cart is loading, we disable the complete form
            // to avoid any user interaction with the cart.
            value
                ? this.form.disable({ emitEvent: false })
                : this.form.enable({ emitEvent: false });
        }
    }
    ngOnInit() {
        var _a;
        this.subscription.add((_a = this.userIdService) === null || _a === void 0 ? void 0 : _a.getUserId().subscribe((userId) => (this.userId = userId)));
    }
    /**
     * Resolves items passed to component input and updates 'items' field
     */
    resolveItems(items) {
        var _a, _b;
        if (!items) {
            this._items = [];
            return;
        }
        // The items we're getting from the input do not have a consistent model.
        // In case of a `consignmentEntry`, we need to normalize the data from the orderEntry.
        if (items.every((item) => item.hasOwnProperty('orderEntry'))) {
            this._items = items.map((consignmentEntry) => {
                const entry = Object.assign({}, consignmentEntry.orderEntry);
                entry.quantity = consignmentEntry.quantity;
                return entry;
            });
        }
        else {
            // We'd like to avoid the unnecessary re-renders of unchanged cart items after the data reload.
            // OCC cart entries don't have any unique identifier that we could use in Angular `trackBy`.
            // So we update each array element to the new object only when it's any different to the previous one.
            if ((_a = this.featureConfigService) === null || _a === void 0 ? void 0 : _a.isLevel('3.1')) {
                for (let i = 0; i < Math.max(items.length, this._items.length); i++) {
                    // Checking if previous item is different than new one
                    if (JSON.stringify((_b = this._items) === null || _b === void 0 ? void 0 : _b[i]) !== JSON.stringify(items[i])) {
                        // Removing obsolete item's form control
                        if (this._items[i] && this.form) {
                            this.form.removeControl(this.getControlName(this._items[i]));
                        }
                        // If given index does not exist in new items list, remove old element on this position. Otherwise, update array element with new item value.
                        if (!items[i]) {
                            this._items.splice(i, 1);
                        }
                        else {
                            this._items[i] = items[i];
                        }
                    }
                }
            }
            else {
                this._items = items;
            }
        }
    }
    /**
     * Creates form models for list items
     */
    createForm() {
        var _a;
        if (!((_a = this.featureConfigService) === null || _a === void 0 ? void 0 : _a.isLevel('3.1'))) {
            this.form = new FormGroup({});
        }
        this._items.forEach((item) => {
            const controlName = this.getControlName(item);
            const group = new FormGroup({
                entryNumber: new FormControl(item.entryNumber),
                quantity: new FormControl(item.quantity, { updateOn: 'blur' }),
            });
            this.form.addControl(controlName, group);
            // If we disable form group before adding, disabled status will reset
            // Which forces us to disable control after including to form object
            if (!item.updateable || this.readonly) {
                this.form.controls[controlName].disable();
            }
        });
    }
    getControlName(item) {
        return item.entryNumber.toString();
    }
    removeEntry(item) {
        var _a;
        if (this.selectiveCartService && this.options.isSaveForLater) {
            this.selectiveCartService.removeEntry(item);
        }
        else if (this.cartId && this.userId) {
            (_a = this.multiCartService) === null || _a === void 0 ? void 0 : _a.removeEntry(this.userId, this.cartId, item.entryNumber);
        }
        else {
            this.activeCartService.removeEntry(item);
        }
        delete this.form.controls[this.getControlName(item)];
    }
    getControl(item) {
        return this.form.get(this.getControlName(item)).valueChanges.pipe(
        // eslint-disable-next-line import/no-deprecated
        startWith(null), tap((value) => {
            var _a;
            if (item.updateable && value) {
                if (this.selectiveCartService && this.options.isSaveForLater) {
                    this.selectiveCartService.updateEntry(value.entryNumber, value.quantity);
                }
                else if (this.cartId && this.userId) {
                    (_a = this.multiCartService) === null || _a === void 0 ? void 0 : _a.updateEntry(this.userId, this.cartId, value.entryNumber, value.quantity);
                }
                else {
                    this.activeCartService.updateEntry(value.entryNumber, value.quantity);
                }
            }
        }), map(() => this.form.get(this.getControlName(item))));
    }
    ngOnDestroy() {
        var _a;
        (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    }
}
CartItemListComponent.decorators = [
    { type: Component, args: [{
                selector: 'cx-cart-item-list',
                template: "<div *ngIf=\"hasHeader\" class=\"d-none d-md-block d-lg-block d-xl-block\">\n  <div class=\"cx-item-list-header row\">\n    <div class=\"cx-item-list-desc col-md-5 col-lg-5 col-xl-6\">\n      {{ 'cartItems.description' | cxTranslate }}\n    </div>\n    <div class=\"cx-item-list-price col-md-3 col-lg-2 col-xl-2\">\n      {{ 'cartItems.itemPrice' | cxTranslate }}\n    </div>\n    <div class=\"cx-item-list-qty col-md-2 col-lg-3 col-xl-2\">\n      {{ 'cartItems.quantity' | cxTranslate }}\n    </div>\n\n    <ng-container *ngIf=\"options.isSaveForLater; else totalHeader\">\n      <div class=\"cx-item-list-total col-md-2 col-lg-2 col-xl-2\">\n        {{ 'saveForLaterItems.stock' | cxTranslate }}\n      </div>\n    </ng-container>\n  </div>\n</div>\n\n<div class=\"cx-item-list-row\" *ngFor=\"let item of items; let i = index\">\n  <div\n    *ngIf=\"getControl(item) | async as control\"\n    class=\"cx-item-list-items\"\n    [class.is-changed]=\"\n      featureConfigService?.isLevel('3.1')\n        ? control.get('quantity').disabled\n        : control.get('quantity').dirty\n    \"\n  >\n    <cx-cart-item\n      [item]=\"item\"\n      [quantityControl]=\"control.get('quantity')\"\n      [readonly]=\"readonly\"\n      [promotionLocation]=\"promotionLocation\"\n      [options]=\"options\"\n    >\n    </cx-cart-item>\n  </div>\n</div>\n\n<ng-template #totalHeader>\n  <div class=\"cx-item-list-total col-md-2 col-lg-2 col-xl-2\">\n    {{ 'cartItems.total' | cxTranslate }}\n  </div>\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
CartItemListComponent.ctorParameters = () => [
    { type: ActiveCartService },
    { type: SelectiveCartService },
    { type: FeatureConfigService },
    { type: UserIdService },
    { type: MultiCartService }
];
CartItemListComponent.propDecorators = {
    readonly: [{ type: Input }],
    hasHeader: [{ type: Input }],
    options: [{ type: Input }],
    cartId: [{ type: Input }],
    items: [{ type: Input, args: ['items',] }],
    promotionLocation: [{ type: Input }],
    setLoading: [{ type: Input, args: ['cartIsLoading',] }]
};
//# sourceMappingURL=data:application/json;base64,