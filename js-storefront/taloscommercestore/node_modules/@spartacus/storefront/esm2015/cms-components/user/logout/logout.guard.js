import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { AuthRedirectService, AuthService, CmsService, PageType, ProtectedRoutesService, SemanticPathService, } from '@spartacus/core';
import { from } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "@angular/router";
/**
 * Guards the _logout_ route.
 *
 * Takes care of routing the user to a logout page (if available) or redirects to
 * the homepage. If the homepage is protected, the user is redirected
 * to the login route instead.
 */
export class LogoutGuard {
    constructor(auth, cms, semanticPathService, protectedRoutes, router, 
    // TODO(#11380): Make service required
    authRedirectService) {
        this.auth = auth;
        this.cms = cms;
        this.semanticPathService = semanticPathService;
        this.protectedRoutes = protectedRoutes;
        this.router = router;
        this.authRedirectService = authRedirectService;
    }
    canActivate() {
        var _a;
        // TODO(#11380): Remove the optional chaining
        // Logout route should never be remembered as a redirect url after login (that would cause logout right after login).
        (_a = this.authRedirectService) === null || _a === void 0 ? void 0 : _a.reportNotAuthGuard();
        /**
         * First we want to complete logout process before redirecting to logout page
         * We want to avoid errors like `token is no longer valid`
         */
        return from(this.logout()).pipe(switchMap(() => {
            return this.cms
                .hasPage({
                id: this.semanticPathService.get('logout'),
                type: PageType.CONTENT_PAGE,
            })
                .pipe(map((hasPage) => {
                if (!hasPage) {
                    return this.getRedirectUrl();
                }
                // TODO(#9385): Use CMS page guard here.
                return hasPage;
            }));
        }));
    }
    logout() {
        return this.auth.coreLogout();
    }
    /**
     * Whenever there is no specific "logout" page configured in the CMS,
     * we redirect after the user is logged out.
     *
     * The user gets redirected to the homepage, unless the homepage is protected
     * (in case of a closed shop). We'll redirect to the login page instead.
     */
    getRedirectUrl() {
        const cxRoute = this.protectedRoutes.shouldProtect ? 'login' : 'home';
        return this.router.parseUrl(this.semanticPathService.get(cxRoute));
    }
}
LogoutGuard.ɵprov = i0.ɵɵdefineInjectable({ factory: function LogoutGuard_Factory() { return new LogoutGuard(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i1.CmsService), i0.ɵɵinject(i1.SemanticPathService), i0.ɵɵinject(i1.ProtectedRoutesService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i1.AuthRedirectService)); }, token: LogoutGuard, providedIn: "root" });
LogoutGuard.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
LogoutGuard.ctorParameters = () => [
    { type: AuthService },
    { type: CmsService },
    { type: SemanticPathService },
    { type: ProtectedRoutesService },
    { type: Router },
    { type: AuthRedirectService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nb3V0Lmd1YXJkLmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9wcm9qZWN0cy9zdG9yZWZyb250bGliL3NyYy8iLCJzb3VyY2VzIjpbImNtcy1jb21wb25lbnRzL3VzZXIvbG9nb3V0L2xvZ291dC5ndWFyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBZSxNQUFNLEVBQVcsTUFBTSxpQkFBaUIsQ0FBQztBQUMvRCxPQUFPLEVBQ0wsbUJBQW1CLEVBQ25CLFdBQVcsRUFDWCxVQUFVLEVBQ1YsUUFBUSxFQUNSLHNCQUFzQixFQUN0QixtQkFBbUIsR0FDcEIsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLEVBQUUsSUFBSSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7QUFFaEQ7Ozs7OztHQU1HO0FBSUgsTUFBTSxPQUFPLFdBQVc7SUFDdEIsWUFDWSxJQUFpQixFQUNqQixHQUFlLEVBQ2YsbUJBQXdDLEVBQ3hDLGVBQXVDLEVBQ3ZDLE1BQWM7SUFDeEIsc0NBQXNDO0lBQzVCLG1CQUF5QztRQU56QyxTQUFJLEdBQUosSUFBSSxDQUFhO1FBQ2pCLFFBQUcsR0FBSCxHQUFHLENBQVk7UUFDZix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBQ3hDLG9CQUFlLEdBQWYsZUFBZSxDQUF3QjtRQUN2QyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBRWQsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFzQjtJQUNsRCxDQUFDO0lBRUosV0FBVzs7UUFDVCw2Q0FBNkM7UUFDN0MscUhBQXFIO1FBQ3JILE1BQUEsSUFBSSxDQUFDLG1CQUFtQiwwQ0FBRSxrQkFBa0IsR0FBRztRQUMvQzs7O1dBR0c7UUFDSCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQzdCLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDYixPQUFPLElBQUksQ0FBQyxHQUFHO2lCQUNaLE9BQU8sQ0FBQztnQkFDUCxFQUFFLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUM7Z0JBQzFDLElBQUksRUFBRSxRQUFRLENBQUMsWUFBWTthQUM1QixDQUFDO2lCQUNELElBQUksQ0FDSCxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDZCxJQUFJLENBQUMsT0FBTyxFQUFFO29CQUNaLE9BQU8sSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO2lCQUM5QjtnQkFDRCx3Q0FBd0M7Z0JBQ3hDLE9BQU8sT0FBTyxDQUFDO1lBQ2pCLENBQUMsQ0FBQyxDQUNILENBQUM7UUFDTixDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVTLE1BQU07UUFDZCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNPLGNBQWM7UUFDdEIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQ3RFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7Ozs7WUF4REYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7WUFsQkMsV0FBVztZQUNYLFVBQVU7WUFHVixtQkFBbUI7WUFEbkIsc0JBQXNCO1lBTkYsTUFBTTtZQUUxQixtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDYW5BY3RpdmF0ZSwgUm91dGVyLCBVcmxUcmVlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7XG4gIEF1dGhSZWRpcmVjdFNlcnZpY2UsXG4gIEF1dGhTZXJ2aWNlLFxuICBDbXNTZXJ2aWNlLFxuICBQYWdlVHlwZSxcbiAgUHJvdGVjdGVkUm91dGVzU2VydmljZSxcbiAgU2VtYW50aWNQYXRoU2VydmljZSxcbn0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IGZyb20sIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG4vKipcbiAqIEd1YXJkcyB0aGUgX2xvZ291dF8gcm91dGUuXG4gKlxuICogVGFrZXMgY2FyZSBvZiByb3V0aW5nIHRoZSB1c2VyIHRvIGEgbG9nb3V0IHBhZ2UgKGlmIGF2YWlsYWJsZSkgb3IgcmVkaXJlY3RzIHRvXG4gKiB0aGUgaG9tZXBhZ2UuIElmIHRoZSBob21lcGFnZSBpcyBwcm90ZWN0ZWQsIHRoZSB1c2VyIGlzIHJlZGlyZWN0ZWRcbiAqIHRvIHRoZSBsb2dpbiByb3V0ZSBpbnN0ZWFkLlxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgTG9nb3V0R3VhcmQgaW1wbGVtZW50cyBDYW5BY3RpdmF0ZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBhdXRoOiBBdXRoU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgY21zOiBDbXNTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBzZW1hbnRpY1BhdGhTZXJ2aWNlOiBTZW1hbnRpY1BhdGhTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBwcm90ZWN0ZWRSb3V0ZXM6IFByb3RlY3RlZFJvdXRlc1NlcnZpY2UsXG4gICAgcHJvdGVjdGVkIHJvdXRlcjogUm91dGVyLFxuICAgIC8vIFRPRE8oIzExMzgwKTogTWFrZSBzZXJ2aWNlIHJlcXVpcmVkXG4gICAgcHJvdGVjdGVkIGF1dGhSZWRpcmVjdFNlcnZpY2U/OiBBdXRoUmVkaXJlY3RTZXJ2aWNlXG4gICkge31cblxuICBjYW5BY3RpdmF0ZSgpOiBPYnNlcnZhYmxlPGJvb2xlYW4gfCBVcmxUcmVlPiB7XG4gICAgLy8gVE9ETygjMTEzODApOiBSZW1vdmUgdGhlIG9wdGlvbmFsIGNoYWluaW5nXG4gICAgLy8gTG9nb3V0IHJvdXRlIHNob3VsZCBuZXZlciBiZSByZW1lbWJlcmVkIGFzIGEgcmVkaXJlY3QgdXJsIGFmdGVyIGxvZ2luICh0aGF0IHdvdWxkIGNhdXNlIGxvZ291dCByaWdodCBhZnRlciBsb2dpbikuXG4gICAgdGhpcy5hdXRoUmVkaXJlY3RTZXJ2aWNlPy5yZXBvcnROb3RBdXRoR3VhcmQoKTtcbiAgICAvKipcbiAgICAgKiBGaXJzdCB3ZSB3YW50IHRvIGNvbXBsZXRlIGxvZ291dCBwcm9jZXNzIGJlZm9yZSByZWRpcmVjdGluZyB0byBsb2dvdXQgcGFnZVxuICAgICAqIFdlIHdhbnQgdG8gYXZvaWQgZXJyb3JzIGxpa2UgYHRva2VuIGlzIG5vIGxvbmdlciB2YWxpZGBcbiAgICAgKi9cbiAgICByZXR1cm4gZnJvbSh0aGlzLmxvZ291dCgpKS5waXBlKFxuICAgICAgc3dpdGNoTWFwKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY21zXG4gICAgICAgICAgLmhhc1BhZ2Uoe1xuICAgICAgICAgICAgaWQ6IHRoaXMuc2VtYW50aWNQYXRoU2VydmljZS5nZXQoJ2xvZ291dCcpLFxuICAgICAgICAgICAgdHlwZTogUGFnZVR5cGUuQ09OVEVOVF9QQUdFLFxuICAgICAgICAgIH0pXG4gICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICBtYXAoKGhhc1BhZ2UpID0+IHtcbiAgICAgICAgICAgICAgaWYgKCFoYXNQYWdlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UmVkaXJlY3RVcmwoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyBUT0RPKCM5Mzg1KTogVXNlIENNUyBwYWdlIGd1YXJkIGhlcmUuXG4gICAgICAgICAgICAgIHJldHVybiBoYXNQYWdlO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICApO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgcHJvdGVjdGVkIGxvZ291dCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmF1dGguY29yZUxvZ291dCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdoZW5ldmVyIHRoZXJlIGlzIG5vIHNwZWNpZmljIFwibG9nb3V0XCIgcGFnZSBjb25maWd1cmVkIGluIHRoZSBDTVMsXG4gICAqIHdlIHJlZGlyZWN0IGFmdGVyIHRoZSB1c2VyIGlzIGxvZ2dlZCBvdXQuXG4gICAqXG4gICAqIFRoZSB1c2VyIGdldHMgcmVkaXJlY3RlZCB0byB0aGUgaG9tZXBhZ2UsIHVubGVzcyB0aGUgaG9tZXBhZ2UgaXMgcHJvdGVjdGVkXG4gICAqIChpbiBjYXNlIG9mIGEgY2xvc2VkIHNob3ApLiBXZSdsbCByZWRpcmVjdCB0byB0aGUgbG9naW4gcGFnZSBpbnN0ZWFkLlxuICAgKi9cbiAgcHJvdGVjdGVkIGdldFJlZGlyZWN0VXJsKCk6IFVybFRyZWUge1xuICAgIGNvbnN0IGN4Um91dGUgPSB0aGlzLnByb3RlY3RlZFJvdXRlcy5zaG91bGRQcm90ZWN0ID8gJ2xvZ2luJyA6ICdob21lJztcbiAgICByZXR1cm4gdGhpcy5yb3V0ZXIucGFyc2VVcmwodGhpcy5zZW1hbnRpY1BhdGhTZXJ2aWNlLmdldChjeFJvdXRlKSk7XG4gIH1cbn1cbiJdfQ==