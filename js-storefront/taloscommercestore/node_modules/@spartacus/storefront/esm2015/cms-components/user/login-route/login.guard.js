import { Injectable } from '@angular/core';
import { AuthConfigService, AuthRedirectService, AuthService, OAuthFlow, } from '@spartacus/core';
import { EMPTY, of } from 'rxjs';
import { switchMap, take } from 'rxjs/operators';
import { CmsPageGuard } from '../../../cms-structure/guards/cms-page.guard';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "../../../cms-structure/guards/cms-page.guard";
/**
 * Guards the _login_ route.
 *
 * Takes care of routing the user to a auth server login page (if implicit or code flow is used).
 * In case of Resource Owner Password Flow just renders the page as normal CMS page.
 */
export class LoginGuard {
    constructor(authService, authRedirectService, authConfigService, cmsPageGuard) {
        this.authService = authService;
        this.authRedirectService = authRedirectService;
        this.authConfigService = authConfigService;
        this.cmsPageGuard = cmsPageGuard;
    }
    canActivate(route, state) {
        return this.authService.isUserLoggedIn().pipe(take(1), switchMap((isUserLoggedIn) => {
            if (this.authConfigService.getOAuthFlow() ===
                OAuthFlow.ResourceOwnerPasswordFlow ||
                isUserLoggedIn) {
                return this.cmsPageGuard.canActivate(route, state);
            }
            else {
                // Remember the previous url, so we can redirect user to that page after OAuth server callback
                this.authRedirectService.reportNotAuthGuard();
                // This method can trigger redirect to OAuth server that's why we don't return anything in this case
                const redirected = this.authService.loginWithRedirect();
                if (!redirected) {
                    return of(false);
                }
                return EMPTY;
            }
        }));
    }
}
LoginGuard.ɵprov = i0.ɵɵdefineInjectable({ factory: function LoginGuard_Factory() { return new LoginGuard(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i1.AuthRedirectService), i0.ɵɵinject(i1.AuthConfigService), i0.ɵɵinject(i2.CmsPageGuard)); }, token: LoginGuard, providedIn: "root" });
LoginGuard.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
LoginGuard.ctorParameters = () => [
    { type: AuthService },
    { type: AuthRedirectService },
    { type: AuthConfigService },
    { type: CmsPageGuard }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4uZ3VhcmQuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvUGF0cnlrL0Rlc2t0b3Avc3BhcnRhY3VzL3Byb2plY3RzL3N0b3JlZnJvbnRsaWIvc3JjLyIsInNvdXJjZXMiOlsiY21zLWNvbXBvbmVudHMvdXNlci9sb2dpbi1yb3V0ZS9sb2dpbi5ndWFyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBTzNDLE9BQU8sRUFDTCxpQkFBaUIsRUFDakIsbUJBQW1CLEVBQ25CLFdBQVcsRUFDWCxTQUFTLEdBQ1YsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLEVBQUUsS0FBSyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM3QyxPQUFPLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQzs7OztBQUU1RTs7Ozs7R0FLRztBQUlILE1BQU0sT0FBTyxVQUFVO0lBQ3JCLFlBQ1ksV0FBd0IsRUFDeEIsbUJBQXdDLEVBQ3hDLGlCQUFvQyxFQUNwQyxZQUEwQjtRQUgxQixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN4Qix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBQ3hDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFDcEMsaUJBQVksR0FBWixZQUFZLENBQWM7SUFDbkMsQ0FBQztJQUVKLFdBQVcsQ0FDVCxLQUE2QixFQUM3QixLQUEwQjtRQUUxQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLENBQUMsSUFBSSxDQUMzQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ1AsU0FBUyxDQUFDLENBQUMsY0FBYyxFQUFFLEVBQUU7WUFDM0IsSUFDRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFO2dCQUNuQyxTQUFTLENBQUMseUJBQXlCO2dCQUNyQyxjQUFjLEVBQ2Q7Z0JBQ0EsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDcEQ7aUJBQU07Z0JBQ0wsOEZBQThGO2dCQUM5RixJQUFJLENBQUMsbUJBQW1CLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztnQkFDOUMsb0dBQW9HO2dCQUNwRyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGlCQUFpQixFQUFFLENBQUM7Z0JBQ3hELElBQUksQ0FBQyxVQUFVLEVBQUU7b0JBQ2YsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ2xCO2dCQUNELE9BQU8sS0FBSyxDQUFDO2FBQ2Q7UUFDSCxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQzs7OztZQXBDRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7OztZQWZDLFdBQVc7WUFEWCxtQkFBbUI7WUFEbkIsaUJBQWlCO1lBT1YsWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIEFjdGl2YXRlZFJvdXRlU25hcHNob3QsXG4gIENhbkFjdGl2YXRlLFxuICBSb3V0ZXJTdGF0ZVNuYXBzaG90LFxuICBVcmxUcmVlLFxufSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHtcbiAgQXV0aENvbmZpZ1NlcnZpY2UsXG4gIEF1dGhSZWRpcmVjdFNlcnZpY2UsXG4gIEF1dGhTZXJ2aWNlLFxuICBPQXV0aEZsb3csXG59IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBFTVBUWSwgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHN3aXRjaE1hcCwgdGFrZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IENtc1BhZ2VHdWFyZCB9IGZyb20gJy4uLy4uLy4uL2Ntcy1zdHJ1Y3R1cmUvZ3VhcmRzL2Ntcy1wYWdlLmd1YXJkJztcblxuLyoqXG4gKiBHdWFyZHMgdGhlIF9sb2dpbl8gcm91dGUuXG4gKlxuICogVGFrZXMgY2FyZSBvZiByb3V0aW5nIHRoZSB1c2VyIHRvIGEgYXV0aCBzZXJ2ZXIgbG9naW4gcGFnZSAoaWYgaW1wbGljaXQgb3IgY29kZSBmbG93IGlzIHVzZWQpLlxuICogSW4gY2FzZSBvZiBSZXNvdXJjZSBPd25lciBQYXNzd29yZCBGbG93IGp1c3QgcmVuZGVycyB0aGUgcGFnZSBhcyBub3JtYWwgQ01TIHBhZ2UuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBMb2dpbkd1YXJkIGltcGxlbWVudHMgQ2FuQWN0aXZhdGUge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgYXV0aFNlcnZpY2U6IEF1dGhTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBhdXRoUmVkaXJlY3RTZXJ2aWNlOiBBdXRoUmVkaXJlY3RTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBhdXRoQ29uZmlnU2VydmljZTogQXV0aENvbmZpZ1NlcnZpY2UsXG4gICAgcHJvdGVjdGVkIGNtc1BhZ2VHdWFyZDogQ21zUGFnZUd1YXJkXG4gICkge31cblxuICBjYW5BY3RpdmF0ZShcbiAgICByb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCxcbiAgICBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdFxuICApOiBPYnNlcnZhYmxlPGJvb2xlYW4gfCBVcmxUcmVlPiB7XG4gICAgcmV0dXJuIHRoaXMuYXV0aFNlcnZpY2UuaXNVc2VyTG9nZ2VkSW4oKS5waXBlKFxuICAgICAgdGFrZSgxKSxcbiAgICAgIHN3aXRjaE1hcCgoaXNVc2VyTG9nZ2VkSW4pID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMuYXV0aENvbmZpZ1NlcnZpY2UuZ2V0T0F1dGhGbG93KCkgPT09XG4gICAgICAgICAgICBPQXV0aEZsb3cuUmVzb3VyY2VPd25lclBhc3N3b3JkRmxvdyB8fFxuICAgICAgICAgIGlzVXNlckxvZ2dlZEluXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmNtc1BhZ2VHdWFyZC5jYW5BY3RpdmF0ZShyb3V0ZSwgc3RhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFJlbWVtYmVyIHRoZSBwcmV2aW91cyB1cmwsIHNvIHdlIGNhbiByZWRpcmVjdCB1c2VyIHRvIHRoYXQgcGFnZSBhZnRlciBPQXV0aCBzZXJ2ZXIgY2FsbGJhY2tcbiAgICAgICAgICB0aGlzLmF1dGhSZWRpcmVjdFNlcnZpY2UucmVwb3J0Tm90QXV0aEd1YXJkKCk7XG4gICAgICAgICAgLy8gVGhpcyBtZXRob2QgY2FuIHRyaWdnZXIgcmVkaXJlY3QgdG8gT0F1dGggc2VydmVyIHRoYXQncyB3aHkgd2UgZG9uJ3QgcmV0dXJuIGFueXRoaW5nIGluIHRoaXMgY2FzZVxuICAgICAgICAgIGNvbnN0IHJlZGlyZWN0ZWQgPSB0aGlzLmF1dGhTZXJ2aWNlLmxvZ2luV2l0aFJlZGlyZWN0KCk7XG4gICAgICAgICAgaWYgKCFyZWRpcmVjdGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gb2YoZmFsc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gRU1QVFk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuIl19