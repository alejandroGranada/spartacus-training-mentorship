import { ChangeDetectionStrategy, Component, } from '@angular/core';
import { CheckoutService, DaysOfWeek, ORDER_TYPE, recurrencePeriod, } from '@spartacus/core';
import { Subscription } from 'rxjs';
import { ICON_TYPE } from '../../../misc/icon/icon.model';
import { CheckoutReplenishmentFormService } from '../../services/checkout-replenishment-form-service';
export class ScheduleReplenishmentOrderComponent {
    constructor(checkoutService, checkoutReplenishmentFormService) {
        this.checkoutService = checkoutService;
        this.checkoutReplenishmentFormService = checkoutReplenishmentFormService;
        this.subscription = new Subscription();
        this.iconTypes = ICON_TYPE;
        this.orderTypes = ORDER_TYPE;
        this.daysOfWeek = Object.keys(DaysOfWeek).map((key) => DaysOfWeek[key]);
        this.recurrencePeriodType = Object.keys(recurrencePeriod).map((key) => recurrencePeriod[key]);
        this.selectedOrderType$ = this.checkoutService.getCurrentOrderType();
        this.isMonthly = false;
        this.isWeekly = false;
        this.currentDaysOfWeek = [];
    }
    ngOnInit() {
        this.subscription.add(this.checkoutReplenishmentFormService
            .getScheduleReplenishmentFormData()
            .subscribe((data) => {
            this.scheduleReplenishmentFormData = data;
        }));
        this.initConfig();
    }
    changeOrderType(orderType) {
        this.checkoutService.setOrderType(orderType);
    }
    changeNumberOfDays(nDays) {
        this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData(Object.assign(Object.assign({}, this.scheduleReplenishmentFormData), { numberOfDays: nDays }));
    }
    changeNumberOfWeeks(nWeeks) {
        this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData(Object.assign(Object.assign({}, this.scheduleReplenishmentFormData), { numberOfWeeks: nWeeks }));
    }
    changeRecurrencePeriodType(type) {
        this.isWeekly = type === recurrencePeriod.WEEKLY;
        this.isMonthly = type === recurrencePeriod.MONTHLY;
        this.numberOfDays = this.isMonthly
            ? this.createNumberStringArray(31)
            : this.createNumberStringArray(30);
        this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData(Object.assign(Object.assign({}, this.scheduleReplenishmentFormData), { recurrencePeriod: type }));
    }
    changeDayOfTheMonth(dayOfMonth) {
        this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData(Object.assign(Object.assign({}, this.scheduleReplenishmentFormData), { nthDayOfMonth: dayOfMonth }));
    }
    changeReplenishmentStartDate(date) {
        if (Boolean(date)) {
            this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData(Object.assign(Object.assign({}, this.scheduleReplenishmentFormData), { replenishmentStartDate: date }));
        }
    }
    changeRepeatDays(day, isChecked) {
        if (isChecked) {
            this.currentDaysOfWeek = [...this.currentDaysOfWeek];
            this.currentDaysOfWeek.push(day);
            this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData(Object.assign(Object.assign({}, this.scheduleReplenishmentFormData), { daysOfWeek: this.currentDaysOfWeek }));
        }
        else {
            const foundDay = this.currentDaysOfWeek.find((data) => day === data);
            if (!foundDay)
                return;
            const index = this.currentDaysOfWeek.indexOf(foundDay);
            this.currentDaysOfWeek.splice(index, 1);
            this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData(Object.assign(Object.assign({}, this.scheduleReplenishmentFormData), { daysOfWeek: this.currentDaysOfWeek }));
        }
    }
    hasDaysOfWeekChecked(day) {
        return this.currentDaysOfWeek.includes(day);
    }
    initConfig() {
        this.isMonthly =
            this.scheduleReplenishmentFormData.recurrencePeriod ===
                recurrencePeriod.MONTHLY;
        this.isWeekly =
            this.scheduleReplenishmentFormData.recurrencePeriod ===
                recurrencePeriod.WEEKLY;
        this.currentDaysOfWeek = [...this.scheduleReplenishmentFormData.daysOfWeek];
        this.numberOfDays = this.isMonthly
            ? this.createNumberStringArray(31)
            : this.createNumberStringArray(30);
        this.numberOfWeeks = this.createNumberStringArray(12);
        this.currentDate = this.scheduleReplenishmentFormData.replenishmentStartDate;
    }
    createNumberStringArray(n) {
        return Array(n)
            .fill(0)
            .map((_, y) => (y + 1).toString());
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}
ScheduleReplenishmentOrderComponent.decorators = [
    { type: Component, args: [{
                selector: 'cx-schedule-replenishment-order',
                template: "<div class=\"cx-order-type-card\">\n  <div class=\"cx-label-container\">\n    <h5 class=\"cx-order-replenishment-header\">\n      {{ 'checkoutReview.autoReplenishOrder' | cxTranslate }}\n    </h5>\n    <cx-icon [type]=\"iconTypes.CLOCK\"></cx-icon>\n  </div>\n  <div\n    class=\"cx-order-type-container form-check\"\n    *ngFor=\"let type of orderTypes | keyvalue\"\n  >\n    <input\n      id=\"orderType-{{ type.value }}\"\n      class=\"scaled-input form-check-input\"\n      role=\"radio\"\n      type=\"radio\"\n      formControlName=\"orderType\"\n      aria-checked=\"true\"\n      (change)=\"changeOrderType(type.value)\"\n      [value]=\"type.value\"\n      [checked]=\"type.value == (selectedOrderType$ | async)\"\n    />\n    <label\n      class=\"order-type-label form-check-label form-radio-label\"\n      for=\"orderType-{{ type.value }}\"\n    >\n      <div class=\"order-type\">\n        {{ 'checkoutReview.orderType' | cxTranslate: { context: type.value } }}\n      </div>\n    </label>\n  </div>\n  <ng-container\n    *ngIf=\"\n      scheduleReplenishmentFormData &&\n      (selectedOrderType$ | async) === orderTypes.SCHEDULE_REPLENISHMENT_ORDER\n    \"\n  >\n    <div class=\"cx-replenishment-form-data-container\">\n      <div *ngIf=\"!isMonthly\" class=\"cx-days\">\n        <span class=\"form-data-label\">{{\n          'checkoutReview.every' | cxTranslate\n        }}</span>\n        <ng-container *ngIf=\"isWeekly; else isDaily\">\n          <select\n            class=\"form-control\"\n            (change)=\"changeNumberOfWeeks($event.target.value)\"\n          >\n            <option\n              *ngFor=\"let nWeeks of numberOfWeeks\"\n              [value]=\"nWeeks\"\n              [selected]=\"\n                nWeeks === scheduleReplenishmentFormData.numberOfWeeks\n              \"\n            >\n              {{ nWeeks }}\n            </option>\n          </select>\n        </ng-container>\n        <ng-template #isDaily>\n          <select\n            class=\"form-control\"\n            (change)=\"changeNumberOfDays($event.target.value)\"\n          >\n            <option\n              *ngFor=\"let nDays of numberOfDays\"\n              [value]=\"nDays\"\n              [selected]=\"nDays === scheduleReplenishmentFormData.numberOfDays\"\n            >\n              {{ nDays }}\n            </option>\n          </select>\n        </ng-template>\n      </div>\n      <div class=\"cx-month\">\n        <span *ngIf=\"isMonthly\" class=\"form-data-label\">{{\n          'checkoutReview.every' | cxTranslate\n        }}</span>\n        <select\n          class=\"form-control\"\n          (change)=\"changeRecurrencePeriodType($event.target.value)\"\n        >\n          <option\n            *ngFor=\"let type of recurrencePeriodType\"\n            [value]=\"type\"\n            [selected]=\"type === scheduleReplenishmentFormData.recurrencePeriod\"\n          >\n            {{\n              'checkoutReview.recurrencePeriodType'\n                | cxTranslate: { context: type }\n            }}\n          </option>\n        </select>\n      </div>\n      <div *ngIf=\"isMonthly\" class=\"cx-dayMonth\">\n        <span class=\"form-data-label\">{{\n          'checkoutReview.dayOfMonth' | cxTranslate\n        }}</span>\n        <div class=\"cx-day-of-month\">\n          <select\n            class=\"form-control\"\n            (change)=\"changeDayOfTheMonth($event.target.value)\"\n          >\n            <option\n              *ngFor=\"let nDays of numberOfDays\"\n              [value]=\"nDays\"\n              [selected]=\"nDays === scheduleReplenishmentFormData.nthDayOfMonth\"\n            >\n              {{ nDays }}\n            </option>\n          </select>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"cx-replenishment-form-data-container\">\n      <span class=\"form-data-label\">{{\n        'checkoutReview.startOn' | cxTranslate\n      }}</span>\n      <div class=\"cx-replenishment-date\">\n        <input\n          type=\"date\"\n          placeholder=\"yyyy-mm-dd\"\n          [value]=\"currentDate\"\n          (change)=\"changeReplenishmentStartDate($event.target.value)\"\n        />\n      </div>\n    </div>\n\n    <div\n      *ngIf=\"isWeekly\"\n      class=\"cx-replenishment-form-data-container cx-repeat-days-container\"\n    >\n      <span class=\"cx-repeat-days form-data-label\">{{\n        'checkoutReview.repeatOnDays' | cxTranslate\n      }}</span>\n      <div *ngFor=\"let day of daysOfWeek\" class=\"form-check\">\n        <label for=\"day-{{ day }}\" class=\"cx-week-day\">{{\n          day | titlecase\n        }}</label\n        ><input\n          id=\"day-{{ day }}\"\n          type=\"checkbox\"\n          class=\"form-check-input\"\n          [checked]=\"hasDaysOfWeekChecked(day)\"\n          (change)=\"changeRepeatDays(day, $event.target.checked)\"\n        />\n      </div>\n    </div>\n  </ng-container>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
ScheduleReplenishmentOrderComponent.ctorParameters = () => [
    { type: CheckoutService },
    { type: CheckoutReplenishmentFormService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGUtcmVwbGVuaXNobWVudC1vcmRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvUGF0cnlrL0Rlc2t0b3Avc3BhcnRhY3VzL3Byb2plY3RzL3N0b3JlZnJvbnRsaWIvc3JjLyIsInNvdXJjZXMiOlsiY21zLWNvbXBvbmVudHMvY2hlY2tvdXQvY29tcG9uZW50cy9zY2hlZHVsZS1yZXBsZW5pc2htZW50LW9yZGVyL3NjaGVkdWxlLXJlcGxlbmlzaG1lbnQtb3JkZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsU0FBUyxHQUdWLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFDTCxlQUFlLEVBQ2YsVUFBVSxFQUNWLFVBQVUsRUFDVixnQkFBZ0IsR0FFakIsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLEVBQWMsWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQU90RyxNQUFNLE9BQU8sbUNBQW1DO0lBb0I5QyxZQUNZLGVBQWdDLEVBQ2hDLGdDQUFrRTtRQURsRSxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDaEMscUNBQWdDLEdBQWhDLGdDQUFnQyxDQUFrQztRQXJCdEUsaUJBQVksR0FBaUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUV4RCxjQUFTLEdBQUcsU0FBUyxDQUFDO1FBQ3RCLGVBQVUsR0FBRyxVQUFVLENBQUM7UUFDeEIsZUFBVSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNuRSx5QkFBb0IsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFD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SUFBSSxDQUFDLDZCQUE2QixDQUFDLHNCQUFzQixDQUFDO0lBQy9FLENBQUM7SUFFTyx1QkFBdUIsQ0FBQyxDQUFTO1FBQ3ZDLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQzthQUNaLElBQUksQ0FBQyxDQUFDLENBQUM7YUFDUCxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsQyxDQUFDOzs7WUFuSkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxpQ0FBaUM7Z0JBQzNDLCswSkFBNEQ7Z0JBQzVELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2hEOzs7WUFkQyxlQUFlO1lBUVIsZ0NBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgQ2hlY2tvdXRTZXJ2aWNlLFxuICBEYXlzT2ZXZWVrLFxuICBPUkRFUl9UWVBFLFxuICByZWN1cnJlbmNlUGVyaW9kLFxuICBTY2hlZHVsZVJlcGxlbmlzaG1lbnRGb3JtLFxufSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBJQ09OX1RZUEUgfSBmcm9tICcuLi8uLi8uLi9taXNjL2ljb24vaWNvbi5tb2RlbCc7XG5pbXBvcnQgeyBDaGVja291dFJlcGxlbmlzaG1lbnRGb3JtU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2NoZWNrb3V0LXJlcGxlbmlzaG1lbnQtZm9ybS1zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY3gtc2NoZWR1bGUtcmVwbGVuaXNobWVudC1vcmRlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9zY2hlZHVsZS1yZXBsZW5pc2htZW50LW9yZGVyLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIFNjaGVkdWxlUmVwbGVuaXNobWVudE9yZGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBwcml2YXRlIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuXG4gIGljb25UeXBlcyA9IElDT05fVFlQRTtcbiAgb3JkZXJUeXBlcyA9IE9SREVSX1RZUEU7XG4gIGRheXNPZldlZWsgPSBPYmplY3Qua2V5cyhEYXlzT2ZXZWVrKS5tYXAoKGtleSkgPT4gRGF5c09mV2Vla1trZXldKTtcbiAgcmVjdXJyZW5jZVBlcmlvZFR5cGUgPSBPYmplY3Qua2V5cyhyZWN1cnJlbmNlUGVyaW9kKS5tYXAoXG4gICAgKGtleSkgPT4gcmVjdXJyZW5jZVBlcmlvZFtrZXldXG4gICk7XG5cbiAgc2VsZWN0ZWRPcmRlclR5cGUkOiBPYnNlcnZhYmxlPE9SREVSX1RZUEU+ID0gdGhpcy5jaGVja291dFNlcnZpY2UuZ2V0Q3VycmVudE9yZGVyVHlwZSgpO1xuXG4gIGlzTW9udGhseTogQm9vbGVhbiA9IGZhbHNlO1xuICBpc1dlZWtseTogQm9vbGVhbiA9IGZhbHNlO1xuICBjdXJyZW50RGF5c09mV2VlazogRGF5c09mV2Vla1tdID0gW107XG4gIG51bWJlck9mRGF5czogc3RyaW5nW107XG4gIG51bWJlck9mV2Vla3M6IHN0cmluZ1tdO1xuICBjdXJyZW50RGF0ZTogc3RyaW5nO1xuICBzY2hlZHVsZVJlcGxlbmlzaG1lbnRGb3JtRGF0YTogU2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgY2hlY2tvdXRTZXJ2aWNlOiBDaGVja291dFNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIGNoZWNrb3V0UmVwbGVuaXNobWVudEZvcm1TZXJ2aWNlOiBDaGVja291dFJlcGxlbmlzaG1lbnRGb3JtU2VydmljZVxuICApIHt9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb24uYWRkKFxuICAgICAgdGhpcy5jaGVja291dFJlcGxlbmlzaG1lbnRGb3JtU2VydmljZVxuICAgICAgICAuZ2V0U2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybURhdGEoKVxuICAgICAgICAuc3Vic2NyaWJlKChkYXRhKSA9PiB7XG4gICAgICAgICAgdGhpcy5zY2hlZHVsZVJlcGxlbmlzaG1lbnRGb3JtRGF0YSA9IGRhdGE7XG4gICAgICAgIH0pXG4gICAgKTtcblxuICAgIHRoaXMuaW5pdENvbmZpZygpO1xuICB9XG5cbiAgY2hhbmdlT3JkZXJUeXBlKG9yZGVyVHlwZTogT1JERVJfVFlQRSk6IHZvaWQge1xuICAgIHRoaXMuY2hlY2tvdXRTZXJ2aWNlLnNldE9yZGVyVHlwZShvcmRlclR5cGUpO1xuICB9XG5cbiAgY2hhbmdlTnVtYmVyT2ZEYXlzKG5EYXlzOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmNoZWNrb3V0UmVwbGVuaXNobWVudEZvcm1TZXJ2aWNlLnNldFNjaGVkdWxlUmVwbGVuaXNobWVudEZvcm1EYXRhKHtcbiAgICAgIC4uLnRoaXMuc2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybURhdGEsXG4gICAgICBudW1iZXJPZkRheXM6IG5EYXlzLFxuICAgIH0pO1xuICB9XG5cbiAgY2hhbmdlTnVtYmVyT2ZXZWVrcyhuV2Vla3M6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuY2hlY2tvdXRSZXBsZW5pc2htZW50Rm9ybVNlcnZpY2Uuc2V0U2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybURhdGEoe1xuICAgICAgLi4udGhpcy5zY2hlZHVsZVJlcGxlbmlzaG1lbnRGb3JtRGF0YSxcbiAgICAgIG51bWJlck9mV2Vla3M6IG5XZWVrcyxcbiAgICB9KTtcbiAgfVxuXG4gIGNoYW5nZVJlY3VycmVuY2VQZXJpb2RUeXBlKHR5cGU6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuaXNXZWVrbHkgPSB0eXBlID09PSByZWN1cnJlbmNlUGVyaW9kLldFRUtMWTtcbiAgICB0aGlzLmlzTW9udGhseSA9IHR5cGUgPT09IHJlY3VycmVuY2VQZXJpb2QuTU9OVEhMWTtcblxuICAgIHRoaXMubnVtYmVyT2ZEYXlzID0gdGhpcy5pc01vbnRobHlcbiAgICAgID8gdGhpcy5jcmVhdGVOdW1iZXJTdHJpbmdBcnJheSgzMSlcbiAgICAgIDogdGhpcy5jcmVhdGVOdW1iZXJTdHJpbmdBcnJheSgzMCk7XG5cbiAgICB0aGlzLmNoZWNrb3V0UmVwbGVuaXNobWVudEZvcm1TZXJ2aWNlLnNldFNjaGVkdWxlUmVwbGVuaXNobWVudEZvcm1EYXRhKHtcbiAgICAgIC4uLnRoaXMuc2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybURhdGEsXG4gICAgICByZWN1cnJlbmNlUGVyaW9kOiB0eXBlLFxuICAgIH0pO1xuICB9XG5cbiAgY2hhbmdlRGF5T2ZUaGVNb250aChkYXlPZk1vbnRoOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmNoZWNrb3V0UmVwbGVuaXNobWVudEZvcm1TZXJ2aWNlLnNldFNjaGVkdWxlUmVwbGVuaXNobWVudEZvcm1EYXRhKHtcbiAgICAgIC4uLnRoaXMuc2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybURhdGEsXG4gICAgICBudGhEYXlPZk1vbnRoOiBkYXlPZk1vbnRoLFxuICAgIH0pO1xuICB9XG5cbiAgY2hhbmdlUmVwbGVuaXNobWVudFN0YXJ0RGF0ZShkYXRlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAoQm9vbGVhbihkYXRlKSkge1xuICAgICAgdGhpcy5jaGVja291dFJlcGxlbmlzaG1lbnRGb3JtU2VydmljZS5zZXRTY2hlZHVsZVJlcGxlbmlzaG1lbnRGb3JtRGF0YSh7XG4gICAgICAgIC4uLnRoaXMuc2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybURhdGEsXG4gICAgICAgIHJlcGxlbmlzaG1lbnRTdGFydERhdGU6IGRhdGUsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBjaGFuZ2VSZXBlYXREYXlzKGRheTogRGF5c09mV2VlaywgaXNDaGVja2VkOiBib29sZWFuKTogdm9pZCB7XG4gICAgaWYgKGlzQ2hlY2tlZCkge1xuICAgICAgdGhpcy5jdXJyZW50RGF5c09mV2VlayA9IFsuLi50aGlzLmN1cnJlbnREYXlzT2ZXZWVrXTtcblxuICAgICAgdGhpcy5jdXJyZW50RGF5c09mV2Vlay5wdXNoKGRheSk7XG5cbiAgICAgIHRoaXMuY2hlY2tvdXRSZXBsZW5pc2htZW50Rm9ybVNlcnZpY2Uuc2V0U2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybURhdGEoe1xuICAgICAgICAuLi50aGlzLnNjaGVkdWxlUmVwbGVuaXNobWVudEZvcm1EYXRhLFxuICAgICAgICBkYXlzT2ZXZWVrOiB0aGlzLmN1cnJlbnREYXlzT2ZXZWVrLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGZvdW5kRGF5ID0gdGhpcy5jdXJyZW50RGF5c09mV2Vlay5maW5kKChkYXRhKSA9PiBkYXkgPT09IGRhdGEpO1xuXG4gICAgICBpZiAoIWZvdW5kRGF5KSByZXR1cm47XG5cbiAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5jdXJyZW50RGF5c09mV2Vlay5pbmRleE9mKGZvdW5kRGF5KTtcbiAgICAgIHRoaXMuY3VycmVudERheXNPZldlZWsuc3BsaWNlKGluZGV4LCAxKTtcblxuICAgICAgdGhpcy5jaGVja291dFJlcGxlbmlzaG1lbnRGb3JtU2VydmljZS5zZXRTY2hlZHVsZVJlcGxlbmlzaG1lbnRGb3JtRGF0YSh7XG4gICAgICAgIC4uLnRoaXMuc2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybURhdGEsXG4gICAgICAgIGRheXNPZldlZWs6IHRoaXMuY3VycmVudERheXNPZldlZWssXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBoYXNEYXlzT2ZXZWVrQ2hlY2tlZChkYXk6IERheXNPZldlZWspOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50RGF5c09mV2Vlay5pbmNsdWRlcyhkYXkpO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0Q29uZmlnKCk6IHZvaWQge1xuICAgIHRoaXMuaXNNb250aGx5ID1cbiAgICAgIHRoaXMuc2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybURhdGEucmVjdXJyZW5jZVBlcmlvZCA9PT1cbiAgICAgIHJlY3VycmVuY2VQZXJpb2QuTU9OVEhMWTtcblxuICAgIHRoaXMuaXNXZWVrbHkgPVxuICAgICAgdGhpcy5zY2hlZHVsZVJlcGxlbmlzaG1lbnRGb3JtRGF0YS5yZWN1cnJlbmNlUGVyaW9kID09PVxuICAgICAgcmVjdXJyZW5jZVBlcmlvZC5XRUVLTFk7XG5cbiAgICB0aGlzLmN1cnJlbnREYXlzT2ZXZWVrID0gWy4uLnRoaXMuc2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybURhdGEuZGF5c09mV2Vla107XG5cbiAgICB0aGlzLm51bWJlck9mRGF5cyA9IHRoaXMuaXNNb250aGx5XG4gICAgICA/IHRoaXMuY3JlYXRlTnVtYmVyU3RyaW5nQXJyYXkoMzEpXG4gICAgICA6IHRoaXMuY3JlYXRlTnVtYmVyU3RyaW5nQXJyYXkoMzApO1xuXG4gICAgdGhpcy5udW1iZXJPZldlZWtzID0gdGhpcy5jcmVhdGVOdW1iZXJTdHJpbmdBcnJheSgxMik7XG5cbiAgICB0aGlzLmN1cnJlbnREYXRlID0gdGhpcy5zY2hlZHVsZVJlcGxlbmlzaG1lbnRGb3JtRGF0YS5yZXBsZW5pc2htZW50U3RhcnREYXRlO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVOdW1iZXJTdHJpbmdBcnJheShuOiBudW1iZXIpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIEFycmF5KG4pXG4gICAgICAuZmlsbCgwKVxuICAgICAgLm1hcCgoXywgeSkgPT4gKHkgKyAxKS50b1N0cmluZygpKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gIH1cbn1cbiJdfQ==