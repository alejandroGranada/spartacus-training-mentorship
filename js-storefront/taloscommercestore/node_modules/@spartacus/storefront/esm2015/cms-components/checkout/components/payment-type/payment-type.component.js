import { ChangeDetectionStrategy, Component, ViewChild, } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { B2BPaymentTypeEnum, PaymentTypeService, } from '@spartacus/core';
import { distinctUntilChanged, filter, tap } from 'rxjs/operators';
import { CheckoutStepType } from '../../model/checkout-step.model';
import { CheckoutStepService } from '../../services/checkout-step.service';
export class PaymentTypeComponent {
    constructor(paymentTypeService, checkoutStepService, activatedRoute) {
        this.paymentTypeService = paymentTypeService;
        this.checkoutStepService = checkoutStepService;
        this.activatedRoute = activatedRoute;
        this.paymentTypes$ = this.paymentTypeService.getPaymentTypes();
        this.typeSelected$ = this.paymentTypeService
            .getSelectedPaymentType()
            .pipe(filter((selected) => selected !== undefined), distinctUntilChanged(), tap((selected) => {
            this.typeSelected = selected;
            this.checkoutStepService.resetSteps();
            this.checkoutStepService.disableEnableStep(CheckoutStepType.PAYMENT_DETAILS, selected === B2BPaymentTypeEnum.ACCOUNT_PAYMENT);
        }));
        this.cartPoNumber$ = this.paymentTypeService
            .getPoNumber()
            .pipe(filter((po) => po !== undefined), tap((po) => {
            return (this.cartPoNumber = po);
        }));
    }
    changeType(code) {
        this.paymentTypeService.setPaymentType(code);
        this.typeSelected = code;
    }
    next() {
        // set po number to cart
        const poNumInput = this._poNumberInput.nativeElement.value;
        if (this.typeSelected && poNumInput !== this.cartPoNumber) {
            this.paymentTypeService.setPaymentType(this.typeSelected, poNumInput);
        }
        this.checkoutStepService.next(this.activatedRoute);
    }
    back() {
        this.checkoutStepService.back(this.activatedRoute);
    }
}
PaymentTypeComponent.decorators = [
    { type: Component, args: [{
                selector: 'cx-payment-type',
                template: "<div class=\"row\">\n  <div class=\"col-md-12 col-lg-6\">\n    <label>\n      <span class=\"label-content\">{{\n        'checkoutPO.poNumber' | cxTranslate\n      }}</span>\n      <input\n        #poNumber\n        class=\"form-control\"\n        formControlName=\"poNumber\"\n        type=\"text\"\n        placeholder=\"{{ 'checkoutPO.placeholder' | cxTranslate }}\"\n        value=\"{{ cartPoNumber$ | async }}\"\n      />\n    </label>\n  </div>\n</div>\n<div class=\"row\">\n  <div class=\"col-md-12 col-lg-6\">\n    <ng-container\n      *ngIf=\"\n        (paymentTypes$ | async)?.length && typeSelected$ | async;\n        else loading\n      \"\n    >\n      <label class=\"cx-payment-type-container\">\n        <span class=\"label-content\">{{\n          'paymentTypes.title' | cxTranslate\n        }}</span>\n        <div class=\"form-check\" *ngFor=\"let type of paymentTypes$ | async\">\n          <input\n            id=\"paymentType-{{ type.code }}\"\n            class=\"form-check-input\"\n            role=\"radio\"\n            type=\"radio\"\n            aria-checked=\"true\"\n            (change)=\"changeType(type.code)\"\n            [value]=\"type.code\"\n            [checked]=\"type.code == typeSelected\"\n            formControlName=\"paymentType\"\n          />\n          <label\n            class=\"cx-payment-type-label form-check-label form-radio-label\"\n            for=\"paymentType-{{ type.code }}\"\n          >\n            <div class=\"cx-payment-type\">\n              {{\n                'paymentTypes.paymentType' | cxTranslate: { context: type.code }\n              }}\n            </div>\n          </label>\n        </div>\n      </label>\n    </ng-container>\n  </div>\n</div>\n\n<div class=\"cx-checkout-btns row\">\n  <div class=\"col-md-12 col-lg-6\">\n    <button class=\"btn btn-block btn-action\" (click)=\"back()\">\n      {{ 'checkout.backToCart' | cxTranslate }}\n    </button>\n  </div>\n  <div class=\"col-md-12 col-lg-6\">\n    <button class=\"btn btn-block btn-primary\" (click)=\"next()\">\n      {{ 'common.continue' | cxTranslate }}\n    </button>\n  </div>\n</div>\n\n<ng-template #loading>\n  <div class=\"cx-spinner\">\n    <cx-spinner></cx-spinner>\n  </div>\n</ng-template>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
PaymentTypeComponent.ctorParameters = () => [
    { type: PaymentTypeService },
    { type: CheckoutStepService },
    { type: ActivatedRoute }
];
PaymentTypeComponent.propDecorators = {
    _poNumberInput: [{ type: ViewChild, args: ['poNumber', { static: false },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5bWVudC10eXBlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy9QYXRyeWsvRGVza3RvcC9zcGFydGFjdXMvcHJvamVjdHMvc3RvcmVmcm9udGxpYi9zcmMvIiwic291cmNlcyI6WyJjbXMtY29tcG9uZW50cy9jaGVja291dC9jb21wb25lbnRzL3BheW1lbnQtdHlwZS9wYXltZW50LXR5cGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUVULFNBQVMsR0FDVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDakQsT0FBTyxFQUNMLGtCQUFrQixFQUVsQixrQkFBa0IsR0FDbkIsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBTzNFLE1BQU0sT0FBTyxvQkFBb0I7SUFtQy9CLFlBQ1ksa0JBQXNDLEVBQ3RDLG1CQUF3QyxFQUN4QyxjQUE4QjtRQUY5Qix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBQ3RDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFDeEMsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBL0IxQyxrQkFBYSxHQUVULElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUU5QyxrQkFBYSxHQUF1QixJQUFJLENBQUMsa0JBQWtCO2FBQ3hELHNCQUFzQixFQUFFO2FBQ3hCLElBQUksQ0FDSCxNQUFNLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLFFBQVEsS0FBSyxTQUFTLENBQUMsRUFDNUMsb0JBQW9CLEVBQUUsRUFDdEIsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDZixJQUFJLENBQUMsWUFBWSxHQUFHLFFBQVEsQ0FBQztZQUM3QixJQUFJLENBQUMsbUJBQW1CLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDdEMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGlCQUFpQixDQUN4QyxnQkFBZ0IsQ0FBQyxlQUFlLEVBQ2hDLFFBQVEsS0FBSyxrQkFBa0IsQ0FBQyxlQUFlLENBQ2hELENBQUM7UUFDSixDQUFDLENBQUMsQ0FDSCxDQUFDO1FBRUosa0JBQWEsR0FBdUIsSUFBSSxDQUFDLGtCQUFrQjthQUN4RCxXQUFXLEVBQUU7YUFDYixJQUFJLENBQ0gsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEtBQUssU0FBUyxDQUFDLEVBQ2hDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFO1lBQ1QsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQU1ELENBQUM7SUFFSixVQUFVLENBQUMsSUFBWTtRQUNyQixJQUFJLENBQUMsa0JBQWtCLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0lBQzNCLENBQUM7SUFFRCxJQUFJO1FBQ0Ysd0JBQXdCO1FBQ3hCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztRQUMzRCxJQUFJLElBQUksQ0FBQyxZQUFZLElBQUksVUFBVSxLQUFLLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDekQsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1NBQ3ZFO1FBRUQsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVELElBQUk7UUFDRixJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNyRCxDQUFDOzs7WUEvREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxpQkFBaUI7Z0JBQzNCLDZzRUFBNEM7Z0JBQzVDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2hEOzs7WUFYQyxrQkFBa0I7WUFLWCxtQkFBbUI7WUFUbkIsY0FBYzs7OzZCQWlCcEIsU0FBUyxTQUFDLFVBQVUsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBWaWV3Q2hpbGQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHtcbiAgQjJCUGF5bWVudFR5cGVFbnVtLFxuICBQYXltZW50VHlwZSxcbiAgUGF5bWVudFR5cGVTZXJ2aWNlLFxufSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQsIGZpbHRlciwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQ2hlY2tvdXRTdGVwVHlwZSB9IGZyb20gJy4uLy4uL21vZGVsL2NoZWNrb3V0LXN0ZXAubW9kZWwnO1xuaW1wb3J0IHsgQ2hlY2tvdXRTdGVwU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2NoZWNrb3V0LXN0ZXAuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2N4LXBheW1lbnQtdHlwZScsXG4gIHRlbXBsYXRlVXJsOiAnLi9wYXltZW50LXR5cGUuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgUGF5bWVudFR5cGVDb21wb25lbnQge1xuICBAVmlld0NoaWxkKCdwb051bWJlcicsIHsgc3RhdGljOiBmYWxzZSB9KVxuICBwcml2YXRlIF9wb051bWJlcklucHV0OiBFbGVtZW50UmVmO1xuXG4gIHR5cGVTZWxlY3RlZDogc3RyaW5nO1xuICBjYXJ0UG9OdW1iZXI6IHN0cmluZztcblxuICBwYXltZW50VHlwZXMkOiBPYnNlcnZhYmxlPFxuICAgIFBheW1lbnRUeXBlW11cbiAgPiA9IHRoaXMucGF5bWVudFR5cGVTZXJ2aWNlLmdldFBheW1lbnRUeXBlcygpO1xuXG4gIHR5cGVTZWxlY3RlZCQ6IE9ic2VydmFibGU8c3RyaW5nPiA9IHRoaXMucGF5bWVudFR5cGVTZXJ2aWNlXG4gICAgLmdldFNlbGVjdGVkUGF5bWVudFR5cGUoKVxuICAgIC5waXBlKFxuICAgICAgZmlsdGVyKChzZWxlY3RlZCkgPT4gc2VsZWN0ZWQgIT09IHVuZGVmaW5lZCksXG4gICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuICAgICAgdGFwKChzZWxlY3RlZCkgPT4ge1xuICAgICAgICB0aGlzLnR5cGVTZWxlY3RlZCA9IHNlbGVjdGVkO1xuICAgICAgICB0aGlzLmNoZWNrb3V0U3RlcFNlcnZpY2UucmVzZXRTdGVwcygpO1xuICAgICAgICB0aGlzLmNoZWNrb3V0U3RlcFNlcnZpY2UuZGlzYWJsZUVuYWJsZVN0ZXAoXG4gICAgICAgICAgQ2hlY2tvdXRTdGVwVHlwZS5QQVlNRU5UX0RFVEFJTFMsXG4gICAgICAgICAgc2VsZWN0ZWQgPT09IEIyQlBheW1lbnRUeXBlRW51bS5BQ0NPVU5UX1BBWU1FTlRcbiAgICAgICAgKTtcbiAgICAgIH0pXG4gICAgKTtcblxuICBjYXJ0UG9OdW1iZXIkOiBPYnNlcnZhYmxlPHN0cmluZz4gPSB0aGlzLnBheW1lbnRUeXBlU2VydmljZVxuICAgIC5nZXRQb051bWJlcigpXG4gICAgLnBpcGUoXG4gICAgICBmaWx0ZXIoKHBvKSA9PiBwbyAhPT0gdW5kZWZpbmVkKSxcbiAgICAgIHRhcCgocG8pID0+IHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmNhcnRQb051bWJlciA9IHBvKTtcbiAgICAgIH0pXG4gICAgKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgcGF5bWVudFR5cGVTZXJ2aWNlOiBQYXltZW50VHlwZVNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIGNoZWNrb3V0U3RlcFNlcnZpY2U6IENoZWNrb3V0U3RlcFNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIGFjdGl2YXRlZFJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVxuICApIHt9XG5cbiAgY2hhbmdlVHlwZShjb2RlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnBheW1lbnRUeXBlU2VydmljZS5zZXRQYXltZW50VHlwZShjb2RlKTtcbiAgICB0aGlzLnR5cGVTZWxlY3RlZCA9IGNvZGU7XG4gIH1cblxuICBuZXh0KCk6IHZvaWQge1xuICAgIC8vIHNldCBwbyBudW1iZXIgdG8gY2FydFxuICAgIGNvbnN0IHBvTnVtSW5wdXQgPSB0aGlzLl9wb051bWJlcklucHV0Lm5hdGl2ZUVsZW1lbnQudmFsdWU7XG4gICAgaWYgKHRoaXMudHlwZVNlbGVjdGVkICYmIHBvTnVtSW5wdXQgIT09IHRoaXMuY2FydFBvTnVtYmVyKSB7XG4gICAgICB0aGlzLnBheW1lbnRUeXBlU2VydmljZS5zZXRQYXltZW50VHlwZSh0aGlzLnR5cGVTZWxlY3RlZCwgcG9OdW1JbnB1dCk7XG4gICAgfVxuXG4gICAgdGhpcy5jaGVja291dFN0ZXBTZXJ2aWNlLm5leHQodGhpcy5hY3RpdmF0ZWRSb3V0ZSk7XG4gIH1cblxuICBiYWNrKCk6IHZvaWQge1xuICAgIHRoaXMuY2hlY2tvdXRTdGVwU2VydmljZS5iYWNrKHRoaXMuYWN0aXZhdGVkUm91dGUpO1xuICB9XG59XG4iXX0=