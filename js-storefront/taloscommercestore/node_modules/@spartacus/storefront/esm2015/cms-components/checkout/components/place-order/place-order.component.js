import { ChangeDetectionStrategy, Component, ViewContainerRef, } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import { CheckoutService, ORDER_TYPE, recurrencePeriod, RoutingService, } from '@spartacus/core';
import { BehaviorSubject, combineLatest, Subscription } from 'rxjs';
import { LaunchDialogService, } from '../../../../layout/launch-dialog/index';
import { CheckoutReplenishmentFormService } from '../../services/checkout-replenishment-form-service';
export class PlaceOrderComponent {
    constructor(checkoutService, routingService, fb, checkoutReplenishmentFormService, launchDialogService, vcr) {
        this.checkoutService = checkoutService;
        this.routingService = routingService;
        this.fb = fb;
        this.checkoutReplenishmentFormService = checkoutReplenishmentFormService;
        this.launchDialogService = launchDialogService;
        this.vcr = vcr;
        this.subscription = new Subscription();
        this.daysOfWeekNotChecked$ = new BehaviorSubject(false);
        this.checkoutSubmitForm = this.fb.group({
            termsAndConditions: [false, Validators.requiredTrue],
        });
    }
    get termsAndConditionInvalid() {
        return this.checkoutSubmitForm.invalid;
    }
    submitForm() {
        if (this.checkoutSubmitForm.valid && Boolean(this.currentOrderType)) {
            switch (this.currentOrderType) {
                case ORDER_TYPE.PLACE_ORDER: {
                    this.checkoutService.placeOrder(this.checkoutSubmitForm.valid);
                    break;
                }
                case ORDER_TYPE.SCHEDULE_REPLENISHMENT_ORDER: {
                    this.checkoutService.scheduleReplenishmentOrder(this.scheduleReplenishmentFormData, this.checkoutSubmitForm.valid);
                    break;
                }
            }
        }
        else {
            this.checkoutSubmitForm.markAllAsTouched();
        }
    }
    ngOnInit() {
        this.subscription.add(combineLatest([
            this.checkoutService.getPlaceOrderLoading(),
            this.checkoutService.getPlaceOrderSuccess(),
            this.checkoutService.getPlaceOrderError(),
        ]).subscribe(([orderLoading, orderSuccess, orderError]) => {
            if (orderLoading) {
                this.placedOrder = this.launchDialogService.launch("PLACE_ORDER_SPINNER" /* PLACE_ORDER_SPINNER */, this.vcr);
            }
            if (orderError) {
                if (this.placedOrder) {
                    this.placedOrder
                        .subscribe((component) => {
                        this.launchDialogService.clear("PLACE_ORDER_SPINNER" /* PLACE_ORDER_SPINNER */);
                        component.destroy();
                    })
                        .unsubscribe();
                    this.checkoutService.clearPlaceOrderState();
                }
            }
            if (orderSuccess) {
                this.onSuccess(orderSuccess);
            }
        }));
        this.subscription.add(this.checkoutService
            .getCurrentOrderType()
            .subscribe((orderType) => (this.currentOrderType = orderType)));
        this.subscription.add(this.checkoutReplenishmentFormService
            .getScheduleReplenishmentFormData()
            .subscribe((data) => {
            this.scheduleReplenishmentFormData = data;
            this.daysOfWeekNotChecked$.next(data.daysOfWeek.length === 0 &&
                data.recurrencePeriod === recurrencePeriod.WEEKLY);
        }));
    }
    onSuccess(data) {
        if (data) {
            switch (this.currentOrderType) {
                case ORDER_TYPE.PLACE_ORDER: {
                    this.routingService.go({ cxRoute: 'orderConfirmation' });
                    break;
                }
                case ORDER_TYPE.SCHEDULE_REPLENISHMENT_ORDER: {
                    this.routingService.go({ cxRoute: 'replenishmentConfirmation' });
                    break;
                }
            }
            this.checkoutReplenishmentFormService.resetScheduleReplenishmentFormData();
        }
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
        this.launchDialogService.clear("PLACE_ORDER_SPINNER" /* PLACE_ORDER_SPINNER */);
        this.checkoutService.clearPlaceOrderState();
    }
}
PlaceOrderComponent.decorators = [
    { type: Component, args: [{
                selector: 'cx-place-order',
                template: "<form\n  (ngSubmit)=\"submitForm()\"\n  class=\"cx-place-order-form form-check\"\n  [formGroup]=\"checkoutSubmitForm\"\n>\n  <div class=\"form-group\">\n    <label>\n      <input\n        formControlName=\"termsAndConditions\"\n        class=\"scaled-input form-check-input\"\n        type=\"checkbox\"\n      />\n      <span class=\"form-check-label\">\n        {{ 'checkoutReview.confirmThatRead' | cxTranslate }}\n        <a\n          [routerLink]=\"{ cxRoute: 'termsAndConditions' } | cxUrl\"\n          class=\"cx-tc-link\"\n          target=\"_blank\"\n        >\n          {{ 'checkoutReview.termsAndConditions' | cxTranslate }}\n        </a>\n      </span>\n    </label>\n  </div>\n\n  <button\n    type=\"submit\"\n    class=\"btn btn-primary btn-block\"\n    [disabled]=\"termsAndConditionInvalid || (daysOfWeekNotChecked$ | async)\"\n  >\n    {{ 'checkoutReview.placeOrder' | cxTranslate }}\n  </button>\n</form>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
PlaceOrderComponent.ctorParameters = () => [
    { type: CheckoutService },
    { type: RoutingService },
    { type: FormBuilder },
    { type: CheckoutReplenishmentFormService },
    { type: LaunchDialogService },
    { type: ViewContainerRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhY2Utb3JkZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9wcm9qZWN0cy9zdG9yZWZyb250bGliL3NyYy8iLCJzb3VyY2VzIjpbImNtcy1jb21wb25lbnRzL2NoZWNrb3V0L2NvbXBvbmVudHMvcGxhY2Utb3JkZXIvcGxhY2Utb3JkZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUlULGdCQUFnQixHQUNqQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsV0FBVyxFQUFhLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3BFLE9BQU8sRUFDTCxlQUFlLEVBQ2YsVUFBVSxFQUNWLGdCQUFnQixFQUNoQixjQUFjLEdBRWYsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBYyxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEYsT0FBTyxFQUNMLG1CQUFtQixHQUVwQixNQUFNLHdDQUF3QyxDQUFDO0FBQ2hELE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBT3RHLE1BQU0sT0FBTyxtQkFBbUI7SUFpQjlCLFlBQ1ksZUFBZ0MsRUFDaEMsY0FBOEIsRUFDOUIsRUFBZSxFQUNmLGdDQUFrRSxFQUNsRSxtQkFBd0MsRUFDeEMsR0FBcUI7UUFMckIsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBQ2hDLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUM5QixPQUFFLEdBQUYsRUFBRSxDQUFhO1FBQ2YscUNBQWdDLEdBQWhDLGdDQUFnQyxDQUFrQztRQUNsRSx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBQ3hDLFFBQUcsR0FBSCxHQUFHLENBQWtCO1FBdEJ6QixpQkFBWSxHQUFpQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBTXhELDBC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cG9uZW50LFxuICBDb21wb25lbnRSZWYsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBWaWV3Q29udGFpbmVyUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1CdWlsZGVyLCBGb3JtR3JvdXAsIFZhbGlkYXRvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge1xuICBDaGVja291dFNlcnZpY2UsXG4gIE9SREVSX1RZUEUsXG4gIHJlY3VycmVuY2VQZXJpb2QsXG4gIFJvdXRpbmdTZXJ2aWNlLFxuICBTY2hlZHVsZVJlcGxlbmlzaG1lbnRGb3JtLFxufSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBjb21iaW5lTGF0ZXN0LCBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7XG4gIExhdW5jaERpYWxvZ1NlcnZpY2UsXG4gIExBVU5DSF9DQUxMRVIsXG59IGZyb20gJy4uLy4uLy4uLy4uL2xheW91dC9sYXVuY2gtZGlhbG9nL2luZGV4JztcbmltcG9ydCB7IENoZWNrb3V0UmVwbGVuaXNobWVudEZvcm1TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY2hlY2tvdXQtcmVwbGVuaXNobWVudC1mb3JtLXNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjeC1wbGFjZS1vcmRlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9wbGFjZS1vcmRlci5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBQbGFjZU9yZGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBwcml2YXRlIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuXG4gIGN1cnJlbnRPcmRlclR5cGU6IE9SREVSX1RZUEU7XG4gIHNjaGVkdWxlUmVwbGVuaXNobWVudEZvcm1EYXRhOiBTY2hlZHVsZVJlcGxlbmlzaG1lbnRGb3JtO1xuICBwbGFjZWRPcmRlcjogdm9pZCB8IE9ic2VydmFibGU8Q29tcG9uZW50UmVmPGFueT4+O1xuXG4gIGRheXNPZldlZWtOb3RDaGVja2VkJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4oZmFsc2UpO1xuXG4gIGNoZWNrb3V0U3VibWl0Rm9ybTogRm9ybUdyb3VwID0gdGhpcy5mYi5ncm91cCh7XG4gICAgdGVybXNBbmRDb25kaXRpb25zOiBbZmFsc2UsIFZhbGlkYXRvcnMucmVxdWlyZWRUcnVlXSxcbiAgfSk7XG5cbiAgZ2V0IHRlcm1zQW5kQ29uZGl0aW9uSW52YWxpZCgpOiBCb29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5jaGVja291dFN1Ym1pdEZvcm0uaW52YWxpZDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBjaGVja291dFNlcnZpY2U6IENoZWNrb3V0U2VydmljZSxcbiAgICBwcm90ZWN0ZWQgcm91dGluZ1NlcnZpY2U6IFJvdXRpbmdTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBmYjogRm9ybUJ1aWxkZXIsXG4gICAgcHJvdGVjdGVkIGNoZWNrb3V0UmVwbGVuaXNobWVudEZvcm1TZXJ2aWNlOiBDaGVja291dFJlcGxlbmlzaG1lbnRGb3JtU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgbGF1bmNoRGlhbG9nU2VydmljZTogTGF1bmNoRGlhbG9nU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgdmNyOiBWaWV3Q29udGFpbmVyUmVmXG4gICkge31cblxuICBzdWJtaXRGb3JtKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmNoZWNrb3V0U3VibWl0Rm9ybS52YWxpZCAmJiBCb29sZWFuKHRoaXMuY3VycmVudE9yZGVyVHlwZSkpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5jdXJyZW50T3JkZXJUeXBlKSB7XG4gICAgICAgIGNhc2UgT1JERVJfVFlQRS5QTEFDRV9PUkRFUjoge1xuICAgICAgICAgIHRoaXMuY2hlY2tvdXRTZXJ2aWNlLnBsYWNlT3JkZXIodGhpcy5jaGVja291dFN1Ym1pdEZvcm0udmFsaWQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgY2FzZSBPUkRFUl9UWVBFLlNDSEVEVUxFX1JFUExFTklTSE1FTlRfT1JERVI6IHtcbiAgICAgICAgICB0aGlzLmNoZWNrb3V0U2VydmljZS5zY2hlZHVsZVJlcGxlbmlzaG1lbnRPcmRlcihcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybURhdGEsXG4gICAgICAgICAgICB0aGlzLmNoZWNrb3V0U3VibWl0Rm9ybS52YWxpZFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jaGVja291dFN1Ym1pdEZvcm0ubWFya0FsbEFzVG91Y2hlZCgpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uLmFkZChcbiAgICAgIGNvbWJpbmVMYXRlc3QoW1xuICAgICAgICB0aGlzLmNoZWNrb3V0U2VydmljZS5nZXRQbGFjZU9yZGVyTG9hZGluZygpLFxuICAgICAgICB0aGlzLmNoZWNrb3V0U2VydmljZS5nZXRQbGFjZU9yZGVyU3VjY2VzcygpLFxuICAgICAgICB0aGlzLmNoZWNrb3V0U2VydmljZS5nZXRQbGFjZU9yZGVyRXJyb3IoKSxcbiAgICAgIF0pLnN1YnNjcmliZSgoW29yZGVyTG9hZGluZywgb3JkZXJTdWNjZXNzLCBvcmRlckVycm9yXSkgPT4ge1xuICAgICAgICBpZiAob3JkZXJMb2FkaW5nKSB7XG4gICAgICAgICAgdGhpcy5wbGFjZWRPcmRlciA9IHRoaXMubGF1bmNoRGlhbG9nU2VydmljZS5sYXVuY2goXG4gICAgICAgICAgICBMQVVOQ0hfQ0FMTEVSLlBMQUNFX09SREVSX1NQSU5ORVIsXG4gICAgICAgICAgICB0aGlzLnZjclxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3JkZXJFcnJvcikge1xuICAgICAgICAgIGlmICh0aGlzLnBsYWNlZE9yZGVyKSB7XG4gICAgICAgICAgICB0aGlzLnBsYWNlZE9yZGVyXG4gICAgICAgICAgICAgIC5zdWJzY3JpYmUoKGNvbXBvbmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubGF1bmNoRGlhbG9nU2VydmljZS5jbGVhcihcbiAgICAgICAgICAgICAgICAgIExBVU5DSF9DQUxMRVIuUExBQ0VfT1JERVJfU1BJTk5FUlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50LmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB0aGlzLmNoZWNrb3V0U2VydmljZS5jbGVhclBsYWNlT3JkZXJTdGF0ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcmRlclN1Y2Nlc3MpIHtcbiAgICAgICAgICB0aGlzLm9uU3VjY2VzcyhvcmRlclN1Y2Nlc3MpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICk7XG5cbiAgICB0aGlzLnN1YnNjcmlwdGlvbi5hZGQoXG4gICAgICB0aGlzLmNoZWNrb3V0U2VydmljZVxuICAgICAgICAuZ2V0Q3VycmVudE9yZGVyVHlwZSgpXG4gICAgICAgIC5zdWJzY3JpYmUoKG9yZGVyVHlwZSkgPT4gKHRoaXMuY3VycmVudE9yZGVyVHlwZSA9IG9yZGVyVHlwZSkpXG4gICAgKTtcblxuICAgIHRoaXMuc3Vic2NyaXB0aW9uLmFkZChcbiAgICAgIHRoaXMuY2hlY2tvdXRSZXBsZW5pc2htZW50Rm9ybVNlcnZpY2VcbiAgICAgICAgLmdldFNjaGVkdWxlUmVwbGVuaXNobWVudEZvcm1EYXRhKClcbiAgICAgICAgLnN1YnNjcmliZSgoZGF0YSkgPT4ge1xuICAgICAgICAgIHRoaXMuc2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybURhdGEgPSBkYXRhO1xuXG4gICAgICAgICAgdGhpcy5kYXlzT2ZXZWVrTm90Q2hlY2tlZCQubmV4dChcbiAgICAgICAgICAgIGRhdGEuZGF5c09mV2Vlay5sZW5ndGggPT09IDAgJiZcbiAgICAgICAgICAgICAgZGF0YS5yZWN1cnJlbmNlUGVyaW9kID09PSByZWN1cnJlbmNlUGVyaW9kLldFRUtMWVxuICAgICAgICAgICk7XG4gICAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIG9uU3VjY2VzcyhkYXRhOiBib29sZWFuKTogdm9pZCB7XG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5jdXJyZW50T3JkZXJUeXBlKSB7XG4gICAgICAgIGNhc2UgT1JERVJfVFlQRS5QTEFDRV9PUkRFUjoge1xuICAgICAgICAgIHRoaXMucm91dGluZ1NlcnZpY2UuZ28oeyBjeFJvdXRlOiAnb3JkZXJDb25maXJtYXRpb24nIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgY2FzZSBPUkRFUl9UWVBFLlNDSEVEVUxFX1JFUExFTklTSE1FTlRfT1JERVI6IHtcbiAgICAgICAgICB0aGlzLnJvdXRpbmdTZXJ2aWNlLmdvKHsgY3hSb3V0ZTogJ3JlcGxlbmlzaG1lbnRDb25maXJtYXRpb24nIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmNoZWNrb3V0UmVwbGVuaXNobWVudEZvcm1TZXJ2aWNlLnJlc2V0U2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybURhdGEoKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIHRoaXMubGF1bmNoRGlhbG9nU2VydmljZS5jbGVhcihMQVVOQ0hfQ0FMTEVSLlBMQUNFX09SREVSX1NQSU5ORVIpO1xuICAgIHRoaXMuY2hlY2tvdXRTZXJ2aWNlLmNsZWFyUGxhY2VPcmRlclN0YXRlKCk7XG4gIH1cbn1cbiJdfQ==