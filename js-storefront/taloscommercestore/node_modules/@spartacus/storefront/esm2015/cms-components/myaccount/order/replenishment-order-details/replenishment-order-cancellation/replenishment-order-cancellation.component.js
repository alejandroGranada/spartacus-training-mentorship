import { Component, ViewChild, ViewContainerRef, } from '@angular/core';
import { UserReplenishmentOrderService, } from '@spartacus/core';
import { LaunchDialogService, } from '../../../../../layout/launch-dialog';
import { Subscription } from 'rxjs';
import { take } from 'rxjs/operators';
import { ReplenishmentOrderCancellationLaunchDialogService } from './replenishment-order-cancellation-launch-dialog.service';
export class ReplenishmentOrderCancellationComponent {
    constructor(userReplenishmentOrderService, replenishmentOrderCancellationLaunchDialogService, vcr, launchDialogService) {
        this.userReplenishmentOrderService = userReplenishmentOrderService;
        this.replenishmentOrderCancellationLaunchDialogService = replenishmentOrderCancellationLaunchDialogService;
        this.vcr = vcr;
        this.launchDialogService = launchDialogService;
        this.subscription = new Subscription();
        this.replenishmentOrder$ = this.userReplenishmentOrderService.getReplenishmentOrderDetails();
    }
    openDialog() {
        // TODO(#12167): use launchDialogService only
        if (this.launchDialogService) {
            const dialog = this.launchDialogService.openDialog("REPLENISHMENT_ORDER" /* REPLENISHMENT_ORDER */, this.element, this.vcr);
            if (dialog) {
                this.subscription.add(dialog.pipe(take(1)).subscribe());
            }
        }
        else {
            const dialog = this.replenishmentOrderCancellationLaunchDialogService.openDialog(this.element, this.vcr);
            if (dialog) {
                this.subscription.add(dialog.pipe(take(1)).subscribe());
            }
        }
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
        this.userReplenishmentOrderService.clearReplenishmentOrderDetails();
    }
}
ReplenishmentOrderCancellationComponent.decorators = [
    { type: Component, args: [{
                selector: 'cx-replenishment-order-cancellation',
                template: "<div class=\"cx-cancel-replenishment-btns row\">\n  <div class=\"col-xs-12 col-md-5 col-lg-4\">\n    <a\n      class=\"btn btn-block btn-action\"\n      [routerLink]=\"\n        {\n          cxRoute: 'replenishmentOrders'\n        } | cxUrl\n      \"\n    >\n      {{ 'common.back' | cxTranslate }}\n    </a>\n  </div>\n  <div\n    *ngIf=\"(replenishmentOrder$ | async).active\"\n    class=\"col-xs-12 col-md-5 col-lg-4\"\n  >\n    <button #element class=\"btn btn-block btn-action\" (click)=\"openDialog()\">\n      {{ 'orderDetails.cancelReplenishment.title' | cxTranslate }}\n    </button>\n  </div>\n</div>\n"
            },] }
];
ReplenishmentOrderCancellationComponent.ctorParameters = () => [
    { type: UserReplenishmentOrderService },
    { type: ReplenishmentOrderCancellationLaunchDialogService },
    { type: ViewContainerRef },
    { type: LaunchDialogService }
];
ReplenishmentOrderCancellationComponent.propDecorators = {
    element: [{ type: ViewChild, args: ['element',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwbGVuaXNobWVudC1vcmRlci1jYW5jZWxsYXRpb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9wcm9qZWN0cy9zdG9yZWZyb250bGliL3NyYy8iLCJzb3VyY2VzIjpbImNtcy1jb21wb25lbnRzL215YWNjb3VudC9vcmRlci9yZXBsZW5pc2htZW50LW9yZGVyLWRldGFpbHMvcmVwbGVuaXNobWVudC1vcmRlci1jYW5jZWxsYXRpb24vcmVwbGVuaXNobWVudC1vcmRlci1jYW5jZWxsYXRpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBR1QsU0FBUyxFQUNULGdCQUFnQixHQUNqQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBRUwsNkJBQTZCLEdBQzlCLE1BQU0saUJBQWlCLENBQUM7QUFDekIsT0FBTyxFQUNMLG1CQUFtQixHQUVwQixNQUFNLHFDQUFxQyxDQUFDO0FBQzdDLE9BQU8sRUFBYyxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3RDLE9BQU8sRUFBRSxpREFBaUQsRUFBRSxNQUFNLDBEQUEwRCxDQUFDO0FBTTdILE1BQU0sT0FBTyx1Q0FBdUM7SUErQmxELFlBQ1ksNkJBQTRELEVBQzVELGlEQUFvRyxFQUNwRyxHQUFxQixFQUNyQixtQkFBeUM7UUFIekMsa0NBQTZCLEdBQTdCLDZCQUE2QixDQUErQjtRQUM1RCxzREFBaUQsR0FBakQsaURBQWlELENBQW1EO1FBQ3BHLFFBQUcsR0FBSCxHQUFHLENBQWtCO1FBQ3JCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBc0I7UUFoQzdDLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUUxQyx3QkFBbUIsR0FBbUMsSUFBSSxDQUFDLDZCQUE2QixDQUFDLDRCQUE0QixFQUFFLENBQUM7SUErQnJILENBQUM7SUFFSixVQUFVO1FBQ1IsNkNBQTZDO1FBQzdDLElBQUksSUFBSSxDQUFDLG1CQUFtQixFQUFFO1lBQzVCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLGtEQUVoRCxJQUFJLENBQUMsT0FBTyxFQUNaLElBQUksQ0FBQyxHQUFHLENBQ1QsQ0FBQztZQUVGLElBQUksTUFBTSxFQUFFO2dCQUNWLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQzthQUN6RDtTQUNGO2FBQU07WUFDTCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsaURBQWlELENBQUMsVUFBVSxDQUM5RSxJQUFJLENBQUMsT0FBTyxFQUNaLElBQUksQ0FBQyxHQUFHLENBQ1QsQ0FBQztZQUVGLElBQUksTUFBTSxFQUFFO2dCQUNWLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQzthQUN6RDtTQUNGO0lBQ0gsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2hDLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyw4QkFBOEIsRUFBRSxDQUFDO0lBQ3RFLENBQUM7OztZQXJFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHFDQUFxQztnQkFDL0MsZ25CQUFnRTthQUNqRTs7O1lBYkMsNkJBQTZCO1lBUXRCLGlEQUFpRDtZQVp4RCxnQkFBZ0I7WUFPaEIsbUJBQW1COzs7c0JBWWxCLFNBQVMsU0FBQyxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBPbkRlc3Ryb3ksXG4gIFZpZXdDaGlsZCxcbiAgVmlld0NvbnRhaW5lclJlZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBSZXBsZW5pc2htZW50T3JkZXIsXG4gIFVzZXJSZXBsZW5pc2htZW50T3JkZXJTZXJ2aWNlLFxufSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHtcbiAgTGF1bmNoRGlhbG9nU2VydmljZSxcbiAgTEFVTkNIX0NBTExFUixcbn0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vbGF5b3V0L2xhdW5jaC1kaWFsb2cnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgUmVwbGVuaXNobWVudE9yZGVyQ2FuY2VsbGF0aW9uTGF1bmNoRGlhbG9nU2VydmljZSB9IGZyb20gJy4vcmVwbGVuaXNobWVudC1vcmRlci1jYW5jZWxsYXRpb24tbGF1bmNoLWRpYWxvZy5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY3gtcmVwbGVuaXNobWVudC1vcmRlci1jYW5jZWxsYXRpb24nLFxuICB0ZW1wbGF0ZVVybDogJy4vcmVwbGVuaXNobWVudC1vcmRlci1jYW5jZWxsYXRpb24uY29tcG9uZW50Lmh0bWwnLFxufSlcbmV4cG9ydCBjbGFzcyBSZXBsZW5pc2htZW50T3JkZXJDYW5jZWxsYXRpb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICBAVmlld0NoaWxkKCdlbGVtZW50JykgZWxlbWVudDogRWxlbWVudFJlZjtcblxuICBwcml2YXRlIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oKTtcblxuICByZXBsZW5pc2htZW50T3JkZXIkOiBPYnNlcnZhYmxlPFJlcGxlbmlzaG1lbnRPcmRlcj4gPSB0aGlzLnVzZXJSZXBsZW5pc2htZW50T3JkZXJTZXJ2aWNlLmdldFJlcGxlbmlzaG1lbnRPcmRlckRldGFpbHMoKTtcblxuICAvLyBUT0RPKCMxMjE2Nyk6IG1ha2UgbGF1bmNoRGlhbG9nU2VydmljZSBhIHJlcXVpcmVkIGRlcGVuZGVuY3kgaW5zdGVhZCBvZiByZXBsZW5pc2htZW50T3JkZXJDYW5jZWxsYXRpb25MYXVuY2hEaWFsb2dTZXJ2aWNlIGFuZCByZW1vdmUgZGVwcmVjYXRlZCBjb25zdHJ1Y3RvcnNcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIHNpbmNlIDMuM1xuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgdXNlclJlcGxlbmlzaG1lbnRPcmRlclNlcnZpY2U6IFVzZXJSZXBsZW5pc2htZW50T3JkZXJTZXJ2aWNlLFxuICAgIHJlcGxlbmlzaG1lbnRPcmRlckNhbmNlbGxhdGlvbkxhdW5jaERpYWxvZ1NlcnZpY2U6IFJlcGxlbmlzaG1lbnRPcmRlckNhbmNlbGxhdGlvbkxhdW5jaERpYWxvZ1NlcnZpY2UsXG4gICAgdmNyOiBWaWV3Q29udGFpbmVyUmVmXG4gICk7XG4gIC8qKlxuICAgKiBEZWZhdWx0IGNvbnN0cnVjdG9yIHdpbGwgYmVcbiAgICpcbiAgICogQHBhcmFtIHtVc2VyUmVwbGVuaXNobWVudE9yZGVyU2VydmljZX0gdXNlclJlcGxlbmlzaG1lbnRPcmRlclNlcnZpY2VcbiAgICogQHBhcmFtIHtWaWV3Q29udGFpbmVyUmVmfSB2Y3JcbiAgICogQHBhcmFtIHtMYXVuY2hEaWFsb2dTZXJ2aWNlfSBsYXVuY2hEaWFsb2dTZXJ2aWNlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICB1c2VyUmVwbGVuaXNobWVudE9yZGVyU2VydmljZTogVXNlclJlcGxlbmlzaG1lbnRPcmRlclNlcnZpY2UsXG4gICAgcmVwbGVuaXNobWVudE9yZGVyQ2FuY2VsbGF0aW9uTGF1bmNoRGlhbG9nU2VydmljZTogUmVwbGVuaXNobWVudE9yZGVyQ2FuY2VsbGF0aW9uTGF1bmNoRGlhbG9nU2VydmljZSxcbiAgICB2Y3I6IFZpZXdDb250YWluZXJSZWYsXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC91bmlmaWVkLXNpZ25hdHVyZXNcbiAgICBsYXVuY2hEaWFsb2dTZXJ2aWNlOiBMYXVuY2hEaWFsb2dTZXJ2aWNlXG4gICk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIHVzZXJSZXBsZW5pc2htZW50T3JkZXJTZXJ2aWNlOiBVc2VyUmVwbGVuaXNobWVudE9yZGVyU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgcmVwbGVuaXNobWVudE9yZGVyQ2FuY2VsbGF0aW9uTGF1bmNoRGlhbG9nU2VydmljZTogUmVwbGVuaXNobWVudE9yZGVyQ2FuY2VsbGF0aW9uTGF1bmNoRGlhbG9nU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgdmNyOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIHByb3RlY3RlZCBsYXVuY2hEaWFsb2dTZXJ2aWNlPzogTGF1bmNoRGlhbG9nU2VydmljZVxuICApIHt9XG5cbiAgb3BlbkRpYWxvZygpIHtcbiAgICAvLyBUT0RPKCMxMjE2Nyk6IHVzZSBsYXVuY2hEaWFsb2dTZXJ2aWNlIG9ubHlcbiAgICBpZiAodGhpcy5sYXVuY2hEaWFsb2dTZXJ2aWNlKSB7XG4gICAgICBjb25zdCBkaWFsb2cgPSB0aGlzLmxhdW5jaERpYWxvZ1NlcnZpY2Uub3BlbkRpYWxvZyhcbiAgICAgICAgTEFVTkNIX0NBTExFUi5SRVBMRU5JU0hNRU5UX09SREVSLFxuICAgICAgICB0aGlzLmVsZW1lbnQsXG4gICAgICAgIHRoaXMudmNyXG4gICAgICApO1xuXG4gICAgICBpZiAoZGlhbG9nKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLmFkZChkaWFsb2cucGlwZSh0YWtlKDEpKS5zdWJzY3JpYmUoKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGRpYWxvZyA9IHRoaXMucmVwbGVuaXNobWVudE9yZGVyQ2FuY2VsbGF0aW9uTGF1bmNoRGlhbG9nU2VydmljZS5vcGVuRGlhbG9nKFxuICAgICAgICB0aGlzLmVsZW1lbnQsXG4gICAgICAgIHRoaXMudmNyXG4gICAgICApO1xuXG4gICAgICBpZiAoZGlhbG9nKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLmFkZChkaWFsb2cucGlwZSh0YWtlKDEpKS5zdWJzY3JpYmUoKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB0aGlzLnVzZXJSZXBsZW5pc2htZW50T3JkZXJTZXJ2aWNlLmNsZWFyUmVwbGVuaXNobWVudE9yZGVyRGV0YWlscygpO1xuICB9XG59XG4iXX0=