import { Injectable } from '@angular/core';
import { combineLatest } from 'rxjs';
import { filter, map, tap } from 'rxjs/operators';
import { LaunchDialogService, } from '../../../../../layout/launch-dialog/index';
import * as i0 from "@angular/core";
import * as i1 from "../../../../../layout/launch-dialog/services/launch-dialog.service";
// TODO(#12167): deprecations cleanup
/**
 * @deprecated since 3.3 - use `LaunchDialogService` instead
 */
export class ReplenishmentOrderCancellationLaunchDialogService {
    constructor(launchDialogService) {
        this.launchDialogService = launchDialogService;
    }
    /**
     * @deprecated since 3.3 - use `LaunchDialogService.openDialog` with LAUNCH_CALLER.REPLENISHMENT_ORDER instead
     */
    openDialog(openElement, vcr, data) {
        const component = this.launchDialogService.launch("REPLENISHMENT_ORDER" /* REPLENISHMENT_ORDER */, vcr, data);
        if (component) {
            return combineLatest([
                component,
                this.launchDialogService.dialogClose,
            ]).pipe(filter(([, close]) => close && close !== undefined), tap(([comp]) => {
                openElement === null || openElement === void 0 ? void 0 : openElement.nativeElement.focus();
                this.launchDialogService.clear("REPLENISHMENT_ORDER" /* REPLENISHMENT_ORDER */);
                comp.destroy();
            }), map(([comp]) => comp));
        }
    }
}
ReplenishmentOrderCancellationLaunchDialogService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ReplenishmentOrderCancellationLaunchDialogService_Factory() { return new ReplenishmentOrderCancellationLaunchDialogService(i0.ɵɵinject(i1.LaunchDialogService)); }, token: ReplenishmentOrderCancellationLaunchDialogService, providedIn: "root" });
ReplenishmentOrderCancellationLaunchDialogService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
ReplenishmentOrderCancellationLaunchDialogService.ctorParameters = () => [
    { type: LaunchDialogService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwbGVuaXNobWVudC1vcmRlci1jYW5jZWxsYXRpb24tbGF1bmNoLWRpYWxvZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9wcm9qZWN0cy9zdG9yZWZyb250bGliL3NyYy8iLCJzb3VyY2VzIjpbImNtcy1jb21wb25lbnRzL215YWNjb3VudC9vcmRlci9yZXBsZW5pc2htZW50LW9yZGVyLWRldGFpbHMvcmVwbGVuaXNobWVudC1vcmRlci1jYW5jZWxsYXRpb24vcmVwbGVuaXNobWVudC1vcmRlci1jYW5jZWxsYXRpb24tbGF1bmNoLWRpYWxvZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxVQUFVLEVBQW9CLE1BQU0sZUFBZSxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxhQUFhLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDakQsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbEQsT0FBTyxFQUNMLG1CQUFtQixHQUVwQixNQUFNLDJDQUEyQyxDQUFDOzs7QUFFbkQscUNBQXFDO0FBQ3JDOztHQUVHO0FBRUgsTUFBTSxPQUFPLGlEQUFpRDtJQUM1RCxZQUFzQixtQkFBd0M7UUFBeEMsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtJQUFHLENBQUM7SUFFbEU7O09BRUc7SUFDSCxVQUFVLENBQ1IsV0FBd0IsRUFDeEIsR0FBc0IsRUFDdEIsSUFBVTtRQUVWLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLGtEQUUvQyxHQUFHLEVBQ0gsSUFBSSxDQUNMLENBQUM7UUFFRixJQUFJLFNBQVMsRUFBRTtZQUNiLE9BQU8sYUFBYSxDQUFDO2dCQUNuQixTQUFTO2dCQUNULElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXO2FBQ3JDLENBQUMsQ0FBQyxJQUFJLENBQ0wsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxLQUFLLElBQUksS0FBSyxLQUFLLFNBQVMsQ0FBQyxFQUNuRCxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUU7Z0JBQ2IsV0FBVyxhQUFYLFdBQVcsdUJBQVgsV0FBVyxDQUFFLGFBQWEsQ0FBQyxLQUFLLEdBQUc7Z0JBQ25DLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLGlEQUFtQyxDQUFDO2dCQUNsRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDakIsQ0FBQyxDQUFDLEVBQ0YsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQ3RCLENBQUM7U0FDSDtJQUNILENBQUM7Ozs7WUFoQ0YsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7O1lBUmhDLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEluamVjdGFibGUsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNvbWJpbmVMYXRlc3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbHRlciwgbWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge1xuICBMYXVuY2hEaWFsb2dTZXJ2aWNlLFxuICBMQVVOQ0hfQ0FMTEVSLFxufSBmcm9tICcuLi8uLi8uLi8uLi8uLi9sYXlvdXQvbGF1bmNoLWRpYWxvZy9pbmRleCc7XG5cbi8vIFRPRE8oIzEyMTY3KTogZGVwcmVjYXRpb25zIGNsZWFudXBcbi8qKlxuICogQGRlcHJlY2F0ZWQgc2luY2UgMy4zIC0gdXNlIGBMYXVuY2hEaWFsb2dTZXJ2aWNlYCBpbnN0ZWFkXG4gKi9cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgUmVwbGVuaXNobWVudE9yZGVyQ2FuY2VsbGF0aW9uTGF1bmNoRGlhbG9nU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBsYXVuY2hEaWFsb2dTZXJ2aWNlOiBMYXVuY2hEaWFsb2dTZXJ2aWNlKSB7fVxuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBzaW5jZSAzLjMgLSB1c2UgYExhdW5jaERpYWxvZ1NlcnZpY2Uub3BlbkRpYWxvZ2Agd2l0aCBMQVVOQ0hfQ0FMTEVSLlJFUExFTklTSE1FTlRfT1JERVIgaW5zdGVhZFxuICAgKi9cbiAgb3BlbkRpYWxvZyhcbiAgICBvcGVuRWxlbWVudD86IEVsZW1lbnRSZWYsXG4gICAgdmNyPzogVmlld0NvbnRhaW5lclJlZixcbiAgICBkYXRhPzogYW55XG4gICk6IE9ic2VydmFibGU8YW55PiB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy5sYXVuY2hEaWFsb2dTZXJ2aWNlLmxhdW5jaChcbiAgICAgIExBVU5DSF9DQUxMRVIuUkVQTEVOSVNITUVOVF9PUkRFUixcbiAgICAgIHZjcixcbiAgICAgIGRhdGFcbiAgICApO1xuXG4gICAgaWYgKGNvbXBvbmVudCkge1xuICAgICAgcmV0dXJuIGNvbWJpbmVMYXRlc3QoW1xuICAgICAgICBjb21wb25lbnQsXG4gICAgICAgIHRoaXMubGF1bmNoRGlhbG9nU2VydmljZS5kaWFsb2dDbG9zZSxcbiAgICAgIF0pLnBpcGUoXG4gICAgICAgIGZpbHRlcigoWywgY2xvc2VdKSA9PiBjbG9zZSAmJiBjbG9zZSAhPT0gdW5kZWZpbmVkKSxcbiAgICAgICAgdGFwKChbY29tcF0pID0+IHtcbiAgICAgICAgICBvcGVuRWxlbWVudD8ubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgIHRoaXMubGF1bmNoRGlhbG9nU2VydmljZS5jbGVhcihMQVVOQ0hfQ0FMTEVSLlJFUExFTklTSE1FTlRfT1JERVIpO1xuICAgICAgICAgIGNvbXAuZGVzdHJveSgpO1xuICAgICAgICB9KSxcbiAgICAgICAgbWFwKChbY29tcF0pID0+IGNvbXApXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuIl19