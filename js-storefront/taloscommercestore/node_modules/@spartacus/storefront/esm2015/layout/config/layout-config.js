import { Injectable } from '@angular/core';
import { Config } from '@spartacus/core';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
/**
 * The `BREAKPOINT` typing defaults to five default screen names:
 * xs, sm, md, lg, xl.
 *
 * The type can be extended to allow for custom screens, such as XLL or `tablet`.
 *
 * While the screen names are fully configurable, other features might have
 * pre-configured layout settings per screen. Page layouts or table configurations,
 * for example, are driven by screen size. In case you change the screen size or
 * introduce new screen names, you might loose out on these configurations.
 */
export var BREAKPOINT;
(function (BREAKPOINT) {
    BREAKPOINT["xs"] = "xs";
    BREAKPOINT["sm"] = "sm";
    BREAKPOINT["md"] = "md";
    BREAKPOINT["lg"] = "lg";
    BREAKPOINT["xl"] = "xl";
})(BREAKPOINT || (BREAKPOINT = {}));
/**
 * The LayoutConfig supports the configuration of page slots by page templates
 * or page sections, such as headers and footers. The configuration also supports
 * adaptive design per breakpoint (not per device type), so that the DOM is (re)rendered
 * por a given breakpoint.
 */
export class LayoutConfig {
}
LayoutConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function LayoutConfig_Factory() { return i0.ɵɵinject(i1.Config); }, token: LayoutConfig, providedIn: "root" });
LayoutConfig.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
                useExisting: Config,
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LWNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy9QYXRyeWsvRGVza3RvcC9zcGFydGFjdXMvcHJvamVjdHMvc3RvcmVmcm9udGxpYi9zcmMvIiwic291cmNlcyI6WyJsYXlvdXQvY29uZmlnL2xheW91dC1jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUF3QixNQUFNLGlCQUFpQixDQUFDOzs7QUFHL0Q7Ozs7Ozs7Ozs7R0FVRztBQUNILE1BQU0sQ0FBTixJQUFZLFVBTVg7QUFORCxXQUFZLFVBQVU7SUFDcEIsdUJBQVMsQ0FBQTtJQUNULHVCQUFTLENBQUE7SUFDVCx1QkFBUyxDQUFBO0lBQ1QsdUJBQVMsQ0FBQTtJQUNULHVCQUFTLENBQUE7QUFDWCxDQUFDLEVBTlcsVUFBVSxLQUFWLFVBQVUsUUFNckI7QUF3REQ7Ozs7O0dBS0c7QUFLSCxNQUFNLE9BQWdCLFlBQVk7Ozs7WUFKakMsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2dCQUNsQixXQUFXLEVBQUUsTUFBTTthQUNwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbmZpZywgRGVmZXJMb2FkaW5nU3RyYXRlZ3kgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHsgTGF1bmNoQ29uZmlnIH0gZnJvbSAnLi4vbGF1bmNoLWRpYWxvZy9pbmRleCc7XG5cbi8qKlxuICogVGhlIGBCUkVBS1BPSU5UYCB0eXBpbmcgZGVmYXVsdHMgdG8gZml2ZSBkZWZhdWx0IHNjcmVlbiBuYW1lczpcbiAqIHhzLCBzbSwgbWQsIGxnLCB4bC5cbiAqXG4gKiBUaGUgdHlwZSBjYW4gYmUgZXh0ZW5kZWQgdG8gYWxsb3cgZm9yIGN1c3RvbSBzY3JlZW5zLCBzdWNoIGFzIFhMTCBvciBgdGFibGV0YC5cbiAqXG4gKiBXaGlsZSB0aGUgc2NyZWVuIG5hbWVzIGFyZSBmdWxseSBjb25maWd1cmFibGUsIG90aGVyIGZlYXR1cmVzIG1pZ2h0IGhhdmVcbiAqIHByZS1jb25maWd1cmVkIGxheW91dCBzZXR0aW5ncyBwZXIgc2NyZWVuLiBQYWdlIGxheW91dHMgb3IgdGFibGUgY29uZmlndXJhdGlvbnMsXG4gKiBmb3IgZXhhbXBsZSwgYXJlIGRyaXZlbiBieSBzY3JlZW4gc2l6ZS4gSW4gY2FzZSB5b3UgY2hhbmdlIHRoZSBzY3JlZW4gc2l6ZSBvclxuICogaW50cm9kdWNlIG5ldyBzY3JlZW4gbmFtZXMsIHlvdSBtaWdodCBsb29zZSBvdXQgb24gdGhlc2UgY29uZmlndXJhdGlvbnMuXG4gKi9cbmV4cG9ydCBlbnVtIEJSRUFLUE9JTlQge1xuICB4cyA9ICd4cycsXG4gIHNtID0gJ3NtJyxcbiAgbWQgPSAnbWQnLFxuICBsZyA9ICdsZycsXG4gIHhsID0gJ3hsJyxcbn1cblxuZXhwb3J0IHR5cGUgTGF5b3V0U2VjdGlvbnMgPVxuICB8ICdoZWFkZXInXG4gIHwgJ2Zvb3RlcidcbiAgfCAnTGFuZGluZ1BhZ2UyVGVtcGxhdGUnXG4gIHwgc3RyaW5nO1xuXG5leHBvcnQgdHlwZSBTbG90Q29uZmlnID0ge1xuICAvKiogVGhlIGNtcyBwYWdlIHNsb3RzIGFyZSBtYXBwZWQgYnkgdGhlIGBzbG90LnBvc2l0aW9uYC4gKi9cbiAgc2xvdHM/OiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogVGhlIHBhZ2UgZm9sZCBpZGVudGlmaWVzIHRoZSBsYXN0IGV4cGVjdGVkIHBhZ2Ugc2xvdCBhYm92ZS10aGUtZm9sZC5cbiAgICogSXQncyBwZXJmZWN0bHkgZmluZSB0byBzcGVjaWZ5IHRoaXMgYnkgaW5kaWNhdGlvbiwgYnV0IGtlZXAgaW4gbWluZCB0aGF0XG4gICAqIGEgbW9yZSBwcmVjaXNlIGluZGljYXRpb24gd2lsbCBnYWluIGEgbW9yZSBwb3NpdGl2ZSBpbXBhY3Qgb24gcGVyZm9ybWFuY2UuXG4gICAqL1xuICBwYWdlRm9sZD86IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIFNsb3RHcm91cCA9IHtcbiAgLyoqIFRoZSBwYWdlIHNsb3QgY29uZmlndXJhdGlvbiBmb3IgbGFyZ2Ugc2NyZWVucyAqL1xuICBbQlJFQUtQT0lOVC5sZ10/OiBTbG90Q29uZmlnO1xuICAvKiogVGhlIHBhZ2Ugc2xvdCBjb25maWd1cmF0aW9uIGZvciBtZWRpdW0gc2NyZWVucyAqL1xuICBbQlJFQUtQT0lOVC5tZF0/OiBTbG90Q29uZmlnO1xuICAvKiogVGhlIHBhZ2Ugc2xvdCBjb25maWd1cmF0aW9uIGZvciBzbWFsbCBzY3JlZW5zICovXG4gIFtCUkVBS1BPSU5ULnNtXT86IFNsb3RDb25maWc7XG4gIC8qKiBUaGUgcGFnZSBzbG90IGNvbmZpZ3VyYXRpb24gZm9yIGV4dHJhIHNtYWxsIHNjcmVlbnMgKi9cbiAgW0JSRUFLUE9JTlQueHNdPzogU2xvdENvbmZpZztcbn07XG5cbmV4cG9ydCB0eXBlIExheW91dFNsb3RDb25maWcgPSB7XG4gIFtzZWN0aW9uIGluIExheW91dFNlY3Rpb25zXTogU2xvdENvbmZpZyB8IFNsb3RHcm91cCB8IExheW91dFNsb3RDb25maWc7XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIEJyZWFrUG9pbnQge1xuICAvKipcbiAgICogVGhlIG1pbmltdW0gc2NyZWVuIHdpZHRoLlxuICAgKi9cbiAgbWluPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgbWluaW11bSBzY3JlZW4gd2lkdGguXG4gICAqL1xuICBtYXg/OiBudW1iZXI7XG59XG5cbi8qKlxuICogVGhlIGBMYXlvdXRCcmVha1BvaW50c2AgY2FuIGJlIHVzZWQgdG8gY29uZmlndXJlIHRoZSBzaXplIG9mIGEgc3BlY2lmaWMgc2NyZWVuLiBUaGUgc2NyZWVuXG4gKiBhcmUgZGVmaW5lZCBieSBicmVha3BvaW50cywgd2l0aCBhIG1pbiBhbmQvb3IgbWF4IHZhbHVlLiBUaGUgYnJlYWtwb2ludCBzaXplIGlzIGluIHBpeGVscyxcbiAqIGhlbmNlIGEgbnVtZXJpYyB2YWx1ZSBpcyBleHBlY3RlZC5cbiAqL1xuZXhwb3J0IHR5cGUgTGF5b3V0QnJlYWtQb2ludHMgPSB7XG4gIFt0IGluIEJSRUFLUE9JTlRdPzogbnVtYmVyIHwgQnJlYWtQb2ludDtcbn07XG5cbi8qKlxuICogVGhlIExheW91dENvbmZpZyBzdXBwb3J0cyB0aGUgY29uZmlndXJhdGlvbiBvZiBwYWdlIHNsb3RzIGJ5IHBhZ2UgdGVtcGxhdGVzXG4gKiBvciBwYWdlIHNlY3Rpb25zLCBzdWNoIGFzIGhlYWRlcnMgYW5kIGZvb3RlcnMuIFRoZSBjb25maWd1cmF0aW9uIGFsc28gc3VwcG9ydHNcbiAqIGFkYXB0aXZlIGRlc2lnbiBwZXIgYnJlYWtwb2ludCAobm90IHBlciBkZXZpY2UgdHlwZSksIHNvIHRoYXQgdGhlIERPTSBpcyAocmUpcmVuZGVyZWRcbiAqIHBvciBhIGdpdmVuIGJyZWFrcG9pbnQuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxuICB1c2VFeGlzdGluZzogQ29uZmlnLFxufSlcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBMYXlvdXRDb25maWcge1xuICAvKipcbiAgICogVGhlIGJyZWFrcG9pbnQgY29uZmlndXJhdGlvbiBpcyB1c2VkIHRvIGRlZmluZWQgdmFyaW91cyBzY3JlZW5zLiBBIHNwZWNpZmljIHNjcmVlbiBuYW1lIGNhblxuICAgKiBiZSB1c2VkIHRvIGZ1cnRoZXIgY29uZmlndXJlIGNlcnRhaW4gZmVhdHVyZXMsIHN1Y2ggYXMgdGhlIG92ZXJhbGwgbGF5b3V0IG9yIHNwZWNpZmljXG4gICAqIGNvbXBvbmVudCBjb25maWd1cmF0aW9ucy5cbiAgICovXG4gIGJyZWFrcG9pbnRzPzogTGF5b3V0QnJlYWtQb2ludHM7XG5cbiAgbGF5b3V0U2xvdHM/OiBMYXlvdXRTbG90Q29uZmlnO1xuXG4gIC8qKlxuICAgKiBEZWZlcnJlZCBsb2FkaW5nIGlzIGEgdGVjaG5pcXVlIHRvIGhvbGQgb2Ygd2l0aCB0aGUgbG9hZGluZyAvIGNyZWF0aW9uXG4gICAqIG9mIERPTSBlbGVtZW50cyB3aGljaCBhcmUgbm90IG5vdCBpbiB0aGUgaW5pdGlhbCB2aWV3IHBvcnQuXG4gICAqIFRoaXMgdGVjaG5pcXVlIHdpbCBpbmNyZWFzZSBwZXJmb3JtYW5jZS5cbiAgICovXG4gIGRlZmVycmVkTG9hZGluZz86IHtcbiAgICAvKipcbiAgICAgKiBUaGUgZ2xvYmFsIHN0cmF0ZWd5IHdpbGwgYmUgdXNlZCBhcyBhIGZhbGxiYWNrIHN0cmF0ZWd5IGZvciBhbGwgRE9NIGNyZWF0aW9uLFxuICAgICAqIGJ1dCBjYW4gYmUgb3ZlcnJpZGRlbiBieSBsb2NhbCBjb25maWd1cmF0aW9uLCBpLmUuIGZvciBjbXMgY29tcG9uZW50cy5cbiAgICAgKi9cbiAgICBzdHJhdGVneT86IERlZmVyTG9hZGluZ1N0cmF0ZWd5O1xuICAgIC8qKlxuICAgICAqIFRoZSBpbnRlcnNlY3Rpb24gbWFyZ2luIGNvbnRhaW5zIHRoZSBvZmZzZXQgdXNlZCBieSB0aGUgSW50ZXJzZWN0aW9uIE9ic2VydmVyXG4gICAgICogdG8gb2JzZXJ2ZSBlbGVtZW50cyBvdXRzaWRlIHRoZSB2aWV3IHBvcnQuXG4gICAgICpcbiAgICAgKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0ludGVyc2VjdGlvbk9ic2VydmVyL3Jvb3RNYXJnaW5cbiAgICAgKi9cbiAgICBpbnRlcnNlY3Rpb25NYXJnaW4/OiBzdHJpbmc7XG4gIH07XG5cbiAgbGF1bmNoPzogTGF1bmNoQ29uZmlnO1xufVxuIl19