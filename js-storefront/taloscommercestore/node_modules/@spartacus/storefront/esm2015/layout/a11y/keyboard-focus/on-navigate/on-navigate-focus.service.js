import { DOCUMENT } from '@angular/common';
import { Inject, Injectable } from '@angular/core';
import { NavigationStart, Router } from '@angular/router';
import { filter, take } from 'rxjs/operators';
import { BreakpointService } from '../../../../layout/breakpoint/breakpoint.service';
import { KeyboardFocusConfig } from '../config';
import * as i0 from "@angular/core";
import * as i1 from "../config/keyboard-focus.config";
import * as i2 from "@angular/router";
import * as i3 from "@angular/common";
import * as i4 from "../../../breakpoint/breakpoint.service";
/**
 * Shared service for keyboard focus features called when the browser navigates.
 */
export class OnNavigateFocusService {
    constructor(config, router, document, breakpointService) {
        this.config = config;
        this.router = router;
        this.document = document;
        this.breakpointService = breakpointService;
    }
    /**
     * Reads configuration and enables features based on flags set.
     */
    initializeWithConfig() {
        var _a, _b, _c, _d;
        if ((_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.keyboardFocus) === null || _b === void 0 ? void 0 : _b.enableResetFocusOnNavigate) {
            this.setResetFocusOnNavigate(this.config.keyboardFocus.enableResetFocusOnNavigate);
        }
        if ((_d = (_c = this.config) === null || _c === void 0 ? void 0 : _c.keyboardFocus) === null || _d === void 0 ? void 0 : _d.enableResetViewOnNavigate) {
            this.setResetViewOnNavigate(this.config.keyboardFocus.enableResetViewOnNavigate);
        }
    }
    /**
     * Resets focus back to root element `<cx-storefront>` in the DOM tree when a navigation is started.
     * @param enable Enable or disable this feature. Set this to an array of BREAKPOINTS to enable for specified screen widths.
     */
    setResetFocusOnNavigate(enable) {
        var _a;
        (_a = this.resetFocusOnNavigate) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        if (enable) {
            this.resetFocusOnNavigate = this.router.events
                .pipe(filter((event) => event instanceof NavigationStart))
                .subscribe(() => {
                if (Array.isArray(enable)) {
                    this.breakpointService.breakpoint$
                        .pipe(take(1))
                        .subscribe((breakpoint) => {
                        if (enable.includes(breakpoint)) {
                            this.getStorefrontElement().focus();
                        }
                    });
                }
                else if (typeof enable === 'boolean') {
                    this.getStorefrontElement().focus();
                }
            });
        }
    }
    /**
     * Resets view back to root element `<cx-storefront>` in the DOM tree when a navigation is started.
     * @param enable Enable or disable this feature. Set this to an array of BREAKPOINTS to enable for specified screen widths.
     */
    setResetViewOnNavigate(enable) {
        var _a;
        (_a = this.resetViewOnNavigate) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        if (enable) {
            this.resetViewOnNavigate = this.router.events
                .pipe(filter((event) => event instanceof NavigationStart))
                .subscribe(() => {
                if (Array.isArray(enable)) {
                    this.breakpointService.breakpoint$
                        .pipe(take(1))
                        .subscribe((breakpoint) => {
                        if (enable.includes(breakpoint)) {
                            this.getStorefrontElement().scrollIntoView();
                        }
                    });
                }
                else if (typeof enable === 'boolean') {
                    this.getStorefrontElement().scrollIntoView();
                }
            });
        }
    }
    /**
     * Gets the root element `<cx-storefront>`.
     */
    getStorefrontElement() {
        return this.document.getElementsByTagName('cx-storefront')[0];
    }
}
OnNavigateFocusService.ɵprov = i0.ɵɵdefineInjectable({ factory: function OnNavigateFocusService_Factory() { return new OnNavigateFocusService(i0.ɵɵinject(i1.KeyboardFocusConfig), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.DOCUMENT), i0.ɵɵinject(i4.BreakpointService)); }, token: OnNavigateFocusService, providedIn: "root" });
OnNavigateFocusService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
OnNavigateFocusService.ctorParameters = () => [
    { type: KeyboardFocusConfig },
    { type: Router },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: BreakpointService }
];
//# sourceMappingURL=data:application/json;base64,