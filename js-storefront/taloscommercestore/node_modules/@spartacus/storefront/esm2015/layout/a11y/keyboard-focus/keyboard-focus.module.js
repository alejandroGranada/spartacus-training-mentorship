import { CommonModule } from '@angular/common';
import { APP_INITIALIZER, NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { ConfigModule, provideDefaultConfig } from '@spartacus/core';
import { defaultKeyboardFocusConfig } from './config/default-keyboard-focus.config';
import { FocusDirective } from './focus.directive';
import { OnNavigateFocusService } from './on-navigate/on-navigate-focus.service';
const directives = [
    // PersistFocusDirective,
    // VisibleFocusDirective,
    // BlockFocusDirective,
    // AutoFocusDirective,
    // EscapeFocusDirective,
    // LockFocusDirective,
    // TrapFocusDirective,
    // TabFocusDirective,
    FocusDirective,
];
export class KeyboardFocusModule {
}
KeyboardFocusModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    ConfigModule.withConfig(defaultKeyboardFocusConfig),
                    RouterModule,
                ],
                declarations: [...directives],
                providers: [
                    provideDefaultConfig(defaultKeyboardFocusConfig),
                    {
                        provide: APP_INITIALIZER,
                        useFactory: keyboardFocusFactory,
                        deps: [OnNavigateFocusService],
                        multi: true,
                    },
                ],
                exports: [...directives],
            },] }
];
/**
 *  Start keyboard focus services on app initialization.
 */
export function keyboardFocusFactory(onNavigateFocusService) {
    const isReady = () => onNavigateFocusService.initializeWithConfig();
    return isReady;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Ym9hcmQtZm9jdXMubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9wcm9qZWN0cy9zdG9yZWZyb250bGliL3NyYy8iLCJzb3VyY2VzIjpbImxheW91dC9hMTF5L2tleWJvYXJkLWZvY3VzL2tleWJvYXJkLWZvY3VzLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxZQUFZLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUNwRixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFFakYsTUFBTSxVQUFVLEdBQUc7SUFDakIseUJBQXlCO0lBQ3pCLHlCQUF5QjtJQUN6Qix1QkFBdUI7SUFDdkIsc0JBQXNCO0lBQ3RCLHdCQUF3QjtJQUN4QixzQkFBc0I7SUFDdEIsc0JBQXNCO0lBQ3RCLHFCQUFxQjtJQUNyQixjQUFjO0NBQ2YsQ0FBQztBQW9CRixNQUFNLE9BQU8sbUJBQW1COzs7WUFsQi9CLFFBQVEsU0FBQztnQkFDUixPQUFPLEVBQUU7b0JBQ1AsWUFBWTtvQkFDWixZQUFZLENBQUMsVUFBVSxDQUFDLDBCQUEwQixDQUFDO29CQUNuRCxZQUFZO2lCQUNiO2dCQUNELFlBQVksRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDO2dCQUM3QixTQUFTLEVBQUU7b0JBQ1Qsb0JBQW9CLENBQUMsMEJBQTBCLENBQUM7b0JBQ2hEO3dCQUNFLE9BQU8sRUFBRSxlQUFlO3dCQUN4QixVQUFVLEVBQUUsb0JBQW9CO3dCQUNoQyxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQzt3QkFDOUIsS0FBSyxFQUFFLElBQUk7cUJBQ1o7aUJBQ0Y7Z0JBQ0QsT0FBTyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUM7YUFDekI7O0FBR0Q7O0dBRUc7QUFDSCxNQUFNLFVBQVUsb0JBQW9CLENBQ2xDLHNCQUE4QztJQUU5QyxNQUFNLE9BQU8sR0FBRyxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0lBQ3BFLE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgQVBQX0lOSVRJQUxJWkVSLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IENvbmZpZ01vZHVsZSwgcHJvdmlkZURlZmF1bHRDb25maWcgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHsgZGVmYXVsdEtleWJvYXJkRm9jdXNDb25maWcgfSBmcm9tICcuL2NvbmZpZy9kZWZhdWx0LWtleWJvYXJkLWZvY3VzLmNvbmZpZyc7XG5pbXBvcnQgeyBGb2N1c0RpcmVjdGl2ZSB9IGZyb20gJy4vZm9jdXMuZGlyZWN0aXZlJztcbmltcG9ydCB7IE9uTmF2aWdhdGVGb2N1c1NlcnZpY2UgfSBmcm9tICcuL29uLW5hdmlnYXRlL29uLW5hdmlnYXRlLWZvY3VzLnNlcnZpY2UnO1xuXG5jb25zdCBkaXJlY3RpdmVzID0gW1xuICAvLyBQZXJzaXN0Rm9jdXNEaXJlY3RpdmUsXG4gIC8vIFZpc2libGVGb2N1c0RpcmVjdGl2ZSxcbiAgLy8gQmxvY2tGb2N1c0RpcmVjdGl2ZSxcbiAgLy8gQXV0b0ZvY3VzRGlyZWN0aXZlLFxuICAvLyBFc2NhcGVGb2N1c0RpcmVjdGl2ZSxcbiAgLy8gTG9ja0ZvY3VzRGlyZWN0aXZlLFxuICAvLyBUcmFwRm9jdXNEaXJlY3RpdmUsXG4gIC8vIFRhYkZvY3VzRGlyZWN0aXZlLFxuICBGb2N1c0RpcmVjdGl2ZSxcbl07XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGUsXG4gICAgQ29uZmlnTW9kdWxlLndpdGhDb25maWcoZGVmYXVsdEtleWJvYXJkRm9jdXNDb25maWcpLFxuICAgIFJvdXRlck1vZHVsZSxcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbLi4uZGlyZWN0aXZlc10sXG4gIHByb3ZpZGVyczogW1xuICAgIHByb3ZpZGVEZWZhdWx0Q29uZmlnKGRlZmF1bHRLZXlib2FyZEZvY3VzQ29uZmlnKSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBBUFBfSU5JVElBTElaRVIsXG4gICAgICB1c2VGYWN0b3J5OiBrZXlib2FyZEZvY3VzRmFjdG9yeSxcbiAgICAgIGRlcHM6IFtPbk5hdmlnYXRlRm9jdXNTZXJ2aWNlXSxcbiAgICAgIG11bHRpOiB0cnVlLFxuICAgIH0sXG4gIF0sXG4gIGV4cG9ydHM6IFsuLi5kaXJlY3RpdmVzXSxcbn0pXG5leHBvcnQgY2xhc3MgS2V5Ym9hcmRGb2N1c01vZHVsZSB7fVxuXG4vKipcbiAqICBTdGFydCBrZXlib2FyZCBmb2N1cyBzZXJ2aWNlcyBvbiBhcHAgaW5pdGlhbGl6YXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBrZXlib2FyZEZvY3VzRmFjdG9yeShcbiAgb25OYXZpZ2F0ZUZvY3VzU2VydmljZTogT25OYXZpZ2F0ZUZvY3VzU2VydmljZVxuKSB7XG4gIGNvbnN0IGlzUmVhZHkgPSAoKSA9PiBvbk5hdmlnYXRlRm9jdXNTZXJ2aWNlLmluaXRpYWxpemVXaXRoQ29uZmlnKCk7XG4gIHJldHVybiBpc1JlYWR5O1xufVxuIl19