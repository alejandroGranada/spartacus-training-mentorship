import { Injectable, RendererFactory2, } from '@angular/core';
import { SiteContextConfig, THEME_CONTEXT_ID } from '@spartacus/core';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
export class ThemeService {
    constructor(config, rendererFactory) {
        this.config = config;
        this.rendererFactory = rendererFactory;
    }
    /**
     * This function is to be called for the root component that is
     * bootstrapped.
     */
    init(rootComponent) {
        var _a;
        this.renderer = this.rendererFactory.createRenderer(null, null);
        this.rootComponent = rootComponent;
        // Theme value is a string. It is put in the generic multi-value
        // property of the SiteContextConfig. So the array's first item
        // is the theme value.
        this.setTheme((_a = this.config.context[THEME_CONTEXT_ID]) === null || _a === void 0 ? void 0 : _a[0]);
    }
    setTheme(theme) {
        if (theme) {
            const element = this.rootComponent.location.nativeElement;
            // remove the old theme
            this.renderer.removeClass(element, this.existingTheme);
            // add the new theme
            this.renderer.addClass(element, theme);
            this.existingTheme = theme;
        }
    }
}
ThemeService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ThemeService_Factory() { return new ThemeService(i0.ɵɵinject(i1.SiteContextConfig), i0.ɵɵinject(i0.RendererFactory2)); }, token: ThemeService, providedIn: "root" });
ThemeService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
ThemeService.ctorParameters = () => [
    { type: SiteContextConfig },
    { type: RendererFactory2 }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhlbWUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy9QYXRyeWsvRGVza3RvcC9zcGFydGFjdXMvcHJvamVjdHMvc3RvcmVmcm9udGxpYi9zcmMvIiwic291cmNlcyI6WyJsYXlvdXQvdGhlbWUvdGhlbWUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsVUFBVSxFQUVWLGdCQUFnQixHQUNqQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7O0FBR3RFLE1BQU0sT0FBTyxZQUFZO0lBS3ZCLFlBQ1ksTUFBeUIsRUFDekIsZUFBaUM7UUFEakMsV0FBTSxHQUFOLE1BQU0sQ0FBbUI7UUFDekIsb0JBQWUsR0FBZixlQUFlLENBQWtCO0lBQzFDLENBQUM7SUFFSjs7O09BR0c7SUFDSCxJQUFJLENBQUMsYUFBZ0M7O1FBQ25DLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1FBQ25DLGdFQUFnRTtRQUNoRSwrREFBK0Q7UUFDL0Qsc0JBQXNCO1FBQ3RCLElBQUksQ0FBQyxRQUFRLE9BQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsMENBQUcsQ0FBQyxFQUFFLENBQUM7SUFDNUQsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUFhO1FBQ3BCLElBQUksS0FBSyxFQUFFO1lBQ1QsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDO1lBQzFELHVCQUF1QjtZQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ3ZELG9CQUFvQjtZQUNwQixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDdkMsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7U0FDNUI7SUFDSCxDQUFDOzs7O1lBakNGLFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7OztZQUZ6QixpQkFBaUI7WUFGeEIsZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50UmVmLFxuICBJbmplY3RhYmxlLFxuICBSZW5kZXJlcjIsXG4gIFJlbmRlcmVyRmFjdG9yeTIsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2l0ZUNvbnRleHRDb25maWcsIFRIRU1FX0NPTlRFWFRfSUQgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIFRoZW1lU2VydmljZSB7XG4gIHByb3RlY3RlZCByb290Q29tcG9uZW50OiBDb21wb25lbnRSZWY8YW55PjtcbiAgcHJvdGVjdGVkIHJlbmRlcmVyOiBSZW5kZXJlcjI7XG4gIHByb3RlY3RlZCBleGlzdGluZ1RoZW1lOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGNvbmZpZzogU2l0ZUNvbnRleHRDb25maWcsXG4gICAgcHJvdGVjdGVkIHJlbmRlcmVyRmFjdG9yeTogUmVuZGVyZXJGYWN0b3J5MlxuICApIHt9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgdG8gYmUgY2FsbGVkIGZvciB0aGUgcm9vdCBjb21wb25lbnQgdGhhdCBpc1xuICAgKiBib290c3RyYXBwZWQuXG4gICAqL1xuICBpbml0KHJvb3RDb21wb25lbnQ6IENvbXBvbmVudFJlZjxhbnk+KTogdm9pZCB7XG4gICAgdGhpcy5yZW5kZXJlciA9IHRoaXMucmVuZGVyZXJGYWN0b3J5LmNyZWF0ZVJlbmRlcmVyKG51bGwsIG51bGwpO1xuICAgIHRoaXMucm9vdENvbXBvbmVudCA9IHJvb3RDb21wb25lbnQ7XG4gICAgLy8gVGhlbWUgdmFsdWUgaXMgYSBzdHJpbmcuIEl0IGlzIHB1dCBpbiB0aGUgZ2VuZXJpYyBtdWx0aS12YWx1ZVxuICAgIC8vIHByb3BlcnR5IG9mIHRoZSBTaXRlQ29udGV4dENvbmZpZy4gU28gdGhlIGFycmF5J3MgZmlyc3QgaXRlbVxuICAgIC8vIGlzIHRoZSB0aGVtZSB2YWx1ZS5cbiAgICB0aGlzLnNldFRoZW1lKHRoaXMuY29uZmlnLmNvbnRleHRbVEhFTUVfQ09OVEVYVF9JRF0/LlswXSk7XG4gIH1cblxuICBzZXRUaGVtZSh0aGVtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKHRoZW1lKSB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5yb290Q29tcG9uZW50LmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAvLyByZW1vdmUgdGhlIG9sZCB0aGVtZVxuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyhlbGVtZW50LCB0aGlzLmV4aXN0aW5nVGhlbWUpO1xuICAgICAgLy8gYWRkIHRoZSBuZXcgdGhlbWVcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3MoZWxlbWVudCwgdGhlbWUpO1xuICAgICAgdGhpcy5leGlzdGluZ1RoZW1lID0gdGhlbWU7XG4gICAgfVxuICB9XG59XG4iXX0=