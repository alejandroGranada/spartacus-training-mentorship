import { inject, InjectionToken } from '@angular/core';
import { DEFAULT_URL_MATCHER, UrlMatcherService, } from '@spartacus/core';
import { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';
export function getProductListingUrlMatcherFactory(service, defaultMatcherFactory) {
    const factory = (route) => {
        const defaultMatcher = defaultMatcherFactory(route);
        const suffixPLPMatcher = getSuffixUrlMatcher({
            marker: 'c',
            paramName: 'categoryCode',
        });
        return service.getCombined([defaultMatcher, suffixPLPMatcher]);
    };
    return factory;
}
/**
 * Injection token with url matcher factory for PLP.
 * The provided url matcher matches both:
 * - the configured `paths` from routing config and
 * - custom pattern  `** / c / :categoryCode`
 *
 * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER
 * or additional matchers can be added for a specific route.
 *
 * Note: Matchers will "match" a route, but do not contribute to the creation of the route, nor do they guard routes.
 */
export const PRODUCT_LISTING_URL_MATCHER = new InjectionToken('PRODUCT_LISTING_URL_MATCHER', {
    providedIn: 'root',
    factory: () => getProductListingUrlMatcherFactory(inject(UrlMatcherService), inject(DEFAULT_URL_MATCHER)),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1saXN0aW5nLXVybC1tYXRjaGVyLmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9wcm9qZWN0cy9zdG9yZWZyb250bGliL3NyYy8iLCJzb3VyY2VzIjpbImNtcy1wYWdlcy9wcm9kdWN0LWxpc3RpbmctcGFnZS9wcm9kdWN0LWxpc3RpbmctdXJsLW1hdGNoZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkQsT0FBTyxFQUNMLG1CQUFtQixFQUVuQixpQkFBaUIsR0FDbEIsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw4REFBOEQsQ0FBQztBQUVuRyxNQUFNLFVBQVUsa0NBQWtDLENBQ2hELE9BQTBCLEVBQzFCLHFCQUF3QztJQUV4QyxNQUFNLE9BQU8sR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFO1FBQy9CLE1BQU0sY0FBYyxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BELE1BQU0sZ0JBQWdCLEdBQUcsbUJBQW1CLENBQUM7WUFDM0MsTUFBTSxFQUFFLEdBQUc7WUFDWCxTQUFTLEVBQUUsY0FBYztTQUMxQixDQUFDLENBQUM7UUFDSCxPQUFPLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxjQUFjLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO0lBQ2pFLENBQUMsQ0FBQztJQUNGLE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUM7QUFFRDs7Ozs7Ozs7OztHQVVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQUcsSUFBSSxjQUFjLENBQzNELDZCQUE2QixFQUM3QjtJQUNFLFVBQVUsRUFBRSxNQUFNO0lBQ2xCLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FDWixrQ0FBa0MsQ0FDaEMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEVBQ3pCLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUM1QjtDQUNKLENBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluamVjdCwgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7XG4gIERFRkFVTFRfVVJMX01BVENIRVIsXG4gIFVybE1hdGNoZXJGYWN0b3J5LFxuICBVcmxNYXRjaGVyU2VydmljZSxcbn0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IGdldFN1ZmZpeFVybE1hdGNoZXIgfSBmcm9tICcuLi8uLi9jbXMtc3RydWN0dXJlL3JvdXRpbmcvc3VmZml4LXJvdXRlcy9zdWZmaXgtdXJsLW1hdGNoZXInO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJvZHVjdExpc3RpbmdVcmxNYXRjaGVyRmFjdG9yeShcbiAgc2VydmljZTogVXJsTWF0Y2hlclNlcnZpY2UsXG4gIGRlZmF1bHRNYXRjaGVyRmFjdG9yeTogVXJsTWF0Y2hlckZhY3Rvcnlcbik6IFVybE1hdGNoZXJGYWN0b3J5IHtcbiAgY29uc3QgZmFjdG9yeSA9IChyb3V0ZTogUm91dGUpID0+IHtcbiAgICBjb25zdCBkZWZhdWx0TWF0Y2hlciA9IGRlZmF1bHRNYXRjaGVyRmFjdG9yeShyb3V0ZSk7XG4gICAgY29uc3Qgc3VmZml4UExQTWF0Y2hlciA9IGdldFN1ZmZpeFVybE1hdGNoZXIoe1xuICAgICAgbWFya2VyOiAnYycsXG4gICAgICBwYXJhbU5hbWU6ICdjYXRlZ29yeUNvZGUnLFxuICAgIH0pO1xuICAgIHJldHVybiBzZXJ2aWNlLmdldENvbWJpbmVkKFtkZWZhdWx0TWF0Y2hlciwgc3VmZml4UExQTWF0Y2hlcl0pO1xuICB9O1xuICByZXR1cm4gZmFjdG9yeTtcbn1cblxuLyoqXG4gKiBJbmplY3Rpb24gdG9rZW4gd2l0aCB1cmwgbWF0Y2hlciBmYWN0b3J5IGZvciBQTFAuXG4gKiBUaGUgcHJvdmlkZWQgdXJsIG1hdGNoZXIgbWF0Y2hlcyBib3RoOlxuICogLSB0aGUgY29uZmlndXJlZCBgcGF0aHNgIGZyb20gcm91dGluZyBjb25maWcgYW5kXG4gKiAtIGN1c3RvbSBwYXR0ZXJuICBgKiogLyBjIC8gOmNhdGVnb3J5Q29kZWBcbiAqXG4gKiBJZiB0aGUgdGhpcyBtYXRjaGVyIGRvZXNuJ3QgZml0IHRoZSByZXF1aXJlbWVudHMsIGl0IGNhbiBiZSByZXBsYWNlZCB3aXRoIHRoZSBERUZBVUxUX1VSTF9NQVRDSEVSXG4gKiBvciBhZGRpdGlvbmFsIG1hdGNoZXJzIGNhbiBiZSBhZGRlZCBmb3IgYSBzcGVjaWZpYyByb3V0ZS5cbiAqXG4gKiBOb3RlOiBNYXRjaGVycyB3aWxsIFwibWF0Y2hcIiBhIHJvdXRlLCBidXQgZG8gbm90IGNvbnRyaWJ1dGUgdG8gdGhlIGNyZWF0aW9uIG9mIHRoZSByb3V0ZSwgbm9yIGRvIHRoZXkgZ3VhcmQgcm91dGVzLlxuICovXG5leHBvcnQgY29uc3QgUFJPRFVDVF9MSVNUSU5HX1VSTF9NQVRDSEVSID0gbmV3IEluamVjdGlvblRva2VuPFVybE1hdGNoZXJGYWN0b3J5PihcbiAgJ1BST0RVQ1RfTElTVElOR19VUkxfTUFUQ0hFUicsXG4gIHtcbiAgICBwcm92aWRlZEluOiAncm9vdCcsXG4gICAgZmFjdG9yeTogKCkgPT5cbiAgICAgIGdldFByb2R1Y3RMaXN0aW5nVXJsTWF0Y2hlckZhY3RvcnkoXG4gICAgICAgIGluamVjdChVcmxNYXRjaGVyU2VydmljZSksXG4gICAgICAgIGluamVjdChERUZBVUxUX1VSTF9NQVRDSEVSKVxuICAgICAgKSxcbiAgfVxuKTtcbiJdfQ==