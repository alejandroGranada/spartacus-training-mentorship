import { inject, InjectionToken } from '@angular/core';
import { DEFAULT_URL_MATCHER, UrlMatcherService, } from '@spartacus/core';
import { getSuffixUrlMatcher } from '../../cms-structure/routing/suffix-routes/suffix-url-matcher';
export function getProductDetailsUrlMatcherFactory(service, defaultMatcherFactory) {
    const factory = (route) => {
        const defaultMatcher = defaultMatcherFactory(route);
        const suffixPDPMatcher = getSuffixUrlMatcher({
            marker: 'p',
            paramName: 'productCode',
        });
        return service.getCombined([defaultMatcher, suffixPDPMatcher]);
    };
    return factory;
}
/**
 * Injection token with url matcher factory for PDP.
 * The provided url matcher matches both:
 * - the configured `paths` from routing config and
 * - custom pattern  `** / p / :productCode`
 *
 * If the this matcher doesn't fit the requirements, it can be replaced with the DEFAULT_URL_MATCHER
 * or additional matchers can be added for a specific route.
 *
 * Note: Matchers will "match" a route, but do not contribute to the creation of the route, nor do they guard routes.
 */
export const PRODUCT_DETAILS_URL_MATCHER = new InjectionToken('PRODUCT_DETAILS_URL_MATCHER', {
    providedIn: 'root',
    factory: () => getProductDetailsUrlMatcherFactory(inject(UrlMatcherService), inject(DEFAULT_URL_MATCHER)),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1kZXRhaWxzLXVybC1tYXRjaGVyLmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9wcm9qZWN0cy9zdG9yZWZyb250bGliL3NyYy8iLCJzb3VyY2VzIjpbImNtcy1wYWdlcy9wcm9kdWN0LWRldGFpbHMtcGFnZS9wcm9kdWN0LWRldGFpbHMtdXJsLW1hdGNoZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkQsT0FBTyxFQUNMLG1CQUFtQixFQUVuQixpQkFBaUIsR0FDbEIsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw4REFBOEQsQ0FBQztBQUVuRyxNQUFNLFVBQVUsa0NBQWtDLENBQ2hELE9BQTBCLEVBQzFCLHFCQUF3QztJQUV4QyxNQUFNLE9BQU8sR0FBRyxDQUFDLEtBQVksRUFBRSxFQUFFO1FBQy9CLE1BQU0sY0FBYyxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BELE1BQU0sZ0JBQWdCLEdBQUcsbUJBQW1CLENBQUM7WUFDM0MsTUFBTSxFQUFFLEdBQUc7WUFDWCxTQUFTLEVBQUUsYUFBYTtTQUN6QixDQUFDLENBQUM7UUFDSCxPQUFPLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxjQUFjLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO0lBQ2pFLENBQUMsQ0FBQztJQUNGLE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUM7QUFFRDs7Ozs7Ozs7OztHQVVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQUcsSUFBSSxjQUFjLENBQzNELDZCQUE2QixFQUM3QjtJQUNFLFVBQVUsRUFBRSxNQUFNO0lBQ2xCLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FDWixrQ0FBa0MsQ0FDaEMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEVBQ3pCLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUM1QjtDQUNKLENBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluamVjdCwgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7XG4gIERFRkFVTFRfVVJMX01BVENIRVIsXG4gIFVybE1hdGNoZXJGYWN0b3J5LFxuICBVcmxNYXRjaGVyU2VydmljZSxcbn0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IGdldFN1ZmZpeFVybE1hdGNoZXIgfSBmcm9tICcuLi8uLi9jbXMtc3RydWN0dXJlL3JvdXRpbmcvc3VmZml4LXJvdXRlcy9zdWZmaXgtdXJsLW1hdGNoZXInO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJvZHVjdERldGFpbHNVcmxNYXRjaGVyRmFjdG9yeShcbiAgc2VydmljZTogVXJsTWF0Y2hlclNlcnZpY2UsXG4gIGRlZmF1bHRNYXRjaGVyRmFjdG9yeTogVXJsTWF0Y2hlckZhY3Rvcnlcbik6IFVybE1hdGNoZXJGYWN0b3J5IHtcbiAgY29uc3QgZmFjdG9yeSA9IChyb3V0ZTogUm91dGUpID0+IHtcbiAgICBjb25zdCBkZWZhdWx0TWF0Y2hlciA9IGRlZmF1bHRNYXRjaGVyRmFjdG9yeShyb3V0ZSk7XG4gICAgY29uc3Qgc3VmZml4UERQTWF0Y2hlciA9IGdldFN1ZmZpeFVybE1hdGNoZXIoe1xuICAgICAgbWFya2VyOiAncCcsXG4gICAgICBwYXJhbU5hbWU6ICdwcm9kdWN0Q29kZScsXG4gICAgfSk7XG4gICAgcmV0dXJuIHNlcnZpY2UuZ2V0Q29tYmluZWQoW2RlZmF1bHRNYXRjaGVyLCBzdWZmaXhQRFBNYXRjaGVyXSk7XG4gIH07XG4gIHJldHVybiBmYWN0b3J5O1xufVxuXG4vKipcbiAqIEluamVjdGlvbiB0b2tlbiB3aXRoIHVybCBtYXRjaGVyIGZhY3RvcnkgZm9yIFBEUC5cbiAqIFRoZSBwcm92aWRlZCB1cmwgbWF0Y2hlciBtYXRjaGVzIGJvdGg6XG4gKiAtIHRoZSBjb25maWd1cmVkIGBwYXRoc2AgZnJvbSByb3V0aW5nIGNvbmZpZyBhbmRcbiAqIC0gY3VzdG9tIHBhdHRlcm4gIGAqKiAvIHAgLyA6cHJvZHVjdENvZGVgXG4gKlxuICogSWYgdGhlIHRoaXMgbWF0Y2hlciBkb2Vzbid0IGZpdCB0aGUgcmVxdWlyZW1lbnRzLCBpdCBjYW4gYmUgcmVwbGFjZWQgd2l0aCB0aGUgREVGQVVMVF9VUkxfTUFUQ0hFUlxuICogb3IgYWRkaXRpb25hbCBtYXRjaGVycyBjYW4gYmUgYWRkZWQgZm9yIGEgc3BlY2lmaWMgcm91dGUuXG4gKlxuICogTm90ZTogTWF0Y2hlcnMgd2lsbCBcIm1hdGNoXCIgYSByb3V0ZSwgYnV0IGRvIG5vdCBjb250cmlidXRlIHRvIHRoZSBjcmVhdGlvbiBvZiB0aGUgcm91dGUsIG5vciBkbyB0aGV5IGd1YXJkIHJvdXRlcy5cbiAqL1xuZXhwb3J0IGNvbnN0IFBST0RVQ1RfREVUQUlMU19VUkxfTUFUQ0hFUiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxVcmxNYXRjaGVyRmFjdG9yeT4oXG4gICdQUk9EVUNUX0RFVEFJTFNfVVJMX01BVENIRVInLFxuICB7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxuICAgIGZhY3Rvcnk6ICgpID0+XG4gICAgICBnZXRQcm9kdWN0RGV0YWlsc1VybE1hdGNoZXJGYWN0b3J5KFxuICAgICAgICBpbmplY3QoVXJsTWF0Y2hlclNlcnZpY2UpLFxuICAgICAgICBpbmplY3QoREVGQVVMVF9VUkxfTUFUQ0hFUilcbiAgICAgICksXG4gIH1cbik7XG4iXX0=