import { Injectable } from '@angular/core';
import { createFrom, EventService, FeatureConfigService, } from '@spartacus/core';
import { filter, map } from 'rxjs/operators';
import { NavigationEvent } from '../navigation/navigation.event';
import { HomePageEvent } from './home-page.events';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
export class HomePageEventBuilder {
    constructor(eventService, 
    // TODO: #10896 - remove this
    /** @deprecated @since 3.1 - this will be removed in 4.0 */ featureConfigService) {
        this.eventService = eventService;
        this.featureConfigService = featureConfigService;
        this.register();
    }
    register() {
        this.eventService.register(HomePageEvent, this.buildHomePageEvent());
    }
    buildHomePageEvent() {
        return this.eventService.get(NavigationEvent).pipe(filter((navigationEvent) => navigationEvent.semanticRoute === 'home'), map((navigationEvent) => createFrom(HomePageEvent, Object.assign(Object.assign({}, this.createDeprecatedPageEvent(navigationEvent)), { navigation: Object.assign({}, navigationEvent) }))));
    }
    createDeprecatedPageEvent(navigationEvent) {
        if (!this.featureConfigService ||
            this.featureConfigService.isLevel('!3.1')) {
            return Object.assign({}, navigationEvent);
        }
        return undefined;
    }
}
HomePageEventBuilder.ɵprov = i0.ɵɵdefineInjectable({ factory: function HomePageEventBuilder_Factory() { return new HomePageEventBuilder(i0.ɵɵinject(i1.EventService), i0.ɵɵinject(i1.FeatureConfigService)); }, token: HomePageEventBuilder, providedIn: "root" });
HomePageEventBuilder.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
HomePageEventBuilder.ctorParameters = () => [
    { type: EventService },
    { type: FeatureConfigService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9tZS1wYWdlLWV2ZW50LmJ1aWxkZXIuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvUGF0cnlrL0Rlc2t0b3Avc3BhcnRhY3VzL3Byb2plY3RzL3N0b3JlZnJvbnRsaWIvc3JjLyIsInNvdXJjZXMiOlsiZXZlbnRzL2hvbWUvaG9tZS1wYWdlLWV2ZW50LmJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQ0wsVUFBVSxFQUNWLFlBQVksRUFDWixvQkFBb0IsR0FDckIsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUVqRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7OztBQUtuRCxNQUFNLE9BQU8sb0JBQW9CO0lBQy9CLFlBQ1ksWUFBMEI7SUFDcEMsNkJBQTZCO0lBQzdCLDJEQUEyRCxDQUFXLG9CQUEyQztRQUZ2RyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUVrQyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXVCO1FBRWpILElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNsQixDQUFDO0lBRVMsUUFBUTtRQUNoQixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRVMsa0JBQWtCO1FBQzFCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUMsSUFBSSxDQUNoRCxNQUFNLENBQUMsQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxhQUFhLEtBQUssTUFBTSxDQUFDLEVBQ3JFLEdBQUcsQ0FBQyxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQ3RCLFVBQVUsQ0FBQyxhQUFhLGtDQUNuQixJQUFJLENBQUMseUJBQXlCLENBQUMsZUFBZSxDQUFDLEtBQ2xELFVBQVUsb0JBQU8sZUFBZSxLQUNoQyxDQUNILENBQ0YsQ0FBQztJQUNKLENBQUM7SUFFTyx5QkFBeUIsQ0FDL0IsZUFBZ0M7UUFFaEMsSUFDRSxDQUFDLElBQUksQ0FBQyxvQkFBb0I7WUFDMUIsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFDekM7WUFDQSx5QkFBWSxlQUFlLEVBQUc7U0FDL0I7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDOzs7O1lBdENGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7O1lBWEMsWUFBWTtZQUNaLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIGNyZWF0ZUZyb20sXG4gIEV2ZW50U2VydmljZSxcbiAgRmVhdHVyZUNvbmZpZ1NlcnZpY2UsXG59IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE5hdmlnYXRpb25FdmVudCB9IGZyb20gJy4uL25hdmlnYXRpb24vbmF2aWdhdGlvbi5ldmVudCc7XG5pbXBvcnQgeyBQYWdlRXZlbnQgfSBmcm9tICcuLi9wYWdlL3BhZ2UuZXZlbnRzJztcbmltcG9ydCB7IEhvbWVQYWdlRXZlbnQgfSBmcm9tICcuL2hvbWUtcGFnZS5ldmVudHMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgSG9tZVBhZ2VFdmVudEJ1aWxkZXIge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgZXZlbnRTZXJ2aWNlOiBFdmVudFNlcnZpY2UsXG4gICAgLy8gVE9ETzogIzEwODk2IC0gcmVtb3ZlIHRoaXNcbiAgICAvKiogQGRlcHJlY2F0ZWQgQHNpbmNlIDMuMSAtIHRoaXMgd2lsbCBiZSByZW1vdmVkIGluIDQuMCAqLyBwcm90ZWN0ZWQgZmVhdHVyZUNvbmZpZ1NlcnZpY2U/OiBGZWF0dXJlQ29uZmlnU2VydmljZVxuICApIHtcbiAgICB0aGlzLnJlZ2lzdGVyKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVnaXN0ZXIoKTogdm9pZCB7XG4gICAgdGhpcy5ldmVudFNlcnZpY2UucmVnaXN0ZXIoSG9tZVBhZ2VFdmVudCwgdGhpcy5idWlsZEhvbWVQYWdlRXZlbnQoKSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYnVpbGRIb21lUGFnZUV2ZW50KCk6IE9ic2VydmFibGU8SG9tZVBhZ2VFdmVudD4ge1xuICAgIHJldHVybiB0aGlzLmV2ZW50U2VydmljZS5nZXQoTmF2aWdhdGlvbkV2ZW50KS5waXBlKFxuICAgICAgZmlsdGVyKChuYXZpZ2F0aW9uRXZlbnQpID0+IG5hdmlnYXRpb25FdmVudC5zZW1hbnRpY1JvdXRlID09PSAnaG9tZScpLFxuICAgICAgbWFwKChuYXZpZ2F0aW9uRXZlbnQpID0+XG4gICAgICAgIGNyZWF0ZUZyb20oSG9tZVBhZ2VFdmVudCwge1xuICAgICAgICAgIC4uLnRoaXMuY3JlYXRlRGVwcmVjYXRlZFBhZ2VFdmVudChuYXZpZ2F0aW9uRXZlbnQpLFxuICAgICAgICAgIG5hdmlnYXRpb246IHsgLi4ubmF2aWdhdGlvbkV2ZW50IH0sXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlRGVwcmVjYXRlZFBhZ2VFdmVudChcbiAgICBuYXZpZ2F0aW9uRXZlbnQ6IE5hdmlnYXRpb25FdmVudFxuICApOiBQYWdlRXZlbnQgfCB1bmRlZmluZWQge1xuICAgIGlmIChcbiAgICAgICF0aGlzLmZlYXR1cmVDb25maWdTZXJ2aWNlIHx8XG4gICAgICB0aGlzLmZlYXR1cmVDb25maWdTZXJ2aWNlLmlzTGV2ZWwoJyEzLjEnKVxuICAgICkge1xuICAgICAgcmV0dXJuIHsgLi4ubmF2aWdhdGlvbkV2ZW50IH07XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cbiJdfQ==