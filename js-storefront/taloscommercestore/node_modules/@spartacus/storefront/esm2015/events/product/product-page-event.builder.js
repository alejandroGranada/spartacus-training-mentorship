import { Injectable } from '@angular/core';
import { createFrom, EventService, FeatureConfigService, ProductSearchService, ProductService, } from '@spartacus/core';
import { EMPTY } from 'rxjs';
import { filter, map, skip, switchMap, take } from 'rxjs/operators';
import { NavigationEvent } from '../navigation/navigation.event';
import { CategoryPageResultsEvent, ProductDetailsPageEvent, SearchPageResultsEvent, } from './product-page.events';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
export class ProductPageEventBuilder {
    constructor(eventService, productService, productSearchService, 
    // TODO: #10896 - remove this
    /** @deprecated @since 3.1 - this will be removed in 4.0 */ featureConfigService) {
        this.eventService = eventService;
        this.productService = productService;
        this.productSearchService = productSearchService;
        this.featureConfigService = featureConfigService;
        this.register();
    }
    register() {
        this.eventService.register(SearchPageResultsEvent, this.buildSearchPageResultsEvent());
        this.eventService.register(ProductDetailsPageEvent, this.buildProductDetailsPageEvent());
        this.eventService.register(CategoryPageResultsEvent, this.buildCategoryResultsPageEvent());
    }
    buildProductDetailsPageEvent() {
        return this.eventService.get(NavigationEvent).pipe(filter((navigationEvent) => navigationEvent.semanticRoute === 'product'), switchMap((navigationEvent) => this.productService.get(navigationEvent.context.id).pipe(filter((product) => Boolean(product)), take(1), map((product) => createFrom(ProductDetailsPageEvent, Object.assign(Object.assign({}, this.createDeprecatedPageEvent(navigationEvent)), { navigation: Object.assign({}, navigationEvent), categories: product.categories, code: product.code, name: product.name, price: product.price }))))));
    }
    buildCategoryResultsPageEvent() {
        const searchResults$ = this.productSearchService.getResults().pipe(
        // skipping the initial value, and preventing emission of the previous search state
        skip(1));
        return this.eventService.get(NavigationEvent).pipe(switchMap((navigationEvent) => {
            if ((navigationEvent === null || navigationEvent === void 0 ? void 0 : navigationEvent.semanticRoute) !== 'category') {
                return EMPTY;
            }
            return searchResults$.pipe(map((searchResults) => {
                var _a, _b, _c;
                return createFrom(CategoryPageResultsEvent, Object.assign(Object.assign(Object.assign({}, this.createDeprecatedPageEvent(navigationEvent)), { navigation: Object.assign({}, navigationEvent) }), {
                    categoryCode: (_a = navigationEvent === null || navigationEvent === void 0 ? void 0 : navigationEvent.context) === null || _a === void 0 ? void 0 : _a.id,
                    numberOfResults: (_b = searchResults === null || searchResults === void 0 ? void 0 : searchResults.pagination) === null || _b === void 0 ? void 0 : _b.totalResults,
                    categoryName: (_c = searchResults.breadcrumbs) === null || _c === void 0 ? void 0 : _c[0].facetValueName,
                }));
            }));
        }));
    }
    buildSearchPageResultsEvent() {
        const searchResults$ = this.productSearchService.getResults().pipe(
        // skipping the initial value, and preventing emission of the previous search state
        skip(1));
        return this.eventService.get(NavigationEvent).pipe(switchMap((navigationEvent) => {
            if ((navigationEvent === null || navigationEvent === void 0 ? void 0 : navigationEvent.semanticRoute) !== 'search') {
                return EMPTY;
            }
            return searchResults$.pipe(map((searchResults) => {
                var _a;
                return createFrom(SearchPageResultsEvent, Object.assign(Object.assign(Object.assign({}, this.createDeprecatedPageEvent(navigationEvent)), { navigation: Object.assign({}, navigationEvent) }), {
                    searchTerm: searchResults === null || searchResults === void 0 ? void 0 : searchResults.freeTextSearch,
                    numberOfResults: (_a = searchResults === null || searchResults === void 0 ? void 0 : searchResults.pagination) === null || _a === void 0 ? void 0 : _a.totalResults,
                }));
            }));
        }));
    }
    // TODO: #10896 - remove this method
    createDeprecatedPageEvent(navigationEvent) {
        if (!this.featureConfigService ||
            this.featureConfigService.isLevel('!3.1')) {
            return Object.assign({}, navigationEvent);
        }
        return undefined;
    }
}
ProductPageEventBuilder.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProductPageEventBuilder_Factory() { return new ProductPageEventBuilder(i0.ɵɵinject(i1.EventService), i0.ɵɵinject(i1.ProductService), i0.ɵɵinject(i1.ProductSearchService), i0.ɵɵinject(i1.FeatureConfigService)); }, token: ProductPageEventBuilder, providedIn: "root" });
ProductPageEventBuilder.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
ProductPageEventBuilder.ctorParameters = () => [
    { type: EventService },
    { type: ProductService },
    { type: ProductSearchService },
    { type: FeatureConfigService }
];
//# sourceMappingURL=data:application/json;base64,