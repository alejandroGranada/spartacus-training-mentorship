import { OnDestroy, OnInit } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { ActiveCartService, FeatureConfigService, MultiCartService, OrderEntry, PromotionLocation, SelectiveCartService, UserIdService } from '@spartacus/core';
import { Observable, Subscription } from 'rxjs';
import { CartItemComponentOptions } from '../cart-item/cart-item.component';
export declare class CartItemListComponent implements OnInit, OnDestroy {
    protected activeCartService: ActiveCartService;
    protected selectiveCartService: SelectiveCartService;
    featureConfigService?: FeatureConfigService;
    protected userIdService?: UserIdService;
    protected multiCartService?: MultiCartService;
    protected subscription: Subscription;
    protected userId: string;
    readonly: boolean;
    hasHeader: boolean;
    options: CartItemComponentOptions;
    cartId: string;
    private _items;
    form: FormGroup;
    set items(items: OrderEntry[]);
    get items(): OrderEntry[];
    promotionLocation: PromotionLocation;
    set setLoading(value: boolean);
    /**
     * @deprecated since version 3.1
     * Use constructor(activeCartService: ActiveCartService, selectiveCartService: SelectiveCartService, featureConfigService: FeatureConfigService, userIdService: UserIdService, multiCartService: MultiCartService); instead
     */
    constructor(activeCartService: ActiveCartService, selectiveCartService: SelectiveCartService);
    /**
     * @deprecated since version 3.2
     * Use constructor(activeCartService: ActiveCartService, selectiveCartService: SelectiveCartService, featureConfigService: FeatureConfigService, userIdService: UserIdService, multiCartService: MultiCartService); instead
     */
    constructor(activeCartService: ActiveCartService, selectiveCartService: SelectiveCartService, featureConfigService: FeatureConfigService);
    constructor(activeCartService: ActiveCartService, selectiveCartService: SelectiveCartService, featureConfigService: FeatureConfigService, userIdService: UserIdService, multiCartService: MultiCartService);
    ngOnInit(): void;
    /**
     * Resolves items passed to component input and updates 'items' field
     */
    protected resolveItems(items: OrderEntry[]): void;
    /**
     * Creates form models for list items
     */
    protected createForm(): void;
    protected getControlName(item: OrderEntry): string;
    removeEntry(item: OrderEntry): void;
    getControl(item: OrderEntry): Observable<FormGroup>;
    ngOnDestroy(): void;
}
