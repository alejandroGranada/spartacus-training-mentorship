import { OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { FormControl } from '@angular/forms';
import { OrderEntry, PromotionLocation, PromotionResult } from '@spartacus/core';
import { Observable } from 'rxjs';
import { PromotionService } from '../../../../shared/services/promotion/promotion.service';
import { ICON_TYPE } from '../../../misc/icon/icon.model';
import { CartOutlets } from '../../cart-outlets.model';
import { CartItemContextSource } from './model/cart-item-context-source.model';
/**
 * @deprecated since 3.0 - use `OrderEntry` instead
 */
export interface Item {
    entryNumber?: number;
    product?: any;
    quantity?: any;
    basePrice?: any;
    totalPrice?: any;
    updateable?: boolean;
    statusSummaryList?: any[];
    configurationInfos?: any[];
}
export interface CartItemComponentOptions {
    isSaveForLater?: boolean;
    optionalBtn?: any;
}
export declare class CartItemComponent implements OnInit, OnChanges {
    protected promotionService: PromotionService;
    protected cartItemContextSource?: CartItemContextSource;
    compact: boolean;
    item: OrderEntry;
    readonly: boolean;
    quantityControl: FormControl;
    promotionLocation: PromotionLocation;
    options: CartItemComponentOptions;
    appliedProductPromotions$: Observable<PromotionResult[]>;
    iconTypes: typeof ICON_TYPE;
    readonly CartOutlets: typeof CartOutlets;
    constructor(promotionService: PromotionService, cartItemContextSource: CartItemContextSource);
    /**
     * @deprecated since 3.1
     */
    constructor(promotionService: PromotionService);
    ngOnInit(): void;
    ngOnChanges(changes?: SimpleChanges): void;
    isProductOutOfStock(product: any): boolean;
    removeItem(): void;
}
