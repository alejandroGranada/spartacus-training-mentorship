import { Inject, Injectable, NgZone, Optional } from '@angular/core';
import { combineLatest } from 'rxjs';
import { filter, take, takeWhile } from 'rxjs/operators';
import { CmsService } from '../../cms/facade/cms.service';
import { PageType } from '../../model/cms.model';
import { RoutingService } from '../../routing/facade/routing.service';
import { BaseSiteService } from '../../site-context/facade/base-site.service';
import { WindowRef } from '../../window/window-ref';
import { SMART_EDIT_MODULE_TOKEN } from '../smart-edit.token';
import * as i0 from "@angular/core";
import * as i1 from "../../cms/facade/cms.service";
import * as i2 from "../../routing/facade/routing.service";
import * as i3 from "../../site-context/facade/base-site.service";
import * as i4 from "../../window/window-ref";
import * as i5 from "../smart-edit.token";
/**
 * @deprecated since 3.2, use smartedit lib instead
 */
export class SmartEditService {
    constructor(cmsService, routingService, baseSiteService, zone, winRef, moduleToken) {
        this.cmsService = cmsService;
        this.routingService = routingService;
        this.baseSiteService = baseSiteService;
        this.zone = zone;
        this.winRef = winRef;
        this.moduleToken = moduleToken;
        this.isPreviewPage = false;
        this._launchedInSmartEdit = false;
        this.getCmsTicket();
        if (winRef.nativeWindow) {
            const window = winRef.nativeWindow;
            // rerender components and slots after editing
            window.smartedit = window.smartedit || {};
            window.smartedit.renderComponent = (componentId, componentType, parentId) => {
                return this.renderComponent(componentId, componentType, parentId);
            };
            // reprocess page
            window.smartedit.reprocessPage = this.reprocessPage;
        }
    }
    get cmsTicketId() {
        return this._cmsTicketId;
    }
    getCmsTicket() {
        combineLatest([
            this.cmsService.getCurrentPage(),
            this.routingService.getRouterState(),
        ])
            .pipe(takeWhile(([cmsPage]) => cmsPage === undefined), filter(([, routerState]) => {
            if (routerState.nextState && !this._cmsTicketId) {
                this._cmsTicketId =
                    routerState.nextState.queryParams['cmsTicketId'];
                if (this._cmsTicketId) {
                    return true;
                }
            }
            return false;
        }), take(1))
            .subscribe(() => {
            this._launchedInSmartEdit = true;
            this.getDefaultPreviewCode();
        });
    }
    getDefaultPreviewCode() {
        this.baseSiteService
            .get()
            .pipe(filter(Boolean), take(1))
            .subscribe((site) => {
            this.defaultPreviewCategoryCode = site.defaultPreviewCategoryCode;
            this.defaultPreviewProductCode = site.defaultPreviewProductCode;
            this.addPageContract();
        });
    }
    addPageContract() {
        this.cmsService.getCurrentPage().subscribe((cmsPage) => {
            if (cmsPage && this._cmsTicketId) {
                this._currentPageId = cmsPage.pageId;
                // before adding contract to page, we need redirect to that page
                this.goToPreviewPage(cmsPage);
                // remove old page contract
                const previousContract = [];
                Array.from(this.winRef.document.body.classList).forEach((attr) => previousContract.push(attr));
                previousContract.forEach((attr) => this.winRef.document.body.classList.remove(attr));
                // add new page contract
                if (cmsPage.properties && cmsPage.properties.smartedit) {
                    const seClasses = cmsPage.properties.smartedit.classes.split(' ');
                    seClasses.forEach((classItem) => {
                        this.winRef.document.body.classList.add(classItem);
                    });
                }
            }
        });
    }
    goToPreviewPage(cmsPage) {
        // only the first page is the smartedit preview page
        if (!this.isPreviewPage) {
            this.isPreviewPage = true;
            if (cmsPage.type === PageType.PRODUCT_PAGE &&
                this.defaultPreviewProductCode) {
                this.routingService.go({
                    cxRoute: 'product',
                    params: { code: this.defaultPreviewProductCode, name: '' },
                });
            }
            else if (cmsPage.type === PageType.CATEGORY_PAGE &&
                this.defaultPreviewCategoryCode) {
                this.routingService.go({
                    cxRoute: 'category',
                    params: { code: this.defaultPreviewCategoryCode },
                });
            }
        }
    }
    renderComponent(componentId, componentType, parentId) {
        if (componentId) {
            this.zone.run(() => {
                // without parentId, it is slot
                if (!parentId) {
                    if (this._currentPageId) {
                        this.cmsService.refreshPageById(this._currentPageId);
                    }
                    else {
                        this.cmsService.refreshLatestPage();
                    }
                }
                else if (componentType) {
                    this.cmsService.refreshComponent(componentId);
                }
            });
        }
        return true;
    }
    reprocessPage() {
        // TODO: reprocess page API
    }
    /**
     * Whether the app launched in smart edit
     */
    isLaunchedInSmartEdit() {
        return this.moduleToken && this._launchedInSmartEdit;
    }
}
SmartEditService.ɵprov = i0.ɵɵdefineInjectable({ factory: function SmartEditService_Factory() { return new SmartEditService(i0.ɵɵinject(i1.CmsService), i0.ɵɵinject(i2.RoutingService), i0.ɵɵinject(i3.BaseSiteService), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i4.WindowRef), i0.ɵɵinject(i5.SMART_EDIT_MODULE_TOKEN, 8)); }, token: SmartEditService, providedIn: "root" });
SmartEditService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
SmartEditService.ctorParameters = () => [
    { type: CmsService },
    { type: RoutingService },
    { type: BaseSiteService },
    { type: NgZone },
    { type: WindowRef },
    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [SMART_EDIT_MODULE_TOKEN,] }] }
];
//# sourceMappingURL=data:application/json;base64,