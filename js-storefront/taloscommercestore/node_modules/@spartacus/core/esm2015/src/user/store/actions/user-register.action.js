import { PROCESS_FEATURE } from '../../../process/store/process-state';
import { StateUtils } from '../../../state/utils/index';
import { REGISTER_USER_PROCESS_ID, REMOVE_USER_PROCESS_ID, } from '../user-state';
export const REGISTER_USER = '[User] Register User';
export const REGISTER_USER_FAIL = '[User] Register User Fail';
export const REGISTER_USER_SUCCESS = '[User] Register User Success';
export const RESET_REGISTER_USER_PROCESS = '[User] Reset Register User Process';
export const REGISTER_GUEST = '[User] Register Guest';
export const REGISTER_GUEST_FAIL = '[User] Register Guest Fail';
export const REGISTER_GUEST_SUCCESS = '[User] Register Guest Success';
export const REMOVE_USER = '[User] Remove User';
export const REMOVE_USER_FAIL = '[User] Remove User Fail';
export const REMOVE_USER_SUCCESS = '[User] Remove User Success';
export const REMOVE_USER_RESET = '[User] Reset Remove User Process State';
export class RegisterUser extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);
        this.payload = payload;
        this.type = REGISTER_USER;
    }
}
/**
 * @deprecated since 3.2, moved to `@spartacus/user/profile/core`
 */
export class RegisterUserFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID, payload);
        this.payload = payload;
        this.type = REGISTER_USER_FAIL;
    }
}
/**
 * @deprecated since 3.2, moved to `@spartacus/user/profile/core`
 */
export class RegisterUserSuccess extends StateUtils.EntitySuccessAction {
    constructor() {
        super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);
        this.type = REGISTER_USER_SUCCESS;
    }
}
/**
 * @deprecated since 3.2, moved to `@spartacus/user/profile/core`
 */
export class ResetRegisterUserProcess extends StateUtils.EntityLoaderResetAction {
    constructor() {
        super(PROCESS_FEATURE, REGISTER_USER_PROCESS_ID);
        this.type = RESET_REGISTER_USER_PROCESS;
    }
}
export class RegisterGuest {
    constructor(payload) {
        this.payload = payload;
        this.type = REGISTER_GUEST;
    }
}
/**
 * @deprecated since 3.2, moved to `@spartacus/user/profile/core`
 */
export class RegisterGuestFail {
    constructor(payload) {
        this.payload = payload;
        this.type = REGISTER_GUEST_FAIL;
    }
}
/**
 * @deprecated since 3.2, moved to `@spartacus/user/profile/core`
 */
export class RegisterGuestSuccess {
    constructor() {
        this.type = REGISTER_GUEST_SUCCESS;
    }
}
/**
 * @deprecated since 3.2, moved to `@spartacus/user/profile/core`
 */
export class RemoveUser extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);
        this.payload = payload;
        this.type = REMOVE_USER;
    }
}
export class RemoveUserFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID, payload);
        this.payload = payload;
        this.type = REMOVE_USER_FAIL;
    }
}
export class RemoveUserSuccess extends StateUtils.EntitySuccessAction {
    constructor() {
        super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);
        this.type = REMOVE_USER_SUCCESS;
    }
}
export class RemoveUserReset extends StateUtils.EntityLoaderResetAction {
    constructor() {
        super(PROCESS_FEATURE, REMOVE_USER_PROCESS_ID);
        this.type = REMOVE_USER_RESET;
    }
}
//# sourceMappingURL=data:application/json;base64,