import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { SiteContextActions } from '../../../site-context/store/actions/index';
import { normalizeHttpError } from '../../../util/normalize-http-error';
import { UserOrderConnector, UserReplenishmentOrderConnector, } from '../../connectors/index';
import { UserActions } from '../actions/index';
export class UserOrdersEffect {
    constructor(actions$, orderConnector, replenishmentOrderConnector) {
        this.actions$ = actions$;
        this.orderConnector = orderConnector;
        this.replenishmentOrderConnector = replenishmentOrderConnector;
        this.loadUserOrders$ = this.actions$.pipe(ofType(UserActions.LOAD_USER_ORDERS), map((action) => action.payload), switchMap((payload) => {
            return (Boolean(payload.replenishmentOrderCode)
                ? this.replenishmentOrderConnector.loadReplenishmentDetailsHistory(payload.userId, payload.replenishmentOrderCode, payload.pageSize, payload.currentPage, payload.sort)
                : this.orderConnector.getHistory(payload.userId, payload.pageSize, payload.currentPage, payload.sort)).pipe(map((orders) => {
                return new UserActions.LoadUserOrdersSuccess(orders);
            }), catchError((error) => of(new UserActions.LoadUserOrdersFail(normalizeHttpError(error)))));
        }));
        this.resetUserOrders$ = this.actions$.pipe(ofType(SiteContextActions.LANGUAGE_CHANGE), map(() => {
            return new UserActions.ClearUserOrders();
        }));
    }
}
UserOrdersEffect.decorators = [
    { type: Injectable }
];
UserOrdersEffect.ctorParameters = () => [
    { type: Actions },
    { type: UserOrderConnector },
    { type: UserReplenishmentOrderConnector }
];
__decorate([
    Effect()
], UserOrdersEffect.prototype, "loadUserOrders$", void 0);
__decorate([
    Effect()
], UserOrdersEffect.prototype, "resetUserOrders$", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1vcmRlcnMuZWZmZWN0LmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9wcm9qZWN0cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL3VzZXIvc3RvcmUvZWZmZWN0cy91c2VyLW9yZGVycy5lZmZlY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hELE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFNUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDL0UsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDeEUsT0FBTyxFQUNMLGtCQUFrQixFQUNsQiwrQkFBK0IsR0FDaEMsTUFBTSx3QkFBd0IsQ0FBQztBQUNoQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFHL0MsTUFBTSxPQUFPLGdCQUFnQjtJQUMzQixZQUNVLFFBQWlCLEVBQ2pCLGNBQWtDLEVBQ2xDLDJCQUE0RDtRQUY1RCxhQUFRLEdBQVIsUUFBUSxDQUFTO1FBQ2pCLG1CQUFjLEdBQWQsY0FBYyxDQUFvQjtRQUNsQyxnQ0FBMkIsR0FBM0IsMkJBQTJCLENBQWlDO1FBSXRFLG9CQUFlLEdBQTZDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUM1RSxNQUFNLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLEVBQ3BDLEdBQUcsQ0FBQyxDQUFDLE1BQWtDLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFDM0QsU0FBUyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDcEIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsc0JBQXNCLENBQUM7Z0JBQzdDLENBQUMsQ0FBQyxJQUFJLENBQUMsMkJBQTJCLENBQUMsK0JBQStCLENBQzlELE9BQU8sQ0FBQyxNQUFNLEVBQ2QsT0FBTyxDQUFDLHNCQUFzQixFQUM5QixPQUFPLENBQUMsUUFBUSxFQUNoQixPQUFPLENBQUMsV0FBVyxFQUNuQixPQUFPLENBQUMsSUFBSSxDQUNiO2dCQUNILENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FDNUIsT0FBTyxDQUFDLE1BQU0sRUFDZCxPQUFPLENBQUMsUUFBUSxFQUNoQixPQUFPLENBQUMsV0FBVyxFQUNuQixPQUFPLENBQUMsSUFBSSxDQUNiLENBQ0osQ0FBQyxJQUFJLENBQ0osR0FBRyxDQUFDLENBQUMsTUFBd0IsRUFBRSxFQUFFO2dCQUMvQixPQUFPLElBQUksV0FBVyxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3ZELENBQUMsQ0FBQyxFQUNGLFVBQVUsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQ25CLEVBQUUsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQ2xFLENBQ0YsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUNILENBQUM7UUFHRixxQkFBZ0IsR0FBNEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQzVFLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxlQUFlLENBQUMsRUFDMUMsR0FBRyxDQUFDLEdBQUcsRUFBRTtZQUNQLE9BQU8sSUFBSSxXQUFXLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQXRDQyxDQUFDOzs7WUFOTCxVQUFVOzs7WUFaRixPQUFPO1lBT2Qsa0JBQWtCO1lBQ2xCLCtCQUErQjs7QUFhL0I7SUFEQyxNQUFNLEVBQUU7eURBNEJQO0FBR0Y7SUFEQyxNQUFNLEVBQUU7MERBTVAiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3Rpb25zLCBFZmZlY3QsIG9mVHlwZSB9IGZyb20gJ0BuZ3J4L2VmZmVjdHMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNhdGNoRXJyb3IsIG1hcCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgT3JkZXJIaXN0b3J5TGlzdCB9IGZyb20gJy4uLy4uLy4uL21vZGVsL29yZGVyLm1vZGVsJztcbmltcG9ydCB7IFNpdGVDb250ZXh0QWN0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3NpdGUtY29udGV4dC9zdG9yZS9hY3Rpb25zL2luZGV4JztcbmltcG9ydCB7IG5vcm1hbGl6ZUh0dHBFcnJvciB9IGZyb20gJy4uLy4uLy4uL3V0aWwvbm9ybWFsaXplLWh0dHAtZXJyb3InO1xuaW1wb3J0IHtcbiAgVXNlck9yZGVyQ29ubmVjdG9yLFxuICBVc2VyUmVwbGVuaXNobWVudE9yZGVyQ29ubmVjdG9yLFxufSBmcm9tICcuLi8uLi9jb25uZWN0b3JzL2luZGV4JztcbmltcG9ydCB7IFVzZXJBY3Rpb25zIH0gZnJvbSAnLi4vYWN0aW9ucy9pbmRleCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBVc2VyT3JkZXJzRWZmZWN0IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBhY3Rpb25zJDogQWN0aW9ucyxcbiAgICBwcml2YXRlIG9yZGVyQ29ubmVjdG9yOiBVc2VyT3JkZXJDb25uZWN0b3IsXG4gICAgcHJpdmF0ZSByZXBsZW5pc2htZW50T3JkZXJDb25uZWN0b3I6IFVzZXJSZXBsZW5pc2htZW50T3JkZXJDb25uZWN0b3JcbiAgKSB7fVxuXG4gIEBFZmZlY3QoKVxuICBsb2FkVXNlck9yZGVycyQ6IE9ic2VydmFibGU8VXNlckFjdGlvbnMuVXNlck9yZGVyc0FjdGlvbj4gPSB0aGlzLmFjdGlvbnMkLnBpcGUoXG4gICAgb2ZUeXBlKFVzZXJBY3Rpb25zLkxPQURfVVNFUl9PUkRFUlMpLFxuICAgIG1hcCgoYWN0aW9uOiBVc2VyQWN0aW9ucy5Mb2FkVXNlck9yZGVycykgPT4gYWN0aW9uLnBheWxvYWQpLFxuICAgIHN3aXRjaE1hcCgocGF5bG9hZCkgPT4ge1xuICAgICAgcmV0dXJuIChCb29sZWFuKHBheWxvYWQucmVwbGVuaXNobWVudE9yZGVyQ29kZSlcbiAgICAgICAgPyB0aGlzLnJlcGxlbmlzaG1lbnRPcmRlckNvbm5lY3Rvci5sb2FkUmVwbGVuaXNobWVudERldGFpbHNIaXN0b3J5KFxuICAgICAgICAgICAgcGF5bG9hZC51c2VySWQsXG4gICAgICAgICAgICBwYXlsb2FkLnJlcGxlbmlzaG1lbnRPcmRlckNvZGUsXG4gICAgICAgICAgICBwYXlsb2FkLnBhZ2VTaXplLFxuICAgICAgICAgICAgcGF5bG9hZC5jdXJyZW50UGFnZSxcbiAgICAgICAgICAgIHBheWxvYWQuc29ydFxuICAgICAgICAgIClcbiAgICAgICAgOiB0aGlzLm9yZGVyQ29ubmVjdG9yLmdldEhpc3RvcnkoXG4gICAgICAgICAgICBwYXlsb2FkLnVzZXJJZCxcbiAgICAgICAgICAgIHBheWxvYWQucGFnZVNpemUsXG4gICAgICAgICAgICBwYXlsb2FkLmN1cnJlbnRQYWdlLFxuICAgICAgICAgICAgcGF5bG9hZC5zb3J0XG4gICAgICAgICAgKVxuICAgICAgKS5waXBlKFxuICAgICAgICBtYXAoKG9yZGVyczogT3JkZXJIaXN0b3J5TGlzdCkgPT4ge1xuICAgICAgICAgIHJldHVybiBuZXcgVXNlckFjdGlvbnMuTG9hZFVzZXJPcmRlcnNTdWNjZXNzKG9yZGVycyk7XG4gICAgICAgIH0pLFxuICAgICAgICBjYXRjaEVycm9yKChlcnJvcikgPT5cbiAgICAgICAgICBvZihuZXcgVXNlckFjdGlvbnMuTG9hZFVzZXJPcmRlcnNGYWlsKG5vcm1hbGl6ZUh0dHBFcnJvcihlcnJvcikpKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH0pXG4gICk7XG5cbiAgQEVmZmVjdCgpXG4gIHJlc2V0VXNlck9yZGVycyQ6IE9ic2VydmFibGU8VXNlckFjdGlvbnMuQ2xlYXJVc2VyT3JkZXJzPiA9IHRoaXMuYWN0aW9ucyQucGlwZShcbiAgICBvZlR5cGUoU2l0ZUNvbnRleHRBY3Rpb25zLkxBTkdVQUdFX0NIQU5HRSksXG4gICAgbWFwKCgpID0+IHtcbiAgICAgIHJldHVybiBuZXcgVXNlckFjdGlvbnMuQ2xlYXJVc2VyT3JkZXJzKCk7XG4gICAgfSlcbiAgKTtcbn1cbiJdfQ==