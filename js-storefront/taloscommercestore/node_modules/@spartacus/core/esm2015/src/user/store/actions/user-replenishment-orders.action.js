import { StateUtils } from '../../../state/utils/index';
import { USER_REPLENISHMENT_ORDERS } from '../user-state';
export const LOAD_USER_REPLENISHMENT_ORDERS = '[User] Load User Replenishment Orders';
export const LOAD_USER_REPLENISHMENT_ORDERS_FAIL = '[User] Load User Replenishment Orders Fail';
export const LOAD_USER_REPLENISHMENT_ORDERS_SUCCESS = '[User] Load User Replenishment Orders Success';
export const CLEAR_USER_REPLENISHMENT_ORDERS = '[User] Clear User Replenishment Orders';
export class LoadUserReplenishmentOrders extends StateUtils.LoaderLoadAction {
    constructor(payload) {
        super(USER_REPLENISHMENT_ORDERS);
        this.payload = payload;
        this.type = LOAD_USER_REPLENISHMENT_ORDERS;
    }
}
export class LoadUserReplenishmentOrdersFail extends StateUtils.LoaderFailAction {
    constructor(payload) {
        super(USER_REPLENISHMENT_ORDERS, payload);
        this.payload = payload;
        this.type = LOAD_USER_REPLENISHMENT_ORDERS_FAIL;
    }
}
export class LoadUserReplenishmentOrdersSuccess extends StateUtils.LoaderSuccessAction {
    constructor(payload) {
        super(USER_REPLENISHMENT_ORDERS);
        this.payload = payload;
        this.type = LOAD_USER_REPLENISHMENT_ORDERS_SUCCESS;
    }
}
export class ClearUserReplenishmentOrders extends StateUtils.LoaderResetAction {
    constructor() {
        super(USER_REPLENISHMENT_ORDERS);
        this.type = CLEAR_USER_REPLENISHMENT_ORDERS;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1yZXBsZW5pc2htZW50LW9yZGVycy5hY3Rpb24uanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvUGF0cnlrL0Rlc2t0b3Avc3BhcnRhY3VzL3Byb2plY3RzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvdXNlci9zdG9yZS9hY3Rpb25zL3VzZXItcmVwbGVuaXNobWVudC1vcmRlcnMuYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUN4RCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFMUQsTUFBTSxDQUFDLE1BQU0sOEJBQThCLEdBQ3pDLHVDQUF1QyxDQUFDO0FBQzFDLE1BQU0sQ0FBQyxNQUFNLG1DQUFtQyxHQUM5Qyw0Q0FBNEMsQ0FBQztBQUMvQyxNQUFNLENBQUMsTUFBTSxzQ0FBc0MsR0FDakQsK0NBQStDLENBQUM7QUFDbEQsTUFBTSxDQUFDLE1BQU0sK0JBQStCLEdBQzFDLHdDQUF3QyxDQUFDO0FBRTNDLE1BQU0sT0FBTywyQkFBNEIsU0FBUSxVQUFVLENBQUMsZ0JBQWdCO0lBRTFFLFlBQ1MsT0FLTjtRQUVELEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBUDFCLFlBQU8sR0FBUCxPQUFPLENBS2I7UUFQTSxTQUFJLEdBQUcsOEJBQThCLENBQUM7SUFVL0MsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLCtCQUFnQyxTQUFRLFVBQVUsQ0FBQyxnQkFBZ0I7SUFFOUUsWUFBbUIsT0FBWTtRQUM3QixLQUFLLENBQUMseUJBQXlCLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFEekIsWUFBTyxHQUFQLE9BQU8sQ0FBSztRQUR0QixTQUFJLEdBQUcsbUNBQW1DLENBQUM7SUFHcEQsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLGtDQUFtQyxTQUFRLFVBQVUsQ0FBQyxtQkFBbUI7SUFFcEYsWUFBbUIsT0FBK0I7UUFDaEQsS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFEaEIsWUFBTyxHQUFQLE9BQU8sQ0FBd0I7UUFEekMsU0FBSSxHQUFHLHNDQUFzQyxDQUFDO0lBR3ZELENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyw0QkFBNkIsU0FBUSxVQUFVLENBQUMsaUJBQWlCO0lBRTVFO1FBQ0UsS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFGMUIsU0FBSSxHQUFHLCtCQUErQixDQUFDO0lBR2hELENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcGxlbmlzaG1lbnRPcmRlckxpc3QgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9yZXBsZW5pc2htZW50LW9yZGVyLm1vZGVsJztcbmltcG9ydCB7IFN0YXRlVXRpbHMgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9pbmRleCc7XG5pbXBvcnQgeyBVU0VSX1JFUExFTklTSE1FTlRfT1JERVJTIH0gZnJvbSAnLi4vdXNlci1zdGF0ZSc7XG5cbmV4cG9ydCBjb25zdCBMT0FEX1VTRVJfUkVQTEVOSVNITUVOVF9PUkRFUlMgPVxuICAnW1VzZXJdIExvYWQgVXNlciBSZXBsZW5pc2htZW50IE9yZGVycyc7XG5leHBvcnQgY29uc3QgTE9BRF9VU0VSX1JFUExFTklTSE1FTlRfT1JERVJTX0ZBSUwgPVxuICAnW1VzZXJdIExvYWQgVXNlciBSZXBsZW5pc2htZW50IE9yZGVycyBGYWlsJztcbmV4cG9ydCBjb25zdCBMT0FEX1VTRVJfUkVQTEVOSVNITUVOVF9PUkRFUlNfU1VDQ0VTUyA9XG4gICdbVXNlcl0gTG9hZCBVc2VyIFJlcGxlbmlzaG1lbnQgT3JkZXJzIFN1Y2Nlc3MnO1xuZXhwb3J0IGNvbnN0IENMRUFSX1VTRVJfUkVQTEVOSVNITUVOVF9PUkRFUlMgPVxuICAnW1VzZXJdIENsZWFyIFVzZXIgUmVwbGVuaXNobWVudCBPcmRlcnMnO1xuXG5leHBvcnQgY2xhc3MgTG9hZFVzZXJSZXBsZW5pc2htZW50T3JkZXJzIGV4dGVuZHMgU3RhdGVVdGlscy5Mb2FkZXJMb2FkQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfVVNFUl9SRVBMRU5JU0hNRU5UX09SREVSUztcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHBheWxvYWQ6IHtcbiAgICAgIHVzZXJJZDogc3RyaW5nO1xuICAgICAgcGFnZVNpemU/OiBudW1iZXI7XG4gICAgICBjdXJyZW50UGFnZT86IG51bWJlcjtcbiAgICAgIHNvcnQ/OiBzdHJpbmc7XG4gICAgfVxuICApIHtcbiAgICBzdXBlcihVU0VSX1JFUExFTklTSE1FTlRfT1JERVJTKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTG9hZFVzZXJSZXBsZW5pc2htZW50T3JkZXJzRmFpbCBleHRlbmRzIFN0YXRlVXRpbHMuTG9hZGVyRmFpbEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX1VTRVJfUkVQTEVOSVNITUVOVF9PUkRFUlNfRkFJTDtcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IGFueSkge1xuICAgIHN1cGVyKFVTRVJfUkVQTEVOSVNITUVOVF9PUkRFUlMsIHBheWxvYWQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2FkVXNlclJlcGxlbmlzaG1lbnRPcmRlcnNTdWNjZXNzIGV4dGVuZHMgU3RhdGVVdGlscy5Mb2FkZXJTdWNjZXNzQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfVVNFUl9SRVBMRU5JU0hNRU5UX09SREVSU19TVUNDRVNTO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogUmVwbGVuaXNobWVudE9yZGVyTGlzdCkge1xuICAgIHN1cGVyKFVTRVJfUkVQTEVOSVNITUVOVF9PUkRFUlMpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDbGVhclVzZXJSZXBsZW5pc2htZW50T3JkZXJzIGV4dGVuZHMgU3RhdGVVdGlscy5Mb2FkZXJSZXNldEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBDTEVBUl9VU0VSX1JFUExFTklTSE1FTlRfT1JERVJTO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihVU0VSX1JFUExFTklTSE1FTlRfT1JERVJTKTtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBVc2VyUmVwbGVuaXNobWVudE9yZGVyc0FjdGlvbiA9XG4gIHwgTG9hZFVzZXJSZXBsZW5pc2htZW50T3JkZXJzXG4gIHwgTG9hZFVzZXJSZXBsZW5pc2htZW50T3JkZXJzRmFpbFxuICB8IExvYWRVc2VyUmVwbGVuaXNobWVudE9yZGVyc1N1Y2Nlc3NcbiAgfCBDbGVhclVzZXJSZXBsZW5pc2htZW50T3JkZXJzO1xuIl19