import { Injectable } from '@angular/core';
import { select, Store } from '@ngrx/store';
import { map } from 'rxjs/operators';
import { UserIdService } from '../../auth/user-auth/facade/user-id.service';
import { UserActions } from '../store/actions/index';
import { UsersSelectors } from '../store/selectors/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "../../auth/user-auth/facade/user-id.service";
export class UserAddressService {
    constructor(store, userIdService) {
        this.store = store;
        this.userIdService = userIdService;
    }
    /**
     * Retrieves user's addresses
     */
    loadAddresses() {
        this.userIdService.invokeWithUserId((userId) => {
            this.store.dispatch(new UserActions.LoadUserAddresses(userId));
        });
    }
    /**
     * Adds user address
     * @param address a user address
     */
    addUserAddress(address) {
        this.userIdService.invokeWithUserId((userId) => {
            this.store.dispatch(new UserActions.AddUserAddress({
                userId,
                address,
            }));
        });
    }
    /**
     * Sets user address as default
     * @param addressId a user address ID
     */
    setAddressAsDefault(addressId) {
        this.userIdService.invokeWithUserId((userId) => {
            this.store.dispatch(new UserActions.UpdateUserAddress({
                userId,
                addressId,
                address: { defaultAddress: true },
            }));
        });
    }
    /**
     * Updates existing user address
     * @param addressId a user address ID
     * @param address a user address
     */
    updateUserAddress(addressId, address) {
        this.userIdService.invokeWithUserId((userId) => {
            this.store.dispatch(new UserActions.UpdateUserAddress({
                userId,
                addressId,
                address,
            }));
        });
    }
    /**
     * Deletes existing user address
     * @param addressId a user address ID
     */
    deleteUserAddress(addressId) {
        this.userIdService.invokeWithUserId((userId) => {
            this.store.dispatch(new UserActions.DeleteUserAddress({
                userId,
                addressId,
            }));
        });
    }
    /**
     * Returns addresses
     */
    getAddresses() {
        return this.store.pipe(select(UsersSelectors.getAddresses));
    }
    /**
     * Returns a loading flag for addresses
     */
    getAddressesLoading() {
        return this.store.pipe(select(UsersSelectors.getAddressesLoading));
    }
    getAddressesLoadedSuccess() {
        return this.store.pipe(select(UsersSelectors.getAddressesLoadedSuccess));
    }
    /**
     * Retrieves delivery countries
     */
    loadDeliveryCountries() {
        this.store.dispatch(new UserActions.LoadDeliveryCountries());
    }
    /**
     * Returns all delivery countries
     */
    getDeliveryCountries() {
        return this.store.pipe(select(UsersSelectors.getAllDeliveryCountries));
    }
    /**
     * Returns a country based on the provided `isocode`
     * @param isocode an isocode for a country
     */
    getCountry(isocode) {
        return this.store.pipe(select(UsersSelectors.countrySelectorFactory(isocode)));
    }
    /**
     * Retrieves regions for specified country by `countryIsoCode`
     * @param countryIsoCode
     */
    loadRegions(countryIsoCode) {
        this.store.dispatch(new UserActions.LoadRegions(countryIsoCode));
    }
    /**
     * Clear regions in store - useful when changing country
     */
    clearRegions() {
        this.store.dispatch(new UserActions.ClearRegions());
    }
    /**
     * Returns all regions
     */
    getRegions(countryIsoCode) {
        return this.store.pipe(select(UsersSelectors.getRegionsDataAndLoading), map(({ regions, country, loading, loaded }) => {
            if (!countryIsoCode && (loading || loaded)) {
                this.clearRegions();
                return [];
            }
            else if (loading && !loaded) {
                // don't interrupt loading
                return [];
            }
            else if (!loading && countryIsoCode !== country && countryIsoCode) {
                // country changed - clear store and load new regions
                if (country) {
                    this.clearRegions();
                }
                this.loadRegions(countryIsoCode);
                return [];
            }
            return regions;
        }));
    }
}
UserAddressService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserAddressService_Factory() { return new UserAddressService(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.UserIdService)); }, token: UserAddressService, providedIn: "root" });
UserAddressService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
UserAddressService.ctorParameters = () => [
    { type: Store },
    { type: UserIdService }
];
//# sourceMappingURL=data:application/json;base64,