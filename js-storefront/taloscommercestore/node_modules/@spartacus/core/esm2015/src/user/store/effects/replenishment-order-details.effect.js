import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { GlobalMessageService, GlobalMessageType, } from '../../../global-message/index';
import { normalizeHttpError } from '../../../util/normalize-http-error';
import { UserReplenishmentOrderConnector } from '../../connectors/replenishment-order/user-replenishment-order.connector';
import { UserActions } from '../actions/index';
export class ReplenishmentOrderDetailsEffect {
    constructor(actions$, replenishmentOrderConnector, globalMessageService) {
        this.actions$ = actions$;
        this.replenishmentOrderConnector = replenishmentOrderConnector;
        this.globalMessageService = globalMessageService;
        this.loadReplenishmentOrderDetails$ = this.actions$.pipe(ofType(UserActions.LOAD_REPLENISHMENT_ORDER_DETAILS), map((action) => action.payload), switchMap((payload) => {
            return this.replenishmentOrderConnector
                .load(payload.userId, payload.replenishmentOrderCode)
                .pipe(map((replenishmentOrder) => {
                return new UserActions.LoadReplenishmentOrderDetailsSuccess(replenishmentOrder);
            }), catchError((error) => of(new UserActions.LoadReplenishmentOrderDetailsFail(normalizeHttpError(error)))));
        }));
        this.cancelReplenishmentOrder$ = this.actions$.pipe(ofType(UserActions.CANCEL_REPLENISHMENT_ORDER), map((action) => action.payload), switchMap((payload) => {
            return this.replenishmentOrderConnector
                .cancelReplenishmentOrder(payload.userId, payload.replenishmentOrderCode)
                .pipe(map((replenishmentOrder) => new UserActions.CancelReplenishmentOrderSuccess(replenishmentOrder)), catchError((error) => {
                var _a;
                (_a = error === null || error === void 0 ? void 0 : error.error) === null || _a === void 0 ? void 0 : _a.errors.forEach((err) => this.globalMessageService.add(err.message, GlobalMessageType.MSG_TYPE_ERROR));
                return of(new UserActions.CancelReplenishmentOrderFail(normalizeHttpError(error)));
            }));
        }));
    }
}
ReplenishmentOrderDetailsEffect.decorators = [
    { type: Injectable }
];
ReplenishmentOrderDetailsEffect.ctorParameters = () => [
    { type: Actions },
    { type: UserReplenishmentOrderConnector },
    { type: GlobalMessageService }
];
__decorate([
    Effect()
], ReplenishmentOrderDetailsEffect.prototype, "loadReplenishmentOrderDetails$", void 0);
__decorate([
    Effect()
], ReplenishmentOrderDetailsEffect.prototype, "cancelReplenishmentOrder$", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwbGVuaXNobWVudC1vcmRlci1kZXRhaWxzLmVmZmVjdC5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy9QYXRyeWsvRGVza3RvcC9zcGFydGFjdXMvcHJvamVjdHMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy91c2VyL3N0b3JlL2VmZmVjdHMvcmVwbGVuaXNobWVudC1vcmRlci1kZXRhaWxzLmVmZmVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEQsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1RCxPQUFPLEVBQ0wsb0JBQW9CLEVBQ3BCLGlCQUFpQixHQUNsQixNQUFNLCtCQUErQixDQUFDO0FBRXZDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLHlFQUF5RSxDQUFDO0FBQzFILE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUcvQyxNQUFNLE9BQU8sK0JBQStCO0lBNEQxQyxZQUNVLFFBQWlCLEVBQ2pCLDJCQUE0RCxFQUM1RCxvQkFBMEM7UUFGMUMsYUFBUSxHQUFSLFFBQVEsQ0FBUztRQUNqQixnQ0FBMkIsR0FBM0IsMkJBQTJCLENBQWlDO1FBQzVELHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUE3RHBELG1DQUE4QixHQUE0RCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDMUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxnQ0FBZ0MsQ0FBQyxFQUNwRCxHQUFHLENBQUMsQ0FBQyxNQUFpRCxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQzFFLFNBQVMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ3BCLE9BQU8sSUFBSSxDQUFDLDJCQUEyQjtpQkFDcEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLHNCQUFzQixDQUFDO2lCQUNwRCxJQUFJLENBQ0gsR0FBRyxDQUFDLENBQUMsa0JBQXNDLEVBQUUsRUFBRTtnQkFDN0MsT0FBTyxJQUFJLFdBQVcsQ0FBQyxvQ0FBb0MsQ0FDekQsa0JBQWtCLENBQ25CLENBQUM7WUFDSixDQUFDLENBQUMsRUFDRixVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUNuQixFQUFFLENBQ0EsSUFBSSxXQUFXLENBQUMsaUNBQWlDLENBQy9DLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUMxQixDQUNGLENBQ0YsQ0FDRixDQUFDO1FBQ04sQ0FBQyxDQUFDLENBQ0gsQ0FBQztRQUdGLDhCQUF5QixHQUE0RCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDckcsTUFBTSxDQUFDLFdBQVcsQ0FBQywwQkFBMEIsQ0FBQyxFQUM5QyxHQUFHLENBQUMsQ0FBQyxNQUE0QyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQ3JFLFNBQVMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ3BCLE9BQU8sSUFBSSxDQUFDLDJCQUEyQjtpQkFDcEMsd0JBQXdCLENBQ3ZCLE9BQU8sQ0FBQyxNQUFNLEVBQ2QsT0FBTyxDQUFDLHNCQUFzQixDQUMvQjtpQkFDQSxJQUFJLENBQ0gsR0FBRyxDQUNELENBQUMsa0JBQXNDLEVBQUUsRUFBRSxDQUN6QyxJQUFJLFdBQVcsQ0FBQywrQkFBK0IsQ0FDN0Msa0JBQWtCLENBQ25CLENBQ0osRUFDRCxVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTs7Z0JBQ25CLE1BQUEsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLEtBQUssMENBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQ25DLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQzNCLEdBQUcsQ0FBQyxPQUFPLEVBQ1gsaUJBQWlCLENBQUMsY0FBYyxDQUNqQyxFQUNEO2dCQUVGLE9BQU8sRUFBRSxDQUNQLElBQUksV0FBVyxDQUFDLDRCQUE0QixDQUMxQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FDMUIsQ0FDRixDQUFDO1lBQ0osQ0FBQyxDQUFDLENBQ0gsQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUNILENBQUM7SUFNQyxDQUFDOzs7WUFqRUwsVUFBVTs7O1lBWkYsT0FBTztZQVNQLCtCQUErQjtZQUx0QyxvQkFBb0I7O0FBV3BCO0lBREMsTUFBTSxFQUFFO3VGQXNCUDtBQUdGO0lBREMsTUFBTSxFQUFFO2tGQWlDUCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGlvbnMsIEVmZmVjdCwgb2ZUeXBlIH0gZnJvbSAnQG5ncngvZWZmZWN0cyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciwgbWFwLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge1xuICBHbG9iYWxNZXNzYWdlU2VydmljZSxcbiAgR2xvYmFsTWVzc2FnZVR5cGUsXG59IGZyb20gJy4uLy4uLy4uL2dsb2JhbC1tZXNzYWdlL2luZGV4JztcbmltcG9ydCB7IFJlcGxlbmlzaG1lbnRPcmRlciB9IGZyb20gJy4uLy4uLy4uL21vZGVsL3JlcGxlbmlzaG1lbnQtb3JkZXIubW9kZWwnO1xuaW1wb3J0IHsgbm9ybWFsaXplSHR0cEVycm9yIH0gZnJvbSAnLi4vLi4vLi4vdXRpbC9ub3JtYWxpemUtaHR0cC1lcnJvcic7XG5pbXBvcnQgeyBVc2VyUmVwbGVuaXNobWVudE9yZGVyQ29ubmVjdG9yIH0gZnJvbSAnLi4vLi4vY29ubmVjdG9ycy9yZXBsZW5pc2htZW50LW9yZGVyL3VzZXItcmVwbGVuaXNobWVudC1vcmRlci5jb25uZWN0b3InO1xuaW1wb3J0IHsgVXNlckFjdGlvbnMgfSBmcm9tICcuLi9hY3Rpb25zL2luZGV4JztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFJlcGxlbmlzaG1lbnRPcmRlckRldGFpbHNFZmZlY3Qge1xuICBARWZmZWN0KClcbiAgbG9hZFJlcGxlbmlzaG1lbnRPcmRlckRldGFpbHMkOiBPYnNlcnZhYmxlPFVzZXJBY3Rpb25zLlJlcGxlbmlzaG1lbnRPcmRlckRldGFpbHNBY3Rpb24+ID0gdGhpcy5hY3Rpb25zJC5waXBlKFxuICAgIG9mVHlwZShVc2VyQWN0aW9ucy5MT0FEX1JFUExFTklTSE1FTlRfT1JERVJfREVUQUlMUyksXG4gICAgbWFwKChhY3Rpb246IFVzZXJBY3Rpb25zLkxvYWRSZXBsZW5pc2htZW50T3JkZXJEZXRhaWxzKSA9PiBhY3Rpb24ucGF5bG9hZCksXG4gICAgc3dpdGNoTWFwKChwYXlsb2FkKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5yZXBsZW5pc2htZW50T3JkZXJDb25uZWN0b3JcbiAgICAgICAgLmxvYWQocGF5bG9hZC51c2VySWQsIHBheWxvYWQucmVwbGVuaXNobWVudE9yZGVyQ29kZSlcbiAgICAgICAgLnBpcGUoXG4gICAgICAgICAgbWFwKChyZXBsZW5pc2htZW50T3JkZXI6IFJlcGxlbmlzaG1lbnRPcmRlcikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVc2VyQWN0aW9ucy5Mb2FkUmVwbGVuaXNobWVudE9yZGVyRGV0YWlsc1N1Y2Nlc3MoXG4gICAgICAgICAgICAgIHJlcGxlbmlzaG1lbnRPcmRlclxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBjYXRjaEVycm9yKChlcnJvcikgPT5cbiAgICAgICAgICAgIG9mKFxuICAgICAgICAgICAgICBuZXcgVXNlckFjdGlvbnMuTG9hZFJlcGxlbmlzaG1lbnRPcmRlckRldGFpbHNGYWlsKFxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZUh0dHBFcnJvcihlcnJvcilcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9KVxuICApO1xuXG4gIEBFZmZlY3QoKVxuICBjYW5jZWxSZXBsZW5pc2htZW50T3JkZXIkOiBPYnNlcnZhYmxlPFVzZXJBY3Rpb25zLlJlcGxlbmlzaG1lbnRPcmRlckRldGFpbHNBY3Rpb24+ID0gdGhpcy5hY3Rpb25zJC5waXBlKFxuICAgIG9mVHlwZShVc2VyQWN0aW9ucy5DQU5DRUxfUkVQTEVOSVNITUVOVF9PUkRFUiksXG4gICAgbWFwKChhY3Rpb246IFVzZXJBY3Rpb25zLkNhbmNlbFJlcGxlbmlzaG1lbnRPcmRlcikgPT4gYWN0aW9uLnBheWxvYWQpLFxuICAgIHN3aXRjaE1hcCgocGF5bG9hZCkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMucmVwbGVuaXNobWVudE9yZGVyQ29ubmVjdG9yXG4gICAgICAgIC5jYW5jZWxSZXBsZW5pc2htZW50T3JkZXIoXG4gICAgICAgICAgcGF5bG9hZC51c2VySWQsXG4gICAgICAgICAgcGF5bG9hZC5yZXBsZW5pc2htZW50T3JkZXJDb2RlXG4gICAgICAgIClcbiAgICAgICAgLnBpcGUoXG4gICAgICAgICAgbWFwKFxuICAgICAgICAgICAgKHJlcGxlbmlzaG1lbnRPcmRlcjogUmVwbGVuaXNobWVudE9yZGVyKSA9PlxuICAgICAgICAgICAgICBuZXcgVXNlckFjdGlvbnMuQ2FuY2VsUmVwbGVuaXNobWVudE9yZGVyU3VjY2VzcyhcbiAgICAgICAgICAgICAgICByZXBsZW5pc2htZW50T3JkZXJcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICksXG4gICAgICAgICAgY2F0Y2hFcnJvcigoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIGVycm9yPy5lcnJvcj8uZXJyb3JzLmZvckVhY2goKGVycikgPT5cbiAgICAgICAgICAgICAgdGhpcy5nbG9iYWxNZXNzYWdlU2VydmljZS5hZGQoXG4gICAgICAgICAgICAgICAgZXJyLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgR2xvYmFsTWVzc2FnZVR5cGUuTVNHX1RZUEVfRVJST1JcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9mKFxuICAgICAgICAgICAgICBuZXcgVXNlckFjdGlvbnMuQ2FuY2VsUmVwbGVuaXNobWVudE9yZGVyRmFpbChcbiAgICAgICAgICAgICAgICBub3JtYWxpemVIdHRwRXJyb3IoZXJyb3IpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9KVxuICApO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYWN0aW9ucyQ6IEFjdGlvbnMsXG4gICAgcHJpdmF0ZSByZXBsZW5pc2htZW50T3JkZXJDb25uZWN0b3I6IFVzZXJSZXBsZW5pc2htZW50T3JkZXJDb25uZWN0b3IsXG4gICAgcHJpdmF0ZSBnbG9iYWxNZXNzYWdlU2VydmljZTogR2xvYmFsTWVzc2FnZVNlcnZpY2VcbiAgKSB7fVxufVxuIl19