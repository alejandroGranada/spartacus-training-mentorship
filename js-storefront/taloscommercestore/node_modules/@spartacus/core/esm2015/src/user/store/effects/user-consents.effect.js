import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { catchError, concatMap, map } from 'rxjs/operators';
import { GlobalMessageType } from '../../../global-message/models/global-message.model';
import { GlobalMessageActions } from '../../../global-message/store/actions';
import { SiteContextActions } from '../../../site-context/store/actions/index';
import { normalizeHttpError } from '../../../util/normalize-http-error';
import { UserConsentConnector } from '../../connectors/consent/user-consent.connector';
import { UserActions } from '../actions/index';
export class UserConsentsEffect {
    constructor(actions$, userConsentConnector) {
        this.actions$ = actions$;
        this.userConsentConnector = userConsentConnector;
        this.resetConsents$ = this.actions$.pipe(ofType(SiteContextActions.LANGUAGE_CHANGE), map(() => new UserActions.ResetLoadUserConsents()));
        this.getConsents$ = this.actions$.pipe(ofType(UserActions.LOAD_USER_CONSENTS), map((action) => action.payload), concatMap((userId) => this.userConsentConnector.loadConsents(userId).pipe(map((consents) => new UserActions.LoadUserConsentsSuccess(consents)), catchError((error) => of(new UserActions.LoadUserConsentsFail(normalizeHttpError(error)))))));
        this.giveConsent$ = this.actions$.pipe(ofType(UserActions.GIVE_USER_CONSENT, UserActions.TRANSFER_ANONYMOUS_CONSENT), concatMap((action) => this.userConsentConnector
            .giveConsent(action.payload.userId, action.payload.consentTemplateId, action.payload.consentTemplateVersion)
            .pipe(map((consent) => new UserActions.GiveUserConsentSuccess(consent)), catchError((error) => {
            const errors = [
                new UserActions.GiveUserConsentFail(normalizeHttpError(error)),
            ];
            if (action.type === UserActions.TRANSFER_ANONYMOUS_CONSENT &&
                error.status === 409) {
                errors.push(new GlobalMessageActions.RemoveMessagesByType(GlobalMessageType.MSG_TYPE_ERROR));
            }
            return of(...errors);
        }))));
        this.withdrawConsent$ = this.actions$.pipe(ofType(UserActions.WITHDRAW_USER_CONSENT), map((action) => action.payload), concatMap(({ userId, consentCode }) => this.userConsentConnector.withdrawConsent(userId, consentCode).pipe(map(() => new UserActions.WithdrawUserConsentSuccess()), catchError((error) => of(new UserActions.WithdrawUserConsentFail(normalizeHttpError(error)))))));
    }
}
UserConsentsEffect.decorators = [
    { type: Injectable }
];
UserConsentsEffect.ctorParameters = () => [
    { type: Actions },
    { type: UserConsentConnector }
];
__decorate([
    Effect()
], UserConsentsEffect.prototype, "resetConsents$", void 0);
__decorate([
    Effect()
], UserConsentsEffect.prototype, "getConsents$", void 0);
__decorate([
    Effect()
], UserConsentsEffect.prototype, "giveConsent$", void 0);
__decorate([
    Effect()
], UserConsentsEffect.prototype, "withdrawConsent$", void 0);
//# sourceMappingURL=data:application/json;base64,