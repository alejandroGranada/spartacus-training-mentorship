import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { Inject, Injectable, Optional, PLATFORM_ID } from '@angular/core';
import { fromEvent, of } from 'rxjs';
import { debounceTime, distinctUntilChanged, startWith } from 'rxjs/operators';
import { SERVER_REQUEST_ORIGIN, SERVER_REQUEST_URL } from '../util/ssr.tokens';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../util/ssr.tokens";
export class WindowRef {
    // TODO(#11133): Make platformId required in 4.0
    /**
     * @deprecated since 3.2. Provide PLATFORM_ID, serverRequestUrl and serverRequestOrigin as constructor parameters
     */
    constructor(
    // https://github.com/angular/angular/issues/20351
    document, platformId, serverUrl, serverOrigin) {
        this.platformId = platformId;
        this.serverUrl = serverUrl;
        this.serverOrigin = serverOrigin;
        this.document = document;
    }
    /**
     * Returns true when invoked in browser context.
     * Use this method to check if you can access `window` and other browser globals.
     */
    isBrowser() {
        // TODO(#11133): Remove condition when platformId will be always provided
        return this.platformId
            ? isPlatformBrowser(this.platformId)
            : typeof window !== 'undefined';
    }
    /**
     * Exposes global `window` object. In SSR when `window` is not available it returns `undefined`.
     * To detect if you can safely use `nativeWindow` use `isBrowser` to check execution platform.
     */
    get nativeWindow() {
        // TODO(#11133): Consider throwing in SSR
        return this.isBrowser() ? window : undefined;
    }
    /**
     * Exposes global `sessionStorage` object. In SSR when `sessionStorage` is not available it returns `undefined`.
     * To detect if you can safely use `sessionStorage` use `isBrowser` to check execution platform.
     */
    get sessionStorage() {
        return this.nativeWindow ? this.nativeWindow.sessionStorage : undefined;
    }
    /**
     * Exposes global `localStorage` object. In SSR when `localStorage` is not available it returns `undefined`.
     * To detect if you can safely use `localStorage` use `isBrowser` to check execution platform.
     */
    get localStorage() {
        return this.nativeWindow ? this.nativeWindow.localStorage : undefined;
    }
    /**
     * Returns the window/document location, unless it's not available (i.e. SSR).
     *
     * When there's no access to the location object, we mimic the location partially, by resolving
     * the request url (`SERVER_REQUEST_URL`) and origin (`SERVER_REQUEST_ORIGIN`) from the injector.
     * These values are injected in the server implementation so that we can resolve some of the location
     * values when we do server side rendering.
     */
    get location() {
        if (this.isBrowser()) {
            return this.document.location;
        }
        else {
            if (!this.serverUrl) {
                throw new Error('Cannot resolve the href as the SERVER_REQUEST_URL is undefined');
            }
            if (!this.serverOrigin) {
                throw new Error('Cannot resolve the origin as the SERVER_REQUEST_ORIGIN is undefined');
            }
            return {
                href: this.serverUrl,
                origin: this.serverOrigin,
            };
        }
    }
    /**
     * Returns an observable for the window resize event and emits an event
     * every 300ms in case of resizing. An event is simulated initially.
     *
     * If there's no window object available (i.e. in SSR), a null value is emitted.
     */
    get resize$() {
        if (!this.nativeWindow) {
            return of(null);
        }
        else {
            return fromEvent(this.nativeWindow, 'resize').pipe(debounceTime(300), startWith({ target: this.nativeWindow }), distinctUntilChanged());
        }
    }
}
WindowRef.ɵprov = i0.ɵɵdefineInjectable({ factory: function WindowRef_Factory() { return new WindowRef(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i0.PLATFORM_ID), i0.ɵɵinject(i2.SERVER_REQUEST_URL, 8), i0.ɵɵinject(i2.SERVER_REQUEST_ORIGIN, 8)); }, token: WindowRef, providedIn: "root" });
WindowRef.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
WindowRef.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [SERVER_REQUEST_URL,] }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [SERVER_REQUEST_ORIGIN,] }] }
];
//# sourceMappingURL=data:application/json;base64,