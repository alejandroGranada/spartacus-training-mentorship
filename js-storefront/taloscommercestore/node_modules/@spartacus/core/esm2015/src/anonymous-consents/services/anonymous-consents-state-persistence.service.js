import { Injectable } from '@angular/core';
import { Store } from '@ngrx/store';
import { Subscription } from 'rxjs';
import { StatePersistenceService } from '../../state/index';
import { AnonymousConsentsService } from '../facade/index';
import { LoadAnonymousConsentTemplatesSuccess } from '../store/actions/anonymous-consents-group';
import { getAnonymousConsentState } from '../store/selectors/feature.selector';
import * as i0 from "@angular/core";
import * as i1 from "../../state/services/state-persistence.service";
import * as i2 from "@ngrx/store";
import * as i3 from "../facade/anonymous-consents.service";
/**
 * Responsible for saving the anonymous consents data in browser storage.
 */
export class AnonymousConsentsStatePersistenceService {
    constructor(statePersistenceService, store, anonymousConsentsService) {
        this.statePersistenceService = statePersistenceService;
        this.store = store;
        this.anonymousConsentsService = anonymousConsentsService;
        this.subscription = new Subscription();
        /**
         * Identifier used for storage key.
         */
        this.key = 'anonymous-consents';
    }
    /**
     * Initializes the synchronization between state and browser storage.
     */
    initSync() {
        this.subscription.add(this.statePersistenceService.syncWithStorage({
            key: this.key,
            state$: this.getAuthState(),
            onRead: (state) => this.onRead(state),
        }));
    }
    /**
     * Gets and transforms state from different sources into the form that should
     * be saved in storage.
     */
    getAuthState() {
        return this.store.select(getAnonymousConsentState);
    }
    /**
     * Function called on each browser storage read.
     * Used to update state from browser -> state.
     */
    onRead(state) {
        const templates = state === null || state === void 0 ? void 0 : state.templates;
        const consents = state === null || state === void 0 ? void 0 : state.consents;
        const ui = state === null || state === void 0 ? void 0 : state.ui;
        // templates
        if (templates === null || templates === void 0 ? void 0 : templates.success) {
            this.store.dispatch(new LoadAnonymousConsentTemplatesSuccess(templates.value));
        }
        // consents
        if (consents) {
            this.anonymousConsentsService.setConsents(consents);
        }
        // ui
        if (ui) {
            this.anonymousConsentsService.toggleBannerDismissed(ui === null || ui === void 0 ? void 0 : ui.bannerDismissed);
            this.anonymousConsentsService.toggleTemplatesUpdated(ui === null || ui === void 0 ? void 0 : ui.updated);
        }
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}
AnonymousConsentsStatePersistenceService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AnonymousConsentsStatePersistenceService_Factory() { return new AnonymousConsentsStatePersistenceService(i0.ɵɵinject(i1.StatePersistenceService), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i3.AnonymousConsentsService)); }, token: AnonymousConsentsStatePersistenceService, providedIn: "root" });
AnonymousConsentsStatePersistenceService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
AnonymousConsentsStatePersistenceService.ctorParameters = () => [
    { type: StatePersistenceService },
    { type: Store },
    { type: AnonymousConsentsService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5vbnltb3VzLWNvbnNlbnRzLXN0YXRlLXBlcnNpc3RlbmNlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvUGF0cnlrL0Rlc2t0b3Avc3BhcnRhY3VzL3Byb2plY3RzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvYW5vbnltb3VzLWNvbnNlbnRzL3NlcnZpY2VzL2Fub255bW91cy1jb25zZW50cy1zdGF0ZS1wZXJzaXN0ZW5jZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDdEQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNwQyxPQUFPLEVBQWMsWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2hELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzVELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNELE9BQU8sRUFBRSxvQ0FBb0MsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBS2pHLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDOzs7OztBQU8vRTs7R0FFRztBQUlILE1BQU0sT0FBTyx3Q0FBd0M7SUFHbkQsWUFDWSx1QkFBZ0QsRUFDaEQsS0FBd0MsRUFDeEMsd0JBQWtEO1FBRmxELDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7UUFDaEQsVUFBSyxHQUFMLEtBQUssQ0FBbUM7UUFDeEMsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUEwQjtRQUxwRCxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFRNUM7O1dBRUc7UUFDTyxRQUFHLEdBQUcsb0JBQW9CLENBQUM7SUFMbEMsQ0FBQztJQU9KOztPQUVHO0lBQ0ksUUFBUTtRQUNiLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUNuQixJQUFJLENBQUMsdUJBQXVCLENBQUMsZUFBZSxDQUFDO1lBQzNDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztZQUNiLE1BQU0sRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQzNCLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7U0FDdEMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRUQ7OztPQUdHO0lBQ08sWUFBWTtRQUNwQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLHdCQUF3QixDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVEOzs7T0FHRztJQUNPLE1BQU0sQ0FBQyxLQUFtQztRQUNsRCxNQUFNLFNBQVMsR0FBRyxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsU0FBUyxDQUFDO1FBQ25DLE1BQU0sUUFBUSxHQUFHLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxRQUFRLENBQUM7UUFDakMsTUFBTSxFQUFFLEdBQUcsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLEVBQUUsQ0FBQztRQUVyQixZQUFZO1FBQ1osSUFBSSxTQUFTLGFBQVQsU0FBUyx1QkFBVCxTQUFTLENBQUUsT0FBTyxFQUFFO1lBQ3RCLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUNqQixJQUFJLG9DQUFvQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FDMUQsQ0FBQztTQUNIO1FBRUQsV0FBVztRQUNYLElBQUksUUFBUSxFQUFFO1lBQ1osSUFBSSxDQUFDLHdCQUF3QixDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNyRDtRQUVELEtBQUs7UUFDTCxJQUFJLEVBQUUsRUFBRTtZQUNOLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLGFBQUYsRUFBRSx1QkFBRixFQUFFLENBQUUsZUFBZSxDQUFDLENBQUM7WUFDekUsSUFBSSxDQUFDLHdCQUF3QixDQUFDLHNCQUFzQixDQUFDLEVBQUUsYUFBRixFQUFFLHVCQUFGLEVBQUUsQ0FBRSxPQUFPLENBQUMsQ0FBQztTQUNuRTtJQUNILENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsQyxDQUFDOzs7O1lBcEVGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7O1lBbkJRLHVCQUF1QjtZQUZ2QixLQUFLO1lBR0wsd0JBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdG9yZSB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgU3RhdGVQZXJzaXN0ZW5jZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zdGF0ZS9pbmRleCc7XG5pbXBvcnQgeyBBbm9ueW1vdXNDb25zZW50c1NlcnZpY2UgfSBmcm9tICcuLi9mYWNhZGUvaW5kZXgnO1xuaW1wb3J0IHsgTG9hZEFub255bW91c0NvbnNlbnRUZW1wbGF0ZXNTdWNjZXNzIH0gZnJvbSAnLi4vc3RvcmUvYWN0aW9ucy9hbm9ueW1vdXMtY29uc2VudHMtZ3JvdXAnO1xuaW1wb3J0IHtcbiAgQW5vbnltb3VzQ29uc2VudHNTdGF0ZSxcbiAgU3RhdGVXaXRoQW5vbnltb3VzQ29uc2VudHMsXG59IGZyb20gJy4uL3N0b3JlL2luZGV4JztcbmltcG9ydCB7IGdldEFub255bW91c0NvbnNlbnRTdGF0ZSB9IGZyb20gJy4uL3N0b3JlL3NlbGVjdG9ycy9mZWF0dXJlLnNlbGVjdG9yJztcblxuLyoqXG4gKiBBbm9ueW1vdXMgY29uc2VudHMgc3RhdGUgc3luY2VkIHRvIGJyb3dzZXIgc3RvcmFnZS5cbiAqL1xuZXhwb3J0IHR5cGUgU3luY2VkQW5vbnltb3VzQ29uc2VudHNTdGF0ZSA9IFBhcnRpYWw8QW5vbnltb3VzQ29uc2VudHNTdGF0ZT47XG5cbi8qKlxuICogUmVzcG9uc2libGUgZm9yIHNhdmluZyB0aGUgYW5vbnltb3VzIGNvbnNlbnRzIGRhdGEgaW4gYnJvd3NlciBzdG9yYWdlLlxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgQW5vbnltb3VzQ29uc2VudHNTdGF0ZVBlcnNpc3RlbmNlU2VydmljZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIHByb3RlY3RlZCBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIHN0YXRlUGVyc2lzdGVuY2VTZXJ2aWNlOiBTdGF0ZVBlcnNpc3RlbmNlU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgc3RvcmU6IFN0b3JlPFN0YXRlV2l0aEFub255bW91c0NvbnNlbnRzPixcbiAgICBwcm90ZWN0ZWQgYW5vbnltb3VzQ29uc2VudHNTZXJ2aWNlOiBBbm9ueW1vdXNDb25zZW50c1NlcnZpY2VcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBJZGVudGlmaWVyIHVzZWQgZm9yIHN0b3JhZ2Uga2V5LlxuICAgKi9cbiAgcHJvdGVjdGVkIGtleSA9ICdhbm9ueW1vdXMtY29uc2VudHMnO1xuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgc3luY2hyb25pemF0aW9uIGJldHdlZW4gc3RhdGUgYW5kIGJyb3dzZXIgc3RvcmFnZS5cbiAgICovXG4gIHB1YmxpYyBpbml0U3luYygpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbi5hZGQoXG4gICAgICB0aGlzLnN0YXRlUGVyc2lzdGVuY2VTZXJ2aWNlLnN5bmNXaXRoU3RvcmFnZSh7XG4gICAgICAgIGtleTogdGhpcy5rZXksXG4gICAgICAgIHN0YXRlJDogdGhpcy5nZXRBdXRoU3RhdGUoKSxcbiAgICAgICAgb25SZWFkOiAoc3RhdGUpID0+IHRoaXMub25SZWFkKHN0YXRlKSxcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGFuZCB0cmFuc2Zvcm1zIHN0YXRlIGZyb20gZGlmZmVyZW50IHNvdXJjZXMgaW50byB0aGUgZm9ybSB0aGF0IHNob3VsZFxuICAgKiBiZSBzYXZlZCBpbiBzdG9yYWdlLlxuICAgKi9cbiAgcHJvdGVjdGVkIGdldEF1dGhTdGF0ZSgpOiBPYnNlcnZhYmxlPFN5bmNlZEFub255bW91c0NvbnNlbnRzU3RhdGU+IHtcbiAgICByZXR1cm4gdGhpcy5zdG9yZS5zZWxlY3QoZ2V0QW5vbnltb3VzQ29uc2VudFN0YXRlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGdW5jdGlvbiBjYWxsZWQgb24gZWFjaCBicm93c2VyIHN0b3JhZ2UgcmVhZC5cbiAgICogVXNlZCB0byB1cGRhdGUgc3RhdGUgZnJvbSBicm93c2VyIC0+IHN0YXRlLlxuICAgKi9cbiAgcHJvdGVjdGVkIG9uUmVhZChzdGF0ZTogU3luY2VkQW5vbnltb3VzQ29uc2VudHNTdGF0ZSkge1xuICAgIGNvbnN0IHRlbXBsYXRlcyA9IHN0YXRlPy50ZW1wbGF0ZXM7XG4gICAgY29uc3QgY29uc2VudHMgPSBzdGF0ZT8uY29uc2VudHM7XG4gICAgY29uc3QgdWkgPSBzdGF0ZT8udWk7XG5cbiAgICAvLyB0ZW1wbGF0ZXNcbiAgICBpZiAodGVtcGxhdGVzPy5zdWNjZXNzKSB7XG4gICAgICB0aGlzLnN0b3JlLmRpc3BhdGNoKFxuICAgICAgICBuZXcgTG9hZEFub255bW91c0NvbnNlbnRUZW1wbGF0ZXNTdWNjZXNzKHRlbXBsYXRlcy52YWx1ZSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gY29uc2VudHNcbiAgICBpZiAoY29uc2VudHMpIHtcbiAgICAgIHRoaXMuYW5vbnltb3VzQ29uc2VudHNTZXJ2aWNlLnNldENvbnNlbnRzKGNvbnNlbnRzKTtcbiAgICB9XG5cbiAgICAvLyB1aVxuICAgIGlmICh1aSkge1xuICAgICAgdGhpcy5hbm9ueW1vdXNDb25zZW50c1NlcnZpY2UudG9nZ2xlQmFubmVyRGlzbWlzc2VkKHVpPy5iYW5uZXJEaXNtaXNzZWQpO1xuICAgICAgdGhpcy5hbm9ueW1vdXNDb25zZW50c1NlcnZpY2UudG9nZ2xlVGVtcGxhdGVzVXBkYXRlZCh1aT8udXBkYXRlZCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgfVxufVxuIl19