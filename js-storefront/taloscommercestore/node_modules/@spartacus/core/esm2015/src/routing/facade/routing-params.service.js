import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { map, shareReplay } from 'rxjs/operators';
import { ActivatedRoutesService } from '../services/activated-routes.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../services/activated-routes.service";
/**
 * Service to expose all parameters for the router, including child routes.
 * This is convenient in case the parent route (component) requires awareness
 * of child routes parameters.
 */
export class RoutingParamsService {
    constructor(router, activatedRoutesService) {
        this.router = router;
        this.activatedRoutesService = activatedRoutesService;
        this.params$ = this.activatedRoutesService.routes$.pipe(map((routes) => this.findAllParam(routes)), shareReplay({ refCount: true, bufferSize: 1 }));
    }
    /**
     * Get the list of all parameters of the full route. This includes
     * active child routes.
     */
    getParams() {
        return this.params$;
    }
    findAllParam(routes) {
        return Object.assign({}, ...routes.map((route) => route.params));
    }
}
RoutingParamsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function RoutingParamsService_Factory() { return new RoutingParamsService(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.ActivatedRoutesService)); }, token: RoutingParamsService, providedIn: "root" });
RoutingParamsService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
RoutingParamsService.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoutesService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGluZy1wYXJhbXMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy9QYXRyeWsvRGVza3RvcC9zcGFydGFjdXMvcHJvamVjdHMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9yb3V0aW5nL2ZhY2FkZS9yb3V0aW5nLXBhcmFtcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUEwQixNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVqRSxPQUFPLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDOzs7O0FBRTlFOzs7O0dBSUc7QUFFSCxNQUFNLE9BQU8sb0JBQW9CO0lBUS9CLFlBQ1ksTUFBYyxFQUNkLHNCQUE4QztRQUQ5QyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQVR2QyxZQUFPLEdBRXJCLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUMzQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsRUFDMUMsV0FBVyxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FDL0MsQ0FBQztJQUtDLENBQUM7SUFFSjs7O09BR0c7SUFDSCxTQUFTO1FBQ1AsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFFUyxZQUFZLENBQ3BCLE1BQWdDO1FBRWhDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNuRSxDQUFDOzs7O1lBMUJGLFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7OztZQVZELE1BQU07WUFHOUIsc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCwgc2hhcmVSZXBsYXkgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZXNTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvYWN0aXZhdGVkLXJvdXRlcy5zZXJ2aWNlJztcblxuLyoqXG4gKiBTZXJ2aWNlIHRvIGV4cG9zZSBhbGwgcGFyYW1ldGVycyBmb3IgdGhlIHJvdXRlciwgaW5jbHVkaW5nIGNoaWxkIHJvdXRlcy5cbiAqIFRoaXMgaXMgY29udmVuaWVudCBpbiBjYXNlIHRoZSBwYXJlbnQgcm91dGUgKGNvbXBvbmVudCkgcmVxdWlyZXMgYXdhcmVuZXNzXG4gKiBvZiBjaGlsZCByb3V0ZXMgcGFyYW1ldGVycy5cbiAqL1xuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBSb3V0aW5nUGFyYW1zU2VydmljZSB7XG4gIHByb3RlY3RlZCByZWFkb25seSBwYXJhbXMkOiBPYnNlcnZhYmxlPHtcbiAgICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG4gIH0+ID0gdGhpcy5hY3RpdmF0ZWRSb3V0ZXNTZXJ2aWNlLnJvdXRlcyQucGlwZShcbiAgICBtYXAoKHJvdXRlcykgPT4gdGhpcy5maW5kQWxsUGFyYW0ocm91dGVzKSksXG4gICAgc2hhcmVSZXBsYXkoeyByZWZDb3VudDogdHJ1ZSwgYnVmZmVyU2l6ZTogMSB9KVxuICApO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCByb3V0ZXI6IFJvdXRlcixcbiAgICBwcm90ZWN0ZWQgYWN0aXZhdGVkUm91dGVzU2VydmljZTogQWN0aXZhdGVkUm91dGVzU2VydmljZVxuICApIHt9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbGlzdCBvZiBhbGwgcGFyYW1ldGVycyBvZiB0aGUgZnVsbCByb3V0ZS4gVGhpcyBpbmNsdWRlc1xuICAgKiBhY3RpdmUgY2hpbGQgcm91dGVzLlxuICAgKi9cbiAgZ2V0UGFyYW1zKCk6IE9ic2VydmFibGU8eyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfT4ge1xuICAgIHJldHVybiB0aGlzLnBhcmFtcyQ7XG4gIH1cblxuICBwcm90ZWN0ZWQgZmluZEFsbFBhcmFtKFxuICAgIHJvdXRlczogQWN0aXZhdGVkUm91dGVTbmFwc2hvdFtdXG4gICk6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0ge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCAuLi5yb3V0ZXMubWFwKChyb3V0ZSkgPT4gcm91dGUucGFyYW1zKSk7XG4gIH1cbn1cbiJdfQ==