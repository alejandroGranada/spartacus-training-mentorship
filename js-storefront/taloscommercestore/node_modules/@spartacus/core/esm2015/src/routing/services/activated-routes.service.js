import { Injectable } from '@angular/core';
import { NavigationEnd, Router } from '@angular/router';
import { filter, map, shareReplay, startWith } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
/**
 * Helper service to expose all activated routes
 */
export class ActivatedRoutesService {
    constructor(router) {
        this.router = router;
        /**
         * Array of currently activated routes (from the root route to the leaf route).
         */
        this.routes$ = this.router.events.pipe(filter((event) => event instanceof NavigationEnd), 
        // eslint-disable-next-line import/no-deprecated
        startWith(undefined), // emit value for consumer who subscribed lately after NavigationEnd event
        map(() => {
            let route = this.router.routerState.snapshot.root;
            const routes = [route];
            // traverse to the leaf route:
            while ((route = route.firstChild)) {
                routes.push(route);
            }
            return routes;
        }), shareReplay({ bufferSize: 1, refCount: true }));
    }
}
ActivatedRoutesService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ActivatedRoutesService_Factory() { return new ActivatedRoutesService(i0.ɵɵinject(i1.Router)); }, token: ActivatedRoutesService, providedIn: "root" });
ActivatedRoutesService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
ActivatedRoutesService.ctorParameters = () => [
    { type: Router }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aXZhdGVkLXJvdXRlcy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9wcm9qZWN0cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL3JvdXRpbmcvc2VydmljZXMvYWN0aXZhdGVkLXJvdXRlcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUEwQixhQUFhLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFaEYsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7QUFFckU7O0dBRUc7QUFFSCxNQUFNLE9BQU8sc0JBQXNCO0lBQ2pDLFlBQXNCLE1BQWM7UUFBZCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBRXBDOztXQUVHO1FBQ00sWUFBTyxHQUVaLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDekIsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLFlBQVksYUFBYSxDQUFDO1FBQ2pELGdEQUFnRDtRQUNoRCxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsMEVBQTBFO1FBQ2hHLEdBQUcsQ0FBQyxHQUFHLEVBQUU7WUFDUCxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1lBQ2xELE1BQU0sTUFBTSxHQUE2QixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRWpELDhCQUE4QjtZQUM5QixPQUFPLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRTtnQkFDakMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNwQjtZQUVELE9BQU8sTUFBTSxDQUFDO1FBQ2hCLENBQUMsQ0FBQyxFQUNGLFdBQVcsQ0FBQyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQy9DLENBQUM7SUF2QnFDLENBQUM7Ozs7WUFGekMsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7O1lBUGMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIE5hdmlnYXRpb25FbmQsIFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCwgc2hhcmVSZXBsYXksIHN0YXJ0V2l0aCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuLyoqXG4gKiBIZWxwZXIgc2VydmljZSB0byBleHBvc2UgYWxsIGFjdGl2YXRlZCByb3V0ZXNcbiAqL1xuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBBY3RpdmF0ZWRSb3V0ZXNTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHJvdXRlcjogUm91dGVyKSB7fVxuXG4gIC8qKlxuICAgKiBBcnJheSBvZiBjdXJyZW50bHkgYWN0aXZhdGVkIHJvdXRlcyAoZnJvbSB0aGUgcm9vdCByb3V0ZSB0byB0aGUgbGVhZiByb3V0ZSkuXG4gICAqL1xuICByZWFkb25seSByb3V0ZXMkOiBPYnNlcnZhYmxlPFxuICAgIEFjdGl2YXRlZFJvdXRlU25hcHNob3RbXVxuICA+ID0gdGhpcy5yb3V0ZXIuZXZlbnRzLnBpcGUoXG4gICAgZmlsdGVyKChldmVudCkgPT4gZXZlbnQgaW5zdGFuY2VvZiBOYXZpZ2F0aW9uRW5kKSxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWRlcHJlY2F0ZWRcbiAgICBzdGFydFdpdGgodW5kZWZpbmVkKSwgLy8gZW1pdCB2YWx1ZSBmb3IgY29uc3VtZXIgd2hvIHN1YnNjcmliZWQgbGF0ZWx5IGFmdGVyIE5hdmlnYXRpb25FbmQgZXZlbnRcbiAgICBtYXAoKCkgPT4ge1xuICAgICAgbGV0IHJvdXRlID0gdGhpcy5yb3V0ZXIucm91dGVyU3RhdGUuc25hcHNob3Qucm9vdDtcbiAgICAgIGNvbnN0IHJvdXRlczogQWN0aXZhdGVkUm91dGVTbmFwc2hvdFtdID0gW3JvdXRlXTtcblxuICAgICAgLy8gdHJhdmVyc2UgdG8gdGhlIGxlYWYgcm91dGU6XG4gICAgICB3aGlsZSAoKHJvdXRlID0gcm91dGUuZmlyc3RDaGlsZCkpIHtcbiAgICAgICAgcm91dGVzLnB1c2gocm91dGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcm91dGVzO1xuICAgIH0pLFxuICAgIHNoYXJlUmVwbGF5KHsgYnVmZmVyU2l6ZTogMSwgcmVmQ291bnQ6IHRydWUgfSlcbiAgKTtcbn1cbiJdfQ==