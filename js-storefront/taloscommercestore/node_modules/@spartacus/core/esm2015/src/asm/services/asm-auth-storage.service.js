import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { AuthStorageService } from '../../auth/user-auth/services/auth-storage.service';
import * as i0 from "@angular/core";
/**
 * @deprecated since 3.2, use asm lib instead
 *
 * Indicates if auth token is for regular user or CS Agent.
 */
export var TokenTarget;
(function (TokenTarget) {
    TokenTarget["CSAgent"] = "CSAgent";
    TokenTarget["User"] = "User";
})(TokenTarget || (TokenTarget = {}));
/**
 * @deprecated since 3.2, use asm lib instead
 *
 * With AsmAuthStorageService apart from storing the token we also need to store
 * information for which user is the token (regular user or CS Agent).
 *
 * Overrides `AuthStorageService`.
 */
export class AsmAuthStorageService extends AuthStorageService {
    constructor() {
        super(...arguments);
        this._tokenTarget$ = new BehaviorSubject(TokenTarget.User);
    }
    /**
     * Get target user for current auth token.
     *
     * @return observable with TokenTarget
     */
    getTokenTarget() {
        return this._tokenTarget$;
    }
    /**
     * Set new token target.
     *
     * @param tokenTarget
     */
    setTokenTarget(tokenTarget) {
        this._tokenTarget$.next(tokenTarget);
    }
    /**
     * Get token for previously user session, when it was interrupted by CS agent login.
     *
     * @return previously logged in user token.
     */
    getEmulatedUserToken() {
        return this.emulatedUserToken;
    }
    /**
     * Save user token on CS agent login.
     *
     * @param token
     */
    setEmulatedUserToken(token) {
        this.emulatedUserToken = token;
    }
    /**
     * Change token target to CS Agent.
     */
    switchTokenTargetToCSAgent() {
        this._tokenTarget$.next(TokenTarget.CSAgent);
    }
    /**
     * Change token target to user.
     */
    switchTokenTargetToUser() {
        this._tokenTarget$.next(TokenTarget.User);
    }
    /**
     * When we start emulation from the UI (not by ASM login) we can't restore user session on cs agent logout.
     * Only available solution is to drop session we could restore, to avoid account hijack.
     */
    clearEmulatedUserToken() {
        this.emulatedUserToken = undefined;
    }
}
AsmAuthStorageService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AsmAuthStorageService_Factory() { return new AsmAuthStorageService(); }, token: AsmAuthStorageService, providedIn: "root" });
AsmAuthStorageService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNtLWF1dGgtc3RvcmFnZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9wcm9qZWN0cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL2FzbS9zZXJ2aWNlcy9hc20tYXV0aC1zdG9yYWdlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZUFBZSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBRW5ELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9EQUFvRCxDQUFDOztBQUV4Rjs7OztHQUlHO0FBQ0gsTUFBTSxDQUFOLElBQVksV0FHWDtBQUhELFdBQVksV0FBVztJQUNyQixrQ0FBbUIsQ0FBQTtJQUNuQiw0QkFBYSxDQUFBO0FBQ2YsQ0FBQyxFQUhXLFdBQVcsS0FBWCxXQUFXLFFBR3RCO0FBRUQ7Ozs7Ozs7R0FPRztBQUlILE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxrQkFBa0I7SUFIN0Q7O1FBSVksa0JBQWEsR0FBNEIsSUFBSSxlQUFlLENBQ3BFLFdBQVcsQ0FBQyxJQUFJLENBQ2pCLENBQUM7S0FzRUg7SUEzREM7Ozs7T0FJRztJQUNILGNBQWM7UUFDWixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDNUIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxjQUFjLENBQUMsV0FBd0I7UUFDcEMsSUFBSSxDQUFDLGFBQThDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsb0JBQW9CO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDO0lBQ2hDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsb0JBQW9CLENBQUMsS0FBZ0I7UUFDbkMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQztJQUNqQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCwwQkFBMEI7UUFDdkIsSUFBSSxDQUFDLGFBQThDLENBQUMsSUFBSSxDQUN2RCxXQUFXLENBQUMsT0FBTyxDQUNwQixDQUFDO0lBQ0osQ0FBQztJQUVEOztPQUVHO0lBQ0gsdUJBQXVCO1FBQ3BCLElBQUksQ0FBQyxhQUE4QyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUUsQ0FBQztJQUVEOzs7T0FHRztJQUNILHNCQUFzQjtRQUNwQixJQUFJLENBQUMsaUJBQWlCLEdBQUcsU0FBUyxDQUFDO0lBQ3JDLENBQUM7Ozs7WUEzRUYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBdXRoVG9rZW4gfSBmcm9tICcuLi8uLi9hdXRoL3VzZXItYXV0aC9tb2RlbHMvYXV0aC10b2tlbi5tb2RlbCc7XG5pbXBvcnQgeyBBdXRoU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9hdXRoL3VzZXItYXV0aC9zZXJ2aWNlcy9hdXRoLXN0b3JhZ2Uuc2VydmljZSc7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgc2luY2UgMy4yLCB1c2UgYXNtIGxpYiBpbnN0ZWFkXG4gKlxuICogSW5kaWNhdGVzIGlmIGF1dGggdG9rZW4gaXMgZm9yIHJlZ3VsYXIgdXNlciBvciBDUyBBZ2VudC5cbiAqL1xuZXhwb3J0IGVudW0gVG9rZW5UYXJnZXQge1xuICBDU0FnZW50ID0gJ0NTQWdlbnQnLFxuICBVc2VyID0gJ1VzZXInLFxufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkIHNpbmNlIDMuMiwgdXNlIGFzbSBsaWIgaW5zdGVhZFxuICpcbiAqIFdpdGggQXNtQXV0aFN0b3JhZ2VTZXJ2aWNlIGFwYXJ0IGZyb20gc3RvcmluZyB0aGUgdG9rZW4gd2UgYWxzbyBuZWVkIHRvIHN0b3JlXG4gKiBpbmZvcm1hdGlvbiBmb3Igd2hpY2ggdXNlciBpcyB0aGUgdG9rZW4gKHJlZ3VsYXIgdXNlciBvciBDUyBBZ2VudCkuXG4gKlxuICogT3ZlcnJpZGVzIGBBdXRoU3RvcmFnZVNlcnZpY2VgLlxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgQXNtQXV0aFN0b3JhZ2VTZXJ2aWNlIGV4dGVuZHMgQXV0aFN0b3JhZ2VTZXJ2aWNlIHtcbiAgcHJvdGVjdGVkIF90b2tlblRhcmdldCQ6IE9ic2VydmFibGU8VG9rZW5UYXJnZXQ+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxUb2tlblRhcmdldD4oXG4gICAgVG9rZW5UYXJnZXQuVXNlclxuICApO1xuXG4gIC8qKlxuICAgKiBXaGVuIENTIEFnZW50IGxvZ3MgaW4gZHVyaW5nIHJlZ3VsYXIgdXNlciBzZXNzaW9uIHdlIHN0b3JlIHRoZSByZWd1bGFyXG4gICAqIHVzZXIgdG9rZW4gdG8gcmVzdG9yZSB0aGUgc2Vzc2lvbiBhZnRlciBDUyBBZ2VudCBsb2dvdXQuXG4gICAqXG4gICAqIFRoaXMgc3VwcG9ydHMgaW4tc3RvcmUgdXNlIGNhc2Ugd2hlbiBDUyBBZ2VudCB3YW50J3MgdG8gcXVpY2tseSBoZWxwXG4gICAqIGN1c3RvbWVyIGFuZCB0aGVuIGdpdmUgYW4gb3B0aW9uIHRvIGN1c3RvbWVyIHRvIGNvbnRpbnVlIHRoZSBwcm9jZXNzLlxuICAgKi9cbiAgcHJvdGVjdGVkIGVtdWxhdGVkVXNlclRva2VuOiBBdXRoVG9rZW47XG5cbiAgLyoqXG4gICAqIEdldCB0YXJnZXQgdXNlciBmb3IgY3VycmVudCBhdXRoIHRva2VuLlxuICAgKlxuICAgKiBAcmV0dXJuIG9ic2VydmFibGUgd2l0aCBUb2tlblRhcmdldFxuICAgKi9cbiAgZ2V0VG9rZW5UYXJnZXQoKTogT2JzZXJ2YWJsZTxUb2tlblRhcmdldD4ge1xuICAgIHJldHVybiB0aGlzLl90b2tlblRhcmdldCQ7XG4gIH1cblxuICAvKipcbiAgICogU2V0IG5ldyB0b2tlbiB0YXJnZXQuXG4gICAqXG4gICAqIEBwYXJhbSB0b2tlblRhcmdldFxuICAgKi9cbiAgc2V0VG9rZW5UYXJnZXQodG9rZW5UYXJnZXQ6IFRva2VuVGFyZ2V0KTogdm9pZCB7XG4gICAgKHRoaXMuX3Rva2VuVGFyZ2V0JCBhcyBCZWhhdmlvclN1YmplY3Q8VG9rZW5UYXJnZXQ+KS5uZXh0KHRva2VuVGFyZ2V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdG9rZW4gZm9yIHByZXZpb3VzbHkgdXNlciBzZXNzaW9uLCB3aGVuIGl0IHdhcyBpbnRlcnJ1cHRlZCBieSBDUyBhZ2VudCBsb2dpbi5cbiAgICpcbiAgICogQHJldHVybiBwcmV2aW91c2x5IGxvZ2dlZCBpbiB1c2VyIHRva2VuLlxuICAgKi9cbiAgZ2V0RW11bGF0ZWRVc2VyVG9rZW4oKTogQXV0aFRva2VuIHtcbiAgICByZXR1cm4gdGhpcy5lbXVsYXRlZFVzZXJUb2tlbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTYXZlIHVzZXIgdG9rZW4gb24gQ1MgYWdlbnQgbG9naW4uXG4gICAqXG4gICAqIEBwYXJhbSB0b2tlblxuICAgKi9cbiAgc2V0RW11bGF0ZWRVc2VyVG9rZW4odG9rZW46IEF1dGhUb2tlbik6IHZvaWQge1xuICAgIHRoaXMuZW11bGF0ZWRVc2VyVG9rZW4gPSB0b2tlbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGFuZ2UgdG9rZW4gdGFyZ2V0IHRvIENTIEFnZW50LlxuICAgKi9cbiAgc3dpdGNoVG9rZW5UYXJnZXRUb0NTQWdlbnQoKTogdm9pZCB7XG4gICAgKHRoaXMuX3Rva2VuVGFyZ2V0JCBhcyBCZWhhdmlvclN1YmplY3Q8VG9rZW5UYXJnZXQ+KS5uZXh0KFxuICAgICAgVG9rZW5UYXJnZXQuQ1NBZ2VudFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQ2hhbmdlIHRva2VuIHRhcmdldCB0byB1c2VyLlxuICAgKi9cbiAgc3dpdGNoVG9rZW5UYXJnZXRUb1VzZXIoKTogdm9pZCB7XG4gICAgKHRoaXMuX3Rva2VuVGFyZ2V0JCBhcyBCZWhhdmlvclN1YmplY3Q8VG9rZW5UYXJnZXQ+KS5uZXh0KFRva2VuVGFyZ2V0LlVzZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdoZW4gd2Ugc3RhcnQgZW11bGF0aW9uIGZyb20gdGhlIFVJIChub3QgYnkgQVNNIGxvZ2luKSB3ZSBjYW4ndCByZXN0b3JlIHVzZXIgc2Vzc2lvbiBvbiBjcyBhZ2VudCBsb2dvdXQuXG4gICAqIE9ubHkgYXZhaWxhYmxlIHNvbHV0aW9uIGlzIHRvIGRyb3Agc2Vzc2lvbiB3ZSBjb3VsZCByZXN0b3JlLCB0byBhdm9pZCBhY2NvdW50IGhpamFjay5cbiAgICovXG4gIGNsZWFyRW11bGF0ZWRVc2VyVG9rZW4oKTogdm9pZCB7XG4gICAgdGhpcy5lbXVsYXRlZFVzZXJUb2tlbiA9IHVuZGVmaW5lZDtcbiAgfVxufVxuIl19