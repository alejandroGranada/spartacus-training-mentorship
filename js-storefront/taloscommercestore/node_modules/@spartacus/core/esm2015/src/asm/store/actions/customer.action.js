import { StateUtils } from '../../../state/utils/index';
import { CUSTOMER_SEARCH_DATA } from '../asm-state';
/**
 * @deprecated since 3.2, use asm lib instead
 */
export const CUSTOMER_SEARCH = '[Asm] Customer Search';
/**
 * @deprecated since 3.2, use asm lib instead
 */
export const CUSTOMER_SEARCH_FAIL = '[Asm] Customer Search Fail';
/**
 * @deprecated since 3.2, use asm lib instead
 */
export const CUSTOMER_SEARCH_SUCCESS = '[Asm] Customer Search Success';
/**
 * @deprecated since 3.2, use asm lib instead
 */
export const CUSTOMER_SEARCH_RESET = '[Asm] Customer Search Reset';
/**
 * @deprecated since 3.2, use asm lib instead
 */
export class CustomerSearch extends StateUtils.LoaderLoadAction {
    constructor(payload) {
        super(CUSTOMER_SEARCH_DATA);
        this.payload = payload;
        this.type = CUSTOMER_SEARCH;
    }
}
/**
 * @deprecated since 3.2, use asm lib instead
 */
export class CustomerSearchFail extends StateUtils.LoaderFailAction {
    constructor(payload) {
        super(CUSTOMER_SEARCH_DATA);
        this.payload = payload;
        this.type = CUSTOMER_SEARCH_FAIL;
    }
}
/**
 * @deprecated since 3.2, use asm lib instead
 */
export class CustomerSearchSuccess extends StateUtils.LoaderSuccessAction {
    constructor(payload) {
        super(CUSTOMER_SEARCH_DATA);
        this.payload = payload;
        this.type = CUSTOMER_SEARCH_SUCCESS;
    }
}
/**
 * @deprecated since 3.2, use asm lib instead
 */
export class CustomerSearchReset extends StateUtils.LoaderResetAction {
    constructor() {
        super(CUSTOMER_SEARCH_DATA);
        this.type = CUSTOMER_SEARCH_RESET;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tZXIuYWN0aW9uLmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9wcm9qZWN0cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL2FzbS9zdG9yZS9hY3Rpb25zL2N1c3RvbWVyLmFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFLeEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXBEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLHVCQUF1QixDQUFDO0FBQ3ZEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsNEJBQTRCLENBQUM7QUFDakU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRywrQkFBK0IsQ0FBQztBQUN2RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLDZCQUE2QixDQUFDO0FBRW5FOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGNBQWUsU0FBUSxVQUFVLENBQUMsZ0JBQWdCO0lBRTdELFlBQW1CLE9BQThCO1FBQy9DLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBRFgsWUFBTyxHQUFQLE9BQU8sQ0FBdUI7UUFEeEMsU0FBSSxHQUFHLGVBQWUsQ0FBQztJQUdoQyxDQUFDO0NBQ0Y7QUFFRDs7R0FFRztBQUNILE1BQU0sT0FBTyxrQkFBbUIsU0FBUSxVQUFVLENBQUMsZ0JBQWdCO0lBRWpFLFlBQW1CLE9BQVk7UUFDN0IsS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFEWCxZQUFPLEdBQVAsT0FBTyxDQUFLO1FBRHRCLFNBQUksR0FBRyxvQkFBb0IsQ0FBQztJQUdyQyxDQUFDO0NBQ0Y7QUFFRDs7R0FFRztBQUNILE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxVQUFVLENBQUMsbUJBQW1CO0lBRXZFLFlBQW1CLE9BQTJCO1FBQzVDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBRFgsWUFBTyxHQUFQLE9BQU8sQ0FBb0I7UUFEckMsU0FBSSxHQUFHLHVCQUF1QixDQUFDO0lBR3hDLENBQUM7Q0FDRjtBQUVEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLG1CQUFvQixTQUFRLFVBQVUsQ0FBQyxpQkFBaUI7SUFFbkU7UUFDRSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUZyQixTQUFJLEdBQUcscUJBQXFCLENBQUM7SUFHdEMsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhdGVVdGlscyB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2luZGV4JztcbmltcG9ydCB7XG4gIEN1c3RvbWVyU2VhcmNoT3B0aW9ucyxcbiAgQ3VzdG9tZXJTZWFyY2hQYWdlLFxufSBmcm9tICcuLi8uLi9tb2RlbHMvYXNtLm1vZGVscyc7XG5pbXBvcnQgeyBDVVNUT01FUl9TRUFSQ0hfREFUQSB9IGZyb20gJy4uL2FzbS1zdGF0ZSc7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgc2luY2UgMy4yLCB1c2UgYXNtIGxpYiBpbnN0ZWFkXG4gKi9cbmV4cG9ydCBjb25zdCBDVVNUT01FUl9TRUFSQ0ggPSAnW0FzbV0gQ3VzdG9tZXIgU2VhcmNoJztcbi8qKlxuICogQGRlcHJlY2F0ZWQgc2luY2UgMy4yLCB1c2UgYXNtIGxpYiBpbnN0ZWFkXG4gKi9cbmV4cG9ydCBjb25zdCBDVVNUT01FUl9TRUFSQ0hfRkFJTCA9ICdbQXNtXSBDdXN0b21lciBTZWFyY2ggRmFpbCc7XG4vKipcbiAqIEBkZXByZWNhdGVkIHNpbmNlIDMuMiwgdXNlIGFzbSBsaWIgaW5zdGVhZFxuICovXG5leHBvcnQgY29uc3QgQ1VTVE9NRVJfU0VBUkNIX1NVQ0NFU1MgPSAnW0FzbV0gQ3VzdG9tZXIgU2VhcmNoIFN1Y2Nlc3MnO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSAzLjIsIHVzZSBhc20gbGliIGluc3RlYWRcbiAqL1xuZXhwb3J0IGNvbnN0IENVU1RPTUVSX1NFQVJDSF9SRVNFVCA9ICdbQXNtXSBDdXN0b21lciBTZWFyY2ggUmVzZXQnO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIHNpbmNlIDMuMiwgdXNlIGFzbSBsaWIgaW5zdGVhZFxuICovXG5leHBvcnQgY2xhc3MgQ3VzdG9tZXJTZWFyY2ggZXh0ZW5kcyBTdGF0ZVV0aWxzLkxvYWRlckxvYWRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gQ1VTVE9NRVJfU0VBUkNIO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogQ3VzdG9tZXJTZWFyY2hPcHRpb25zKSB7XG4gICAgc3VwZXIoQ1VTVE9NRVJfU0VBUkNIX0RBVEEpO1xuICB9XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgc2luY2UgMy4yLCB1c2UgYXNtIGxpYiBpbnN0ZWFkXG4gKi9cbmV4cG9ydCBjbGFzcyBDdXN0b21lclNlYXJjaEZhaWwgZXh0ZW5kcyBTdGF0ZVV0aWxzLkxvYWRlckZhaWxBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gQ1VTVE9NRVJfU0VBUkNIX0ZBSUw7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBhbnkpIHtcbiAgICBzdXBlcihDVVNUT01FUl9TRUFSQ0hfREFUQSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSAzLjIsIHVzZSBhc20gbGliIGluc3RlYWRcbiAqL1xuZXhwb3J0IGNsYXNzIEN1c3RvbWVyU2VhcmNoU3VjY2VzcyBleHRlbmRzIFN0YXRlVXRpbHMuTG9hZGVyU3VjY2Vzc0FjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBDVVNUT01FUl9TRUFSQ0hfU1VDQ0VTUztcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IEN1c3RvbWVyU2VhcmNoUGFnZSkge1xuICAgIHN1cGVyKENVU1RPTUVSX1NFQVJDSF9EQVRBKTtcbiAgfVxufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkIHNpbmNlIDMuMiwgdXNlIGFzbSBsaWIgaW5zdGVhZFxuICovXG5leHBvcnQgY2xhc3MgQ3VzdG9tZXJTZWFyY2hSZXNldCBleHRlbmRzIFN0YXRlVXRpbHMuTG9hZGVyUmVzZXRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gQ1VTVE9NRVJfU0VBUkNIX1JFU0VUO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihDVVNUT01FUl9TRUFSQ0hfREFUQSk7XG4gIH1cbn1cblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSAzLjIsIHVzZSBhc20gbGliIGluc3RlYWRcbiAqL1xuLy8gYWN0aW9uIHR5cGVzXG5leHBvcnQgdHlwZSBDdXN0b21lckFjdGlvbiA9XG4gIHwgQ3VzdG9tZXJTZWFyY2hcbiAgfCBDdXN0b21lclNlYXJjaEZhaWxcbiAgfCBDdXN0b21lclNlYXJjaFN1Y2Nlc3NcbiAgfCBDdXN0b21lclNlYXJjaFJlc2V0O1xuIl19