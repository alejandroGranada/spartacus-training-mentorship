import { Inject, Injectable } from '@angular/core';
import { BehaviorSubject, zip } from 'rxjs';
import { deepMerge } from '../utils/deep-merge';
import { isFeatureEnabled } from '../../features-config';
import { Config, ConfigChunk, DefaultConfig, DefaultConfigChunk, RootConfig, } from '../config-tokens';
import { UnifiedInjector } from '../../lazy-loading/unified-injector';
import { skip, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../config-tokens";
import * as i2 from "../../lazy-loading/unified-injector";
export class ConfigurationService {
    constructor(rootConfig, defaultConfig, unifiedInjector, config) {
        this.rootConfig = rootConfig;
        this.defaultConfig = defaultConfig;
        this.unifiedInjector = unifiedInjector;
        this.ambientDefaultConfig = {};
        this.ambientConfig = {};
        this.config = config;
        this.unifiedConfig$ = new BehaviorSubject(config);
        // We need to use subscription to propagate changes to the config from the beginning.
        // It will be possible to make it lazy, when we drop this compatibility feature
        // in the future.
        this.subscription = this.feedUnifiedConfig().subscribe();
    }
    feedUnifiedConfig() {
        const configChunks$ = this.unifiedInjector.get(ConfigChunk, []);
        const defaultConfigChunks$ = this.unifiedInjector.get(DefaultConfigChunk, []);
        return zip(configChunks$, defaultConfigChunks$).pipe(
        // we don't need result from the root injector
        skip(1), tap(([configChunks, defaultConfigChunks]) => this.processConfig(configChunks, defaultConfigChunks)));
    }
    processConfig(configChunks, defaultConfigChunks) {
        if (defaultConfigChunks === null || defaultConfigChunks === void 0 ? void 0 : defaultConfigChunks.length) {
            deepMerge(this.ambientDefaultConfig, ...defaultConfigChunks);
        }
        if (configChunks.length) {
            deepMerge(this.ambientConfig, ...configChunks);
        }
        if (configChunks.length || defaultConfigChunks.length) {
            this.emitUnifiedConfig();
        }
    }
    emitUnifiedConfig() {
        const newConfig = deepMerge({}, this.defaultConfig, this.ambientDefaultConfig, this.ambientConfig, this.rootConfig);
        this.unifiedConfig$.next(newConfig);
        // compatibility mechanism, can be disabled with feature toggle
        if (!isFeatureEnabled(this.config, 'disableConfigUpdates')) {
            deepMerge(this.config, newConfig);
        }
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
        this.unifiedConfig$.complete();
    }
}
ConfigurationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ConfigurationService_Factory() { return new ConfigurationService(i0.ɵɵinject(i1.RootConfig), i0.ɵɵinject(i1.DefaultConfig), i0.ɵɵinject(i2.UnifiedInjector), i0.ɵɵinject(i1.Config)); }, token: ConfigurationService, providedIn: "root" });
ConfigurationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
ConfigurationService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [RootConfig,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [DefaultConfig,] }] },
    { type: UnifiedInjector },
    { type: undefined, decorators: [{ type: Inject, args: [Config,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJhdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9wcm9qZWN0cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL2NvbmZpZy9zZXJ2aWNlcy9jb25maWd1cmF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLGVBQWUsRUFBNEIsR0FBRyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN6RCxPQUFPLEVBQ0wsTUFBTSxFQUNOLFdBQVcsRUFDWCxhQUFhLEVBQ2Isa0JBQWtCLEVBQ2xCLFVBQVUsR0FDWCxNQUFNLGtCQUFrQixDQUFDO0FBQzFCLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUN0RSxPQUFPLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7O0FBSzNDLE1BQU0sT0FBTyxvQkFBb0I7SUFrQi9CLFlBQ2dDLFVBQWUsRUFDWixhQUFrQixFQUN6QyxlQUFnQyxFQUMxQixNQUFXO1FBSEcsZUFBVSxHQUFWLFVBQVUsQ0FBSztRQUNaLGtCQUFhLEdBQWIsYUFBYSxDQUFLO1FBQ3pDLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQVIzQix5QkFBb0IsR0FBUSxFQUFFLENBQUM7UUFDL0Isa0JBQWEsR0FBUSxFQUFFLENBQUM7UUFVdkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVsRCxxRkFBcUY7UUFDckYsK0VBQStFO1FBQy9FLGlCQUFpQjtRQUNqQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQzNELENBQUM7SUFFTyxpQkFBaUI7UUFDdkIsTUFBTSxhQUFhLEdBQXlCLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUNsRSxXQUFXLEVBQ1gsRUFBRSxDQUNILENBQUM7UUFDRixNQUFNLG9CQUFvQixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUNuRCxrQkFBa0IsRUFDbEIsRUFBRSxDQUNILENBQUM7UUFFRixPQUFPLEdBQUcsQ0FBQyxhQUFhLEVBQUUsb0JBQW9CLENBQUMsQ0FBQyxJQUFJO1FBQ2xELDhDQUE4QztRQUM5QyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ1AsR0FBRyxDQUFDLENBQUMsQ0FBQyxZQUFZLEVBQUUsbUJBQW1CLENBQUMsRUFBRSxFQUFFLENBQzFDLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLG1CQUFtQixDQUFDLENBQ3RELENBQ0YsQ0FBQztJQUNKLENBQUM7SUFFTyxhQUFhLENBQUMsWUFBbUIsRUFBRSxtQkFBMEI7UUFDbkUsSUFBSSxtQkFBbUIsYUFBbkIsbUJBQW1CLHVCQUFuQixtQkFBbUIsQ0FBRSxNQUFNLEVBQUU7WUFDL0IsU0FBUyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLG1CQUFtQixDQUFDLENBQUM7U0FDOUQ7UUFDRCxJQUFJLFlBQVksQ0FBQyxNQUFNLEVBQUU7WUFDdkIsU0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsR0FBRyxZQUFZLENBQUMsQ0FBQztTQUNoRDtRQUVELElBQUksWUFBWSxDQUFDLE1BQU0sSUFBSSxtQkFBbUIsQ0FBQyxNQUFNLEVBQUU7WUFDckQsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7U0FDMUI7SUFDSCxDQUFDO0lBRU8saUJBQWlCO1FBQ3ZCLE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FDekIsRUFBRSxFQUNGLElBQUksQ0FBQyxhQUFhLEVBQ2xCLElBQUksQ0FBQyxvQkFBb0IsRUFDekIsSUFBSSxDQUFDLGFBQWEsRUFDbEIsSUFBSSxDQUFDLFVBQVUsQ0FDaEIsQ0FBQztRQUNELElBQUksQ0FBQyxjQUF1QyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUU5RCwrREFBK0Q7UUFDL0QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsc0JBQXNCLENBQUMsRUFBRTtZQUMxRCxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztTQUNuQztJQUNILENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDakM7UUFDQSxJQUFJLENBQUMsY0FBdUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMzRCxDQUFDOzs7O1lBekZGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7OzRDQW9CSSxNQUFNLFNBQUMsVUFBVTs0Q0FDakIsTUFBTSxTQUFDLGFBQWE7WUExQmhCLGVBQWU7NENBNEJuQixNQUFNLFNBQUMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiwgemlwIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkZWVwTWVyZ2UgfSBmcm9tICcuLi91dGlscy9kZWVwLW1lcmdlJztcbmltcG9ydCB7IGlzRmVhdHVyZUVuYWJsZWQgfSBmcm9tICcuLi8uLi9mZWF0dXJlcy1jb25maWcnO1xuaW1wb3J0IHtcbiAgQ29uZmlnLFxuICBDb25maWdDaHVuayxcbiAgRGVmYXVsdENvbmZpZyxcbiAgRGVmYXVsdENvbmZpZ0NodW5rLFxuICBSb290Q29uZmlnLFxufSBmcm9tICcuLi9jb25maWctdG9rZW5zJztcbmltcG9ydCB7IFVuaWZpZWRJbmplY3RvciB9IGZyb20gJy4uLy4uL2xhenktbG9hZGluZy91bmlmaWVkLWluamVjdG9yJztcbmltcG9ydCB7IHNraXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIENvbmZpZ3VyYXRpb25TZXJ2aWNlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgLyoqXG4gICAqIFdpbGwgZW1pdCB1bmlmaWVkIGNvbmZpZ3VyYXRpb24gd2hlbiBzb21lIGFtYmllbnQgY29uZmlndXJhdGlvbiB3aWxsIGFwcGVhclxuICAgKlxuICAgKiBBbWJpZW50IGNvbmZpZ3VyYXRpb24gY2FuIGFwcGVhciB3aGVuIHdlIGxhenkgbG9hZCBtb2R1bGUgd2l0aCBjb25maWd1cmF0aW9uXG4gICAqL1xuICByZWFkb25seSB1bmlmaWVkQ29uZmlnJDogT2JzZXJ2YWJsZTxhbnk+O1xuXG4gIC8qKlxuICAgKiBHbG9iYWwgYXBwbGljYXRpb24gY29uZmlndXJhdGlvblxuICAgKi9cbiAgcmVhZG9ubHkgY29uZmlnOiBhbnk7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBhbWJpZW50RGVmYXVsdENvbmZpZzogYW55ID0ge307XG4gIHByaXZhdGUgcmVhZG9ubHkgYW1iaWVudENvbmZpZzogYW55ID0ge307XG5cbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KFJvb3RDb25maWcpIHByb3RlY3RlZCByb290Q29uZmlnOiBhbnksXG4gICAgQEluamVjdChEZWZhdWx0Q29uZmlnKSBwcm90ZWN0ZWQgZGVmYXVsdENvbmZpZzogYW55LFxuICAgIHByb3RlY3RlZCB1bmlmaWVkSW5qZWN0b3I6IFVuaWZpZWRJbmplY3RvcixcbiAgICBASW5qZWN0KENvbmZpZykgY29uZmlnOiBhbnlcbiAgKSB7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgdGhpcy51bmlmaWVkQ29uZmlnJCA9IG5ldyBCZWhhdmlvclN1YmplY3QoY29uZmlnKTtcblxuICAgIC8vIFdlIG5lZWQgdG8gdXNlIHN1YnNjcmlwdGlvbiB0byBwcm9wYWdhdGUgY2hhbmdlcyB0byB0aGUgY29uZmlnIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAvLyBJdCB3aWxsIGJlIHBvc3NpYmxlIHRvIG1ha2UgaXQgbGF6eSwgd2hlbiB3ZSBkcm9wIHRoaXMgY29tcGF0aWJpbGl0eSBmZWF0dXJlXG4gICAgLy8gaW4gdGhlIGZ1dHVyZS5cbiAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IHRoaXMuZmVlZFVuaWZpZWRDb25maWcoKS5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIHByaXZhdGUgZmVlZFVuaWZpZWRDb25maWcoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBjb25zdCBjb25maWdDaHVua3MkOiBPYnNlcnZhYmxlPG9iamVjdFtdPiA9IHRoaXMudW5pZmllZEluamVjdG9yLmdldChcbiAgICAgIENvbmZpZ0NodW5rLFxuICAgICAgW11cbiAgICApO1xuICAgIGNvbnN0IGRlZmF1bHRDb25maWdDaHVua3MkID0gdGhpcy51bmlmaWVkSW5qZWN0b3IuZ2V0KFxuICAgICAgRGVmYXVsdENvbmZpZ0NodW5rLFxuICAgICAgW11cbiAgICApO1xuXG4gICAgcmV0dXJuIHppcChjb25maWdDaHVua3MkLCBkZWZhdWx0Q29uZmlnQ2h1bmtzJCkucGlwZShcbiAgICAgIC8vIHdlIGRvbid0IG5lZWQgcmVzdWx0IGZyb20gdGhlIHJvb3QgaW5qZWN0b3JcbiAgICAgIHNraXAoMSksXG4gICAgICB0YXAoKFtjb25maWdDaHVua3MsIGRlZmF1bHRDb25maWdDaHVua3NdKSA9PlxuICAgICAgICB0aGlzLnByb2Nlc3NDb25maWcoY29uZmlnQ2h1bmtzLCBkZWZhdWx0Q29uZmlnQ2h1bmtzKVxuICAgICAgKVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIHByb2Nlc3NDb25maWcoY29uZmlnQ2h1bmtzOiBhbnlbXSwgZGVmYXVsdENvbmZpZ0NodW5rczogYW55W10pIHtcbiAgICBpZiAoZGVmYXVsdENvbmZpZ0NodW5rcz8ubGVuZ3RoKSB7XG4gICAgICBkZWVwTWVyZ2UodGhpcy5hbWJpZW50RGVmYXVsdENvbmZpZywgLi4uZGVmYXVsdENvbmZpZ0NodW5rcyk7XG4gICAgfVxuICAgIGlmIChjb25maWdDaHVua3MubGVuZ3RoKSB7XG4gICAgICBkZWVwTWVyZ2UodGhpcy5hbWJpZW50Q29uZmlnLCAuLi5jb25maWdDaHVua3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWdDaHVua3MubGVuZ3RoIHx8IGRlZmF1bHRDb25maWdDaHVua3MubGVuZ3RoKSB7XG4gICAgICB0aGlzLmVtaXRVbmlmaWVkQ29uZmlnKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBlbWl0VW5pZmllZENvbmZpZygpOiB2b2lkIHtcbiAgICBjb25zdCBuZXdDb25maWcgPSBkZWVwTWVyZ2UoXG4gICAgICB7fSxcbiAgICAgIHRoaXMuZGVmYXVsdENvbmZpZyxcbiAgICAgIHRoaXMuYW1iaWVudERlZmF1bHRDb25maWcsXG4gICAgICB0aGlzLmFtYmllbnRDb25maWcsXG4gICAgICB0aGlzLnJvb3RDb25maWdcbiAgICApO1xuICAgICh0aGlzLnVuaWZpZWRDb25maWckIGFzIEJlaGF2aW9yU3ViamVjdDxhbnk+KS5uZXh0KG5ld0NvbmZpZyk7XG5cbiAgICAvLyBjb21wYXRpYmlsaXR5IG1lY2hhbmlzbSwgY2FuIGJlIGRpc2FibGVkIHdpdGggZmVhdHVyZSB0b2dnbGVcbiAgICBpZiAoIWlzRmVhdHVyZUVuYWJsZWQodGhpcy5jb25maWcsICdkaXNhYmxlQ29uZmlnVXBkYXRlcycpKSB7XG4gICAgICBkZWVwTWVyZ2UodGhpcy5jb25maWcsIG5ld0NvbmZpZyk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgICAodGhpcy51bmlmaWVkQ29uZmlnJCBhcyBCZWhhdmlvclN1YmplY3Q8YW55PikuY29tcGxldGUoKTtcbiAgfVxufVxuIl19