import { InjectFlags, } from '@angular/core';
const NOT_FOUND_SYMBOL = {};
/**
 * CombinedInjector is able to combine more than one injector together.
 *
 * Can be used to instantiate lazy loaded modules with dependency modules,
 * so lazy loaded module can use instances provided in all dependency modules.
 *
 * Injector tries to resolve token in all Injector, taking into account the order
 * in which they were provided in complementaryInjectors and fallbacks to the
 * mainInjector.
 */
export class CombinedInjector {
    /**
     * @param mainInjector Component hierarchical injector
     * @param complementaryInjectors Additional injector that will be taken into an account when resolving dependencies
     */
    constructor(mainInjector, complementaryInjectors) {
        this.mainInjector = mainInjector;
        this.complementaryInjectors = complementaryInjectors;
    }
    get(token, notFoundValue, flags) {
        // eslint-disable-next-line no-bitwise
        if (flags & InjectFlags.Self) {
            if (notFoundValue !== undefined) {
                return notFoundValue;
            }
            throw new Error("CombinedInjector should be used as a parent injector / doesn't support self dependencies");
        }
        for (const injector of this.complementaryInjectors) {
            // First we are resolving providers provided at Self level
            // in all complementary injectors...
            const service = injector.get(token, NOT_FOUND_SYMBOL, InjectFlags.Self);
            if (service !== NOT_FOUND_SYMBOL) {
                return service;
            }
        }
        for (const injector of this.complementaryInjectors) {
            // next we try to resolve tokens from all levels
            const service = injector.get(token, NOT_FOUND_SYMBOL);
            if (service !== NOT_FOUND_SYMBOL) {
                return service;
            }
        }
        // ...and then fallback to main injector
        return this.mainInjector.get(token, notFoundValue);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tYmluZWQtaW5qZWN0b3IuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvUGF0cnlrL0Rlc2t0b3Avc3BhcnRhY3VzL3Byb2plY3RzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvdXRpbC9jb21iaW5lZC1pbmplY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsV0FBVyxHQUlaLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO0FBRTVCOzs7Ozs7Ozs7R0FTRztBQUNILE1BQU0sT0FBTyxnQkFBZ0I7SUFDM0I7OztPQUdHO0lBQ0gsWUFDVSxZQUFzQixFQUN0QixzQkFBa0M7UUFEbEMsaUJBQVksR0FBWixZQUFZLENBQVU7UUFDdEIsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUFZO0lBQ3pDLENBQUM7SUFRSixHQUFHLENBQUMsS0FBSyxFQUFFLGFBQW1CLEVBQUUsS0FBbUI7UUFDakQsc0NBQXNDO1FBQ3RDLElBQUksS0FBSyxHQUFHLFdBQVcsQ0FBQyxJQUFJLEVBQUU7WUFDNUIsSUFBSSxhQUFhLEtBQUssU0FBUyxFQUFFO2dCQUMvQixPQUFPLGFBQWEsQ0FBQzthQUN0QjtZQUNELE1BQU0sSUFBSSxLQUFLLENBQ2IsMEZBQTBGLENBQzNGLENBQUM7U0FDSDtRQUVELEtBQUssTUFBTSxRQUFRLElBQUksSUFBSSxDQUFDLHNCQUFzQixFQUFFO1lBQ2xELDBEQUEwRDtZQUMxRCxvQ0FBb0M7WUFDcEMsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3hFLElBQUksT0FBTyxLQUFLLGdCQUFnQixFQUFFO2dCQUNoQyxPQUFPLE9BQU8sQ0FBQzthQUNoQjtTQUNGO1FBRUQsS0FBSyxNQUFNLFFBQVEsSUFBSSxJQUFJLENBQUMsc0JBQXNCLEVBQUU7WUFDbEQsZ0RBQWdEO1lBQ2hELE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDLENBQUM7WUFDdEQsSUFBSSxPQUFPLEtBQUssZ0JBQWdCLEVBQUU7Z0JBQ2hDLE9BQU8sT0FBTyxDQUFDO2FBQ2hCO1NBQ0Y7UUFDRCx3Q0FBd0M7UUFDeEMsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDckQsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWJzdHJhY3RUeXBlLFxuICBJbmplY3RGbGFncyxcbiAgSW5qZWN0aW9uVG9rZW4sXG4gIEluamVjdG9yLFxuICBUeXBlLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuY29uc3QgTk9UX0ZPVU5EX1NZTUJPTCA9IHt9O1xuXG4vKipcbiAqIENvbWJpbmVkSW5qZWN0b3IgaXMgYWJsZSB0byBjb21iaW5lIG1vcmUgdGhhbiBvbmUgaW5qZWN0b3IgdG9nZXRoZXIuXG4gKlxuICogQ2FuIGJlIHVzZWQgdG8gaW5zdGFudGlhdGUgbGF6eSBsb2FkZWQgbW9kdWxlcyB3aXRoIGRlcGVuZGVuY3kgbW9kdWxlcyxcbiAqIHNvIGxhenkgbG9hZGVkIG1vZHVsZSBjYW4gdXNlIGluc3RhbmNlcyBwcm92aWRlZCBpbiBhbGwgZGVwZW5kZW5jeSBtb2R1bGVzLlxuICpcbiAqIEluamVjdG9yIHRyaWVzIHRvIHJlc29sdmUgdG9rZW4gaW4gYWxsIEluamVjdG9yLCB0YWtpbmcgaW50byBhY2NvdW50IHRoZSBvcmRlclxuICogaW4gd2hpY2ggdGhleSB3ZXJlIHByb3ZpZGVkIGluIGNvbXBsZW1lbnRhcnlJbmplY3RvcnMgYW5kIGZhbGxiYWNrcyB0byB0aGVcbiAqIG1haW5JbmplY3Rvci5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbWJpbmVkSW5qZWN0b3IgaW1wbGVtZW50cyBJbmplY3RvciB7XG4gIC8qKlxuICAgKiBAcGFyYW0gbWFpbkluamVjdG9yIENvbXBvbmVudCBoaWVyYXJjaGljYWwgaW5qZWN0b3JcbiAgICogQHBhcmFtIGNvbXBsZW1lbnRhcnlJbmplY3RvcnMgQWRkaXRpb25hbCBpbmplY3RvciB0aGF0IHdpbGwgYmUgdGFrZW4gaW50byBhbiBhY2NvdW50IHdoZW4gcmVzb2x2aW5nIGRlcGVuZGVuY2llc1xuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBtYWluSW5qZWN0b3I6IEluamVjdG9yLFxuICAgIHByaXZhdGUgY29tcGxlbWVudGFyeUluamVjdG9yczogSW5qZWN0b3JbXVxuICApIHt9XG5cbiAgZ2V0PFQ+KFxuICAgIHRva2VuOiBUeXBlPFQ+IHwgSW5qZWN0aW9uVG9rZW48VD4gfCBBYnN0cmFjdFR5cGU8VD4sXG4gICAgbm90Rm91bmRWYWx1ZT86IFQsXG4gICAgZmxhZ3M/OiBJbmplY3RGbGFnc1xuICApOiBUO1xuICBnZXQodG9rZW46IGFueSwgbm90Rm91bmRWYWx1ZT86IGFueSk6IGFueTtcbiAgZ2V0KHRva2VuLCBub3RGb3VuZFZhbHVlPzogYW55LCBmbGFncz86IEluamVjdEZsYWdzKTogYW55IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuICAgIGlmIChmbGFncyAmIEluamVjdEZsYWdzLlNlbGYpIHtcbiAgICAgIGlmIChub3RGb3VuZFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIG5vdEZvdW5kVmFsdWU7XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiQ29tYmluZWRJbmplY3RvciBzaG91bGQgYmUgdXNlZCBhcyBhIHBhcmVudCBpbmplY3RvciAvIGRvZXNuJ3Qgc3VwcG9ydCBzZWxmIGRlcGVuZGVuY2llc1wiXG4gICAgICApO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgaW5qZWN0b3Igb2YgdGhpcy5jb21wbGVtZW50YXJ5SW5qZWN0b3JzKSB7XG4gICAgICAvLyBGaXJzdCB3ZSBhcmUgcmVzb2x2aW5nIHByb3ZpZGVycyBwcm92aWRlZCBhdCBTZWxmIGxldmVsXG4gICAgICAvLyBpbiBhbGwgY29tcGxlbWVudGFyeSBpbmplY3RvcnMuLi5cbiAgICAgIGNvbnN0IHNlcnZpY2UgPSBpbmplY3Rvci5nZXQodG9rZW4sIE5PVF9GT1VORF9TWU1CT0wsIEluamVjdEZsYWdzLlNlbGYpO1xuICAgICAgaWYgKHNlcnZpY2UgIT09IE5PVF9GT1VORF9TWU1CT0wpIHtcbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBpbmplY3RvciBvZiB0aGlzLmNvbXBsZW1lbnRhcnlJbmplY3RvcnMpIHtcbiAgICAgIC8vIG5leHQgd2UgdHJ5IHRvIHJlc29sdmUgdG9rZW5zIGZyb20gYWxsIGxldmVsc1xuICAgICAgY29uc3Qgc2VydmljZSA9IGluamVjdG9yLmdldCh0b2tlbiwgTk9UX0ZPVU5EX1NZTUJPTCk7XG4gICAgICBpZiAoc2VydmljZSAhPT0gTk9UX0ZPVU5EX1NZTUJPTCkge1xuICAgICAgICByZXR1cm4gc2VydmljZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gLi4uYW5kIHRoZW4gZmFsbGJhY2sgdG8gbWFpbiBpbmplY3RvclxuICAgIHJldHVybiB0aGlzLm1haW5JbmplY3Rvci5nZXQodG9rZW4sIG5vdEZvdW5kVmFsdWUpO1xuICB9XG59XG4iXX0=