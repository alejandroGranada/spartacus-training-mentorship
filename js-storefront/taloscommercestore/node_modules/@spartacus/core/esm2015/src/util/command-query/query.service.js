import { Injectable } from '@angular/core';
import { BehaviorSubject, EMPTY, iif, isObservable, merge, of, Subscription, using, } from 'rxjs';
import { catchError, distinctUntilChanged, filter, pluck, share, switchMapTo, takeUntil, tap, } from 'rxjs/operators';
import { EventService } from '../../event/event.service';
import * as i0 from "@angular/core";
import * as i1 from "../../event/event.service";
export class QueryService {
    constructor(eventService) {
        this.eventService = eventService;
        this.subscriptions = new Subscription();
    }
    create(loaderFactory, options) {
        var _a, _b, _c;
        const state$ = new BehaviorSubject({
            data: undefined,
            error: false,
            loading: false,
        });
        // if query will be unsubscribed when data is loaded, we will end up with loading flag set to true
        // we want to retry this load on next subscription
        const retryInterruptedLoad$ = iif(() => state$.value.loading, of(undefined));
        const loadTrigger$ = this.getTriggersStream([
            state$.pipe(filter(({ data, loading, error }) => data === undefined && !loading && !error)),
            ...((_a = options === null || options === void 0 ? void 0 : options.reloadOn) !== null && _a !== void 0 ? _a : []),
            retryInterruptedLoad$,
        ]);
        const resetTrigger$ = this.getTriggersStream((_b = options === null || options === void 0 ? void 0 : options.resetOn) !== null && _b !== void 0 ? _b : []);
        const load$ = loadTrigger$.pipe(tap(() => state$.next(Object.assign(Object.assign({}, state$.value), { loading: true }))), switchMapTo(loaderFactory().pipe(takeUntil(resetTrigger$))), tap((data) => {
            state$.next({ loading: false, error: false, data });
        }), catchError((error) => {
            state$.next({ loading: false, error, data: undefined });
            return EMPTY;
        }), share());
        // reset logic
        if ((_c = options === null || options === void 0 ? void 0 : options.resetOn) === null || _c === void 0 ? void 0 : _c.length) {
            this.subscriptions.add(resetTrigger$.subscribe(() => {
                if (state$.value.data !== undefined ||
                    state$.value.error !== false ||
                    state$.value.loading !== false) {
                    state$.next({
                        data: undefined,
                        error: false,
                        loading: false,
                    });
                }
            }));
        }
        const query$ = using(() => load$.subscribe(), () => state$);
        const data$ = query$.pipe(pluck('data'), distinctUntilChanged());
        return { get: () => data$, getState: () => query$ };
    }
    getTriggersStream(triggers) {
        if (!triggers.length) {
            return EMPTY;
        }
        const observables = triggers.map((trigger) => {
            if (isObservable(trigger)) {
                return trigger;
            }
            return this.eventService.get(trigger);
        });
        return merge(...observables);
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
}
QueryService.ɵprov = i0.ɵɵdefineInjectable({ factory: function QueryService_Factory() { return new QueryService(i0.ɵɵinject(i1.EventService)); }, token: QueryService, providedIn: "root" });
QueryService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
QueryService.ctorParameters = () => [
    { type: EventService }
];
//# sourceMappingURL=data:application/json;base64,