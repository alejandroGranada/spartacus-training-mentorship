import { Injectable } from '@angular/core';
import { ReplaySubject, Subject, Subscription, zip } from 'rxjs';
import { concatMap, finalize, mergeMap, retry, switchMap, tap, } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class Command {
}
export var CommandStrategy;
(function (CommandStrategy) {
    CommandStrategy[CommandStrategy["Parallel"] = 0] = "Parallel";
    CommandStrategy[CommandStrategy["Queue"] = 1] = "Queue";
    CommandStrategy[CommandStrategy["CancelPrevious"] = 2] = "CancelPrevious";
    CommandStrategy[CommandStrategy["ErrorPrevious"] = 3] = "ErrorPrevious";
    // SkipIfOngoing,
    // ErrorIfOngoing
})(CommandStrategy || (CommandStrategy = {}));
export class CommandService {
    constructor() {
        this.subscriptions = new Subscription();
    }
    create(commandFactory, options) {
        const commands$ = new Subject();
        const results$ = new Subject();
        let process$;
        switch (options === null || options === void 0 ? void 0 : options.strategy) {
            case CommandStrategy.CancelPrevious:
            case CommandStrategy.ErrorPrevious:
                process$ = zip(commands$, results$).pipe(switchMap(([cmd, notifier$]) => commandFactory(cmd).pipe(tap(notifier$), finalize(() => options.strategy === CommandStrategy.CancelPrevious
                    ? notifier$.complete()
                    : notifier$.error(new Error('Canceled by next command'))))), retry());
                break;
            case CommandStrategy.Parallel:
                process$ = zip(commands$, results$).pipe(mergeMap(([cmd, notifier$]) => commandFactory(cmd).pipe(tap(notifier$))), retry());
                break;
            case CommandStrategy.Queue:
            default:
                process$ = zip(commands$, results$).pipe(concatMap(([cmd, notifier$]) => commandFactory(cmd).pipe(tap(notifier$))), retry());
                break;
        }
        this.subscriptions.add(process$.subscribe());
        const command = new (class extends Command {
            constructor() {
                super(...arguments);
                this.execute = (parameters) => {
                    const result$ = new ReplaySubject();
                    results$.next(result$);
                    commands$.next(parameters);
                    return result$;
                };
            }
        })();
        return command;
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
}
CommandService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CommandService_Factory() { return new CommandService(); }, token: CommandService, providedIn: "root" });
CommandService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
CommandService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9wcm9qZWN0cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL3V0aWwvY29tbWFuZC1xdWVyeS9jb21tYW5kLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUN0RCxPQUFPLEVBQWMsYUFBYSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsR0FBRyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzdFLE9BQU8sRUFDTCxTQUFTLEVBQ1QsUUFBUSxFQUNSLFFBQVEsRUFDUixLQUFLLEVBQ0wsU0FBUyxFQUNULEdBQUcsR0FDSixNQUFNLGdCQUFnQixDQUFDOztBQUV4QixNQUFNLE9BQWdCLE9BQU87Q0FFNUI7QUFFRCxNQUFNLENBQU4sSUFBWSxlQU9YO0FBUEQsV0FBWSxlQUFlO0lBQ3pCLDZEQUFRLENBQUE7SUFDUix1REFBSyxDQUFBO0lBQ0wseUVBQWMsQ0FBQTtJQUNkLHVFQUFhLENBQUE7SUFDYixpQkFBaUI7SUFDakIsaUJBQWlCO0FBQ25CLENBQUMsRUFQVyxlQUFlLEtBQWYsZUFBZSxRQU8xQjtBQUtELE1BQU0sT0FBTyxjQUFjO0lBR3pCO1FBRlUsa0JBQWEsR0FBaUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUU1QyxDQUFDO0lBRWhCLE1BQU0sQ0FDSixjQUErQyxFQUMvQyxPQUF3QztRQUV4QyxNQUFNLFNBQVMsR0FBRyxJQUFJLE9BQU8sRUFBSyxDQUFDO1FBQ25DLE1BQU0sUUFBUSxHQUFHLElBQUksT0FBTyxFQUFvQixDQUFDO1FBRWpELElBQUksUUFBeUIsQ0FBQztRQUU5QixRQUFRLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxRQUFRLEVBQUU7WUFDekIsS0FBSyxlQUFlLENBQUMsY0FBYyxDQUFDO1lBQ3BDLEtBQUssZUFBZSxDQUFDLGFBQWE7Z0JBQ2hDLFFBQVEsR0FBRyxHQUFHLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FDdEMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLEVBQUUsRUFBRSxDQUM3QixjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUN0QixHQUFHLENBQUMsU0FBUyxDQUFDLEVBQ2QsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUNaLE9BQU8sQ0FBQyxRQUFRLEtBQUssZUFBZSxDQUFDLGNBQWM7b0JBQ2pELENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFO29CQUN0QixDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLENBQzNELENBQ0YsQ0FDRixFQUNELEtBQUssRUFBRSxDQUNSLENBQUM7Z0JBQ0YsTUFBTTtZQUVSLEtBQUssZUFBZSxDQUFDLFFBQVE7Z0JBQzNCLFFBQVEsR0FBRyxHQUFHLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FDdEMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLEVBQUUsRUFBRSxDQUM1QixjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUN6QyxFQUNELEtBQUssRUFBRSxDQUNSLENBQUM7Z0JBQ0YsTUFBTTtZQUVSLEtBQUssZUFBZSxDQUFDLEtBQUssQ0FBQztZQUMzQjtnQkFDRSxRQUFRLEdBQUcsR0FBRyxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQ3RDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxFQUFFLEVBQUUsQ0FDN0IsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FDekMsRUFDRCxLQUFLLEVBQUUsQ0FDUixDQUFDO2dCQUNGLE1BQU07U0FDVDtRQUVELElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO1FBRTdDLE1BQU0sT0FBTyxHQUFrQixJQUFJLENBQUMsS0FBTSxTQUFRLE9BQU87WUFBckI7O2dCQUNsQyxZQUFPLEdBQUcsQ0FBQyxVQUFhLEVBQUUsRUFBRTtvQkFDMUIsTUFBTSxPQUFPLEdBQUcsSUFBSSxhQUFhLEVBQUssQ0FBQztvQkFDdkMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDdkIsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztvQkFDM0IsT0FBTyxPQUFPLENBQUM7Z0JBQ2pCLENBQUMsQ0FBQztZQUNKLENBQUM7U0FBQSxDQUFDLEVBQUUsQ0FBQztRQUVMLE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNuQyxDQUFDOzs7O1lBdkVGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgUmVwbGF5U3ViamVjdCwgU3ViamVjdCwgU3Vic2NyaXB0aW9uLCB6aXAgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7XG4gIGNvbmNhdE1hcCxcbiAgZmluYWxpemUsXG4gIG1lcmdlTWFwLFxuICByZXRyeSxcbiAgc3dpdGNoTWFwLFxuICB0YXAsXG59IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENvbW1hbmQ8UCA9IHVuZGVmaW5lZCwgUiA9IHVua25vd24+IHtcbiAgYWJzdHJhY3QgZXhlY3V0ZShwYXJhbXM6IFApOiBPYnNlcnZhYmxlPFI+O1xufVxuXG5leHBvcnQgZW51bSBDb21tYW5kU3RyYXRlZ3kge1xuICBQYXJhbGxlbCxcbiAgUXVldWUsXG4gIENhbmNlbFByZXZpb3VzLFxuICBFcnJvclByZXZpb3VzLFxuICAvLyBTa2lwSWZPbmdvaW5nLFxuICAvLyBFcnJvcklmT25nb2luZ1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgQ29tbWFuZFNlcnZpY2UgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICBwcm90ZWN0ZWQgc3Vic2NyaXB0aW9uczogU3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBjcmVhdGU8UCA9IHVuZGVmaW5lZCwgUiA9IHVua25vd24+KFxuICAgIGNvbW1hbmRGYWN0b3J5OiAoY29tbWFuZDogUCkgPT4gT2JzZXJ2YWJsZTxhbnk+LFxuICAgIG9wdGlvbnM/OiB7IHN0cmF0ZWd5PzogQ29tbWFuZFN0cmF0ZWd5IH1cbiAgKTogQ29tbWFuZDxQLCBSPiB7XG4gICAgY29uc3QgY29tbWFuZHMkID0gbmV3IFN1YmplY3Q8UD4oKTtcbiAgICBjb25zdCByZXN1bHRzJCA9IG5ldyBTdWJqZWN0PFJlcGxheVN1YmplY3Q8Uj4+KCk7XG5cbiAgICBsZXQgcHJvY2VzcyQ6IE9ic2VydmFibGU8YW55PjtcblxuICAgIHN3aXRjaCAob3B0aW9ucz8uc3RyYXRlZ3kpIHtcbiAgICAgIGNhc2UgQ29tbWFuZFN0cmF0ZWd5LkNhbmNlbFByZXZpb3VzOlxuICAgICAgY2FzZSBDb21tYW5kU3RyYXRlZ3kuRXJyb3JQcmV2aW91czpcbiAgICAgICAgcHJvY2VzcyQgPSB6aXAoY29tbWFuZHMkLCByZXN1bHRzJCkucGlwZShcbiAgICAgICAgICBzd2l0Y2hNYXAoKFtjbWQsIG5vdGlmaWVyJF0pID0+XG4gICAgICAgICAgICBjb21tYW5kRmFjdG9yeShjbWQpLnBpcGUoXG4gICAgICAgICAgICAgIHRhcChub3RpZmllciQpLFxuICAgICAgICAgICAgICBmaW5hbGl6ZSgoKSA9PlxuICAgICAgICAgICAgICAgIG9wdGlvbnMuc3RyYXRlZ3kgPT09IENvbW1hbmRTdHJhdGVneS5DYW5jZWxQcmV2aW91c1xuICAgICAgICAgICAgICAgICAgPyBub3RpZmllciQuY29tcGxldGUoKVxuICAgICAgICAgICAgICAgICAgOiBub3RpZmllciQuZXJyb3IobmV3IEVycm9yKCdDYW5jZWxlZCBieSBuZXh0IGNvbW1hbmQnKSlcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICksXG4gICAgICAgICAgcmV0cnkoKVxuICAgICAgICApO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBDb21tYW5kU3RyYXRlZ3kuUGFyYWxsZWw6XG4gICAgICAgIHByb2Nlc3MkID0gemlwKGNvbW1hbmRzJCwgcmVzdWx0cyQpLnBpcGUoXG4gICAgICAgICAgbWVyZ2VNYXAoKFtjbWQsIG5vdGlmaWVyJF0pID0+XG4gICAgICAgICAgICBjb21tYW5kRmFjdG9yeShjbWQpLnBpcGUodGFwKG5vdGlmaWVyJCkpXG4gICAgICAgICAgKSxcbiAgICAgICAgICByZXRyeSgpXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIENvbW1hbmRTdHJhdGVneS5RdWV1ZTpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHByb2Nlc3MkID0gemlwKGNvbW1hbmRzJCwgcmVzdWx0cyQpLnBpcGUoXG4gICAgICAgICAgY29uY2F0TWFwKChbY21kLCBub3RpZmllciRdKSA9PlxuICAgICAgICAgICAgY29tbWFuZEZhY3RvcnkoY21kKS5waXBlKHRhcChub3RpZmllciQpKVxuICAgICAgICAgICksXG4gICAgICAgICAgcmV0cnkoKVxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMuYWRkKHByb2Nlc3MkLnN1YnNjcmliZSgpKTtcblxuICAgIGNvbnN0IGNvbW1hbmQ6IENvbW1hbmQ8UCwgUj4gPSBuZXcgKGNsYXNzIGV4dGVuZHMgQ29tbWFuZCB7XG4gICAgICBleGVjdXRlID0gKHBhcmFtZXRlcnM6IFApID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0JCA9IG5ldyBSZXBsYXlTdWJqZWN0PFI+KCk7XG4gICAgICAgIHJlc3VsdHMkLm5leHQocmVzdWx0JCk7XG4gICAgICAgIGNvbW1hbmRzJC5uZXh0KHBhcmFtZXRlcnMpO1xuICAgICAgICByZXR1cm4gcmVzdWx0JDtcbiAgICAgIH07XG4gICAgfSkoKTtcblxuICAgIHJldHVybiBjb21tYW5kO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLnVuc3Vic2NyaWJlKCk7XG4gIH1cbn1cbiJdfQ==