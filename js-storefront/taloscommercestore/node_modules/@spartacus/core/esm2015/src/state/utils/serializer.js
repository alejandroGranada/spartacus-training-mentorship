import { entityLoaderStateSelector } from './entity-loader/entity-loader.selectors';
const ALL = 'all';
export function serializeSearchConfig(config, id) {
    var _a, _b, _c;
    return `${id !== null && id !== void 0 ? id : ''}?pageSize=${(_a = config.pageSize) !== null && _a !== void 0 ? _a : ''}&currentPage=${(_b = config.currentPage) !== null && _b !== void 0 ? _b : ''}&sort=${(_c = config.sort) !== null && _c !== void 0 ? _c : ''}`;
}
export function denormalizeSearch(state, params) {
    return denormalizeCustomB2BSearch(state.list, state.entities, params);
}
export function denormalizeCustomB2BSearch(list, entities, params, id) {
    const serializedList = entityLoaderStateSelector(list, params ? serializeSearchConfig(params, id) : id !== null && id !== void 0 ? id : ALL);
    if (!serializedList.value || !serializedList.value.ids) {
        return serializedList;
    }
    const res = Object.assign({}, serializedList, {
        value: {
            values: serializedList.value.ids.map((code) => entityLoaderStateSelector(entities, code).value),
        },
    });
    if (params) {
        res.value.pagination = serializedList.value.pagination;
        res.value.sorts = serializedList.value.sorts;
    }
    return res;
}
export function normalizeListPage(list, id) {
    const values = (list === null || list === void 0 ? void 0 : list.values) || [];
    const page = {
        ids: values.map((data) => data[id]),
    };
    if (list.pagination) {
        page.pagination = list.pagination;
    }
    if (list.sorts) {
        page.sorts = list.sorts;
    }
    return { values, page };
}
export function serializeParams(params, searchConfig) {
    return [params, serializeSearchConfig(searchConfig)].toString();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWFsaXplci5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy9QYXRyeWsvRGVza3RvcC9zcGFydGFjdXMvcHJvamVjdHMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9zdGF0ZS91dGlscy9zZXJpYWxpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBR3BGLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQztBQUVsQixNQUFNLFVBQVUscUJBQXFCLENBQ25DLE1BQW9CLEVBQ3BCLEVBQVc7O0lBRVgsT0FBTyxHQUFHLEVBQUUsYUFBRixFQUFFLGNBQUYsRUFBRSxHQUFJLEVBQUUsYUFBYSxNQUFBLE1BQU0sQ0FBQyxRQUFRLG1DQUFJLEVBQUUsZ0JBQ2xELE1BQUEsTUFBTSxDQUFDLFdBQVcsbUNBQUksRUFDeEIsU0FBUyxNQUFBLE1BQU0sQ0FBQyxJQUFJLG1DQUFJLEVBQUUsRUFBRSxDQUFDO0FBQy9CLENBQUM7QUFFRCxNQUFNLFVBQVUsaUJBQWlCLENBQy9CLEtBQXlCLEVBQ3pCLE1BQXFCO0lBRXJCLE9BQU8sMEJBQTBCLENBQUksS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzNFLENBQUM7QUFFRCxNQUFNLFVBQVUsMEJBQTBCLENBQ3hDLElBQWtDLEVBQ2xDLFFBQThCLEVBQzlCLE1BQXFCLEVBQ3JCLEVBQVc7SUFFWCxNQUFNLGNBQWMsR0FBUSx5QkFBeUIsQ0FDbkQsSUFBSSxFQUNKLE1BQU0sQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLGFBQUYsRUFBRSxjQUFGLEVBQUUsR0FBSSxHQUFHLENBQ3ZELENBQUM7SUFDRixJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFO1FBQ3RELE9BQU8sY0FBYyxDQUFDO0tBQ3ZCO0lBQ0QsTUFBTSxHQUFHLEdBQWtDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLGNBQWMsRUFBRTtRQUMzRSxLQUFLLEVBQUU7WUFDTCxNQUFNLEVBQUUsY0FBYyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUNsQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMseUJBQXlCLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FDMUQ7U0FDRjtLQUNGLENBQUMsQ0FBQztJQUNILElBQUksTUFBTSxFQUFFO1FBQ1YsR0FBRyxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUM7UUFDdkQsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7S0FDOUM7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFFRCxNQUFNLFVBQVUsaUJBQWlCLENBQy9CLElBQXNCLEVBQ3RCLEVBQVU7SUFFVixNQUFNLE1BQU0sR0FBRyxDQUFBLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxNQUFNLEtBQUksRUFBRSxDQUFDO0lBQ2xDLE1BQU0sSUFBSSxHQUFjO1FBQ3RCLEdBQUcsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEMsQ0FBQztJQUNGLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtRQUNuQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7S0FDbkM7SUFDRCxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDZCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7S0FDekI7SUFDRCxPQUFPLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDO0FBQzFCLENBQUM7QUFFRCxNQUFNLFVBQVUsZUFBZSxDQUM3QixNQUF5QixFQUN6QixZQUEwQjtJQUUxQixPQUFPLENBQUMsTUFBTSxFQUFFLHFCQUFxQixDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDbEUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVudGl0aWVzTW9kZWwsIExpc3RNb2RlbCB9IGZyb20gJy4uLy4uL21vZGVsL2luZGV4JztcbmltcG9ydCB7IFNlYXJjaENvbmZpZyB9IGZyb20gJy4uLy4uL3Byb2R1Y3QvbW9kZWwvc2VhcmNoLWNvbmZpZyc7XG5pbXBvcnQgeyBFbnRpdHlMaXN0U3RhdGUgfSBmcm9tICcuL2VudGl0eS1saXN0LXN0YXRlJztcbmltcG9ydCB7IEVudGl0eUxvYWRlclN0YXRlIH0gZnJvbSAnLi9lbnRpdHktbG9hZGVyL2VudGl0eS1sb2FkZXItc3RhdGUnO1xuaW1wb3J0IHsgZW50aXR5TG9hZGVyU3RhdGVTZWxlY3RvciB9IGZyb20gJy4vZW50aXR5LWxvYWRlci9lbnRpdHktbG9hZGVyLnNlbGVjdG9ycyc7XG5pbXBvcnQgeyBMb2FkZXJTdGF0ZSB9IGZyb20gJy4vbG9hZGVyL2xvYWRlci1zdGF0ZSc7XG5cbmNvbnN0IEFMTCA9ICdhbGwnO1xuXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplU2VhcmNoQ29uZmlnKFxuICBjb25maWc6IFNlYXJjaENvbmZpZyxcbiAgaWQ/OiBzdHJpbmdcbik6IHN0cmluZyB7XG4gIHJldHVybiBgJHtpZCA/PyAnJ30/cGFnZVNpemU9JHtjb25maWcucGFnZVNpemUgPz8gJyd9JmN1cnJlbnRQYWdlPSR7XG4gICAgY29uZmlnLmN1cnJlbnRQYWdlID8/ICcnXG4gIH0mc29ydD0ke2NvbmZpZy5zb3J0ID8/ICcnfWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZW5vcm1hbGl6ZVNlYXJjaDxUPihcbiAgc3RhdGU6IEVudGl0eUxpc3RTdGF0ZTxUPixcbiAgcGFyYW1zPzogU2VhcmNoQ29uZmlnXG4pOiBMb2FkZXJTdGF0ZTxFbnRpdGllc01vZGVsPFQ+PiB7XG4gIHJldHVybiBkZW5vcm1hbGl6ZUN1c3RvbUIyQlNlYXJjaDxUPihzdGF0ZS5saXN0LCBzdGF0ZS5lbnRpdGllcywgcGFyYW1zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlbm9ybWFsaXplQ3VzdG9tQjJCU2VhcmNoPFQ+KFxuICBsaXN0OiBFbnRpdHlMb2FkZXJTdGF0ZTxMaXN0TW9kZWw+LFxuICBlbnRpdGllczogRW50aXR5TG9hZGVyU3RhdGU8VD4sXG4gIHBhcmFtcz86IFNlYXJjaENvbmZpZyxcbiAgaWQ/OiBzdHJpbmdcbik6IExvYWRlclN0YXRlPEVudGl0aWVzTW9kZWw8VD4+IHtcbiAgY29uc3Qgc2VyaWFsaXplZExpc3Q6IGFueSA9IGVudGl0eUxvYWRlclN0YXRlU2VsZWN0b3IoXG4gICAgbGlzdCxcbiAgICBwYXJhbXMgPyBzZXJpYWxpemVTZWFyY2hDb25maWcocGFyYW1zLCBpZCkgOiBpZCA/PyBBTExcbiAgKTtcbiAgaWYgKCFzZXJpYWxpemVkTGlzdC52YWx1ZSB8fCAhc2VyaWFsaXplZExpc3QudmFsdWUuaWRzKSB7XG4gICAgcmV0dXJuIHNlcmlhbGl6ZWRMaXN0O1xuICB9XG4gIGNvbnN0IHJlczogTG9hZGVyU3RhdGU8RW50aXRpZXNNb2RlbDxUPj4gPSBPYmplY3QuYXNzaWduKHt9LCBzZXJpYWxpemVkTGlzdCwge1xuICAgIHZhbHVlOiB7XG4gICAgICB2YWx1ZXM6IHNlcmlhbGl6ZWRMaXN0LnZhbHVlLmlkcy5tYXAoXG4gICAgICAgIChjb2RlKSA9PiBlbnRpdHlMb2FkZXJTdGF0ZVNlbGVjdG9yKGVudGl0aWVzLCBjb2RlKS52YWx1ZVxuICAgICAgKSxcbiAgICB9LFxuICB9KTtcbiAgaWYgKHBhcmFtcykge1xuICAgIHJlcy52YWx1ZS5wYWdpbmF0aW9uID0gc2VyaWFsaXplZExpc3QudmFsdWUucGFnaW5hdGlvbjtcbiAgICByZXMudmFsdWUuc29ydHMgPSBzZXJpYWxpemVkTGlzdC52YWx1ZS5zb3J0cztcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplTGlzdFBhZ2U8VD4oXG4gIGxpc3Q6IEVudGl0aWVzTW9kZWw8VD4sXG4gIGlkOiBzdHJpbmdcbik6IHsgdmFsdWVzOiBUW107IHBhZ2U6IExpc3RNb2RlbCB9IHtcbiAgY29uc3QgdmFsdWVzID0gbGlzdD8udmFsdWVzIHx8IFtdO1xuICBjb25zdCBwYWdlOiBMaXN0TW9kZWwgPSB7XG4gICAgaWRzOiB2YWx1ZXMubWFwKChkYXRhKSA9PiBkYXRhW2lkXSksXG4gIH07XG4gIGlmIChsaXN0LnBhZ2luYXRpb24pIHtcbiAgICBwYWdlLnBhZ2luYXRpb24gPSBsaXN0LnBhZ2luYXRpb247XG4gIH1cbiAgaWYgKGxpc3Quc29ydHMpIHtcbiAgICBwYWdlLnNvcnRzID0gbGlzdC5zb3J0cztcbiAgfVxuICByZXR1cm4geyB2YWx1ZXMsIHBhZ2UgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZVBhcmFtcyhcbiAgcGFyYW1zOiBzdHJpbmcgfCBzdHJpbmdbXSxcbiAgc2VhcmNoQ29uZmlnOiBTZWFyY2hDb25maWdcbik6IHN0cmluZyB7XG4gIHJldHVybiBbcGFyYW1zLCBzZXJpYWxpemVTZWFyY2hDb25maWcoc2VhcmNoQ29uZmlnKV0udG9TdHJpbmcoKTtcbn1cbiJdfQ==