import { InjectionToken, Optional, PLATFORM_ID } from '@angular/core';
import { TransferState } from '@angular/platform-browser';
import { META_REDUCERS } from '@ngrx/store';
import { AuthStatePersistenceService } from '../../auth/user-auth/services/auth-state-persistence.service';
import { Config } from '../../config/config-tokens';
import { WindowRef } from '../../window/window-ref';
import { getStorageSyncReducer } from './storage-sync.reducer';
import { getTransferStateReducer } from './transfer-state.reducer';
export { getStateSlice } from '../utils/get-state-slice';
export { getStorageSyncReducer } from './storage-sync.reducer';
export * from './transfer-state.reducer';
export const TRANSFER_STATE_META_REDUCER = new InjectionToken('TransferStateMetaReducer');
export const STORAGE_SYNC_META_REDUCER = new InjectionToken('StorageSyncMetaReducer');
const ɵ0 = getTransferStateReducer, ɵ1 = getStorageSyncReducer;
export const stateMetaReducers = [
    {
        provide: TRANSFER_STATE_META_REDUCER,
        useFactory: ɵ0,
        deps: [
            PLATFORM_ID,
            [new Optional(), TransferState],
            [new Optional(), Config],
            [new Optional(), AuthStatePersistenceService],
        ],
    },
    {
        provide: STORAGE_SYNC_META_REDUCER,
        useFactory: ɵ1,
        deps: [WindowRef, [new Optional(), Config]],
    },
    {
        provide: META_REDUCERS,
        useExisting: TRANSFER_STATE_META_REDUCER,
        multi: true,
    },
    {
        provide: META_REDUCERS,
        useExisting: STORAGE_SYNC_META_REDUCER,
        multi: true,
    },
];
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvUGF0cnlrL0Rlc2t0b3Avc3BhcnRhY3VzL3Byb2plY3RzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvc3RhdGUvcmVkdWNlcnMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzVDLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLDhEQUE4RCxDQUFDO0FBQzNHLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDL0QsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFbkUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQy9ELGNBQWMsMEJBQTBCLENBQUM7QUFFekMsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQUcsSUFBSSxjQUFjLENBQzNELDBCQUEwQixDQUMzQixDQUFDO0FBQ0YsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxjQUFjLENBQ3pELHdCQUF3QixDQUN6QixDQUFDO1dBS2MsdUJBQXVCLE9BVXZCLHFCQUFxQjtBQWJyQyxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBZTtJQUMzQztRQUNFLE9BQU8sRUFBRSwyQkFBMkI7UUFDcEMsVUFBVSxJQUF5QjtRQUNuQyxJQUFJLEVBQUU7WUFDSixXQUFXO1lBQ1gsQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLGFBQWEsQ0FBQztZQUMvQixDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsTUFBTSxDQUFDO1lBQ3hCLENBQUMsSUFBSSxRQUFRLEVBQUUsRUFBRSwyQkFBMkIsQ0FBQztTQUM5QztLQUNGO0lBQ0Q7UUFDRSxPQUFPLEVBQUUseUJBQXlCO1FBQ2xDLFVBQVUsSUFBdUI7UUFDakMsSUFBSSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxRQUFRLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztLQUM1QztJQUNEO1FBQ0UsT0FBTyxFQUFFLGFBQWE7UUFDdEIsV0FBVyxFQUFFLDJCQUEyQjtRQUN4QyxLQUFLLEVBQUUsSUFBSTtLQUNaO0lBQ0Q7UUFDRSxPQUFPLEVBQUUsYUFBYTtRQUN0QixXQUFXLEVBQUUseUJBQXlCO1FBQ3RDLEtBQUssRUFBRSxJQUFJO0tBQ1o7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4sIE9wdGlvbmFsLCBQTEFURk9STV9JRCwgUHJvdmlkZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRyYW5zZmVyU3RhdGUgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IE1FVEFfUkVEVUNFUlMgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBBdXRoU3RhdGVQZXJzaXN0ZW5jZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9hdXRoL3VzZXItYXV0aC9zZXJ2aWNlcy9hdXRoLXN0YXRlLXBlcnNpc3RlbmNlLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAnLi4vLi4vY29uZmlnL2NvbmZpZy10b2tlbnMnO1xuaW1wb3J0IHsgV2luZG93UmVmIH0gZnJvbSAnLi4vLi4vd2luZG93L3dpbmRvdy1yZWYnO1xuaW1wb3J0IHsgZ2V0U3RvcmFnZVN5bmNSZWR1Y2VyIH0gZnJvbSAnLi9zdG9yYWdlLXN5bmMucmVkdWNlcic7XG5pbXBvcnQgeyBnZXRUcmFuc2ZlclN0YXRlUmVkdWNlciB9IGZyb20gJy4vdHJhbnNmZXItc3RhdGUucmVkdWNlcic7XG5cbmV4cG9ydCB7IGdldFN0YXRlU2xpY2UgfSBmcm9tICcuLi91dGlscy9nZXQtc3RhdGUtc2xpY2UnO1xuZXhwb3J0IHsgZ2V0U3RvcmFnZVN5bmNSZWR1Y2VyIH0gZnJvbSAnLi9zdG9yYWdlLXN5bmMucmVkdWNlcic7XG5leHBvcnQgKiBmcm9tICcuL3RyYW5zZmVyLXN0YXRlLnJlZHVjZXInO1xuXG5leHBvcnQgY29uc3QgVFJBTlNGRVJfU1RBVEVfTUVUQV9SRURVQ0VSID0gbmV3IEluamVjdGlvblRva2VuKFxuICAnVHJhbnNmZXJTdGF0ZU1ldGFSZWR1Y2VyJ1xuKTtcbmV4cG9ydCBjb25zdCBTVE9SQUdFX1NZTkNfTUVUQV9SRURVQ0VSID0gbmV3IEluamVjdGlvblRva2VuKFxuICAnU3RvcmFnZVN5bmNNZXRhUmVkdWNlcidcbik7XG5cbmV4cG9ydCBjb25zdCBzdGF0ZU1ldGFSZWR1Y2VyczogUHJvdmlkZXJbXSA9IFtcbiAge1xuICAgIHByb3ZpZGU6IFRSQU5TRkVSX1NUQVRFX01FVEFfUkVEVUNFUixcbiAgICB1c2VGYWN0b3J5OiBnZXRUcmFuc2ZlclN0YXRlUmVkdWNlcixcbiAgICBkZXBzOiBbXG4gICAgICBQTEFURk9STV9JRCxcbiAgICAgIFtuZXcgT3B0aW9uYWwoKSwgVHJhbnNmZXJTdGF0ZV0sXG4gICAgICBbbmV3IE9wdGlvbmFsKCksIENvbmZpZ10sXG4gICAgICBbbmV3IE9wdGlvbmFsKCksIEF1dGhTdGF0ZVBlcnNpc3RlbmNlU2VydmljZV0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIHByb3ZpZGU6IFNUT1JBR0VfU1lOQ19NRVRBX1JFRFVDRVIsXG4gICAgdXNlRmFjdG9yeTogZ2V0U3RvcmFnZVN5bmNSZWR1Y2VyLFxuICAgIGRlcHM6IFtXaW5kb3dSZWYsIFtuZXcgT3B0aW9uYWwoKSwgQ29uZmlnXV0sXG4gIH0sXG4gIHtcbiAgICBwcm92aWRlOiBNRVRBX1JFRFVDRVJTLFxuICAgIHVzZUV4aXN0aW5nOiBUUkFOU0ZFUl9TVEFURV9NRVRBX1JFRFVDRVIsXG4gICAgbXVsdGk6IHRydWUsXG4gIH0sXG4gIHtcbiAgICBwcm92aWRlOiBNRVRBX1JFRFVDRVJTLFxuICAgIHVzZUV4aXN0aW5nOiBTVE9SQUdFX1NZTkNfTUVUQV9SRURVQ0VSLFxuICAgIG11bHRpOiB0cnVlLFxuICB9LFxuXTtcbiJdfQ==