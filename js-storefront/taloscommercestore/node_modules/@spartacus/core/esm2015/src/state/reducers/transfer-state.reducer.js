import { isPlatformBrowser, isPlatformServer } from '@angular/common';
import { makeStateKey, } from '@angular/platform-browser';
import { INIT } from '@ngrx/store';
import { deepMerge } from '../../config/utils/deep-merge';
import { StateTransferType } from '../config/state-config';
import { filterKeysByType, getStateSlice } from '../utils/get-state-slice';
export const CX_KEY = makeStateKey('cx-state');
export function getTransferStateReducer(platformId, transferState, config, authStatePersistenceService) {
    var _a, _b;
    if (transferState && ((_b = (_a = config === null || config === void 0 ? void 0 : config.state) === null || _a === void 0 ? void 0 : _a.ssrTransfer) === null || _b === void 0 ? void 0 : _b.keys)) {
        if (isPlatformBrowser(platformId)) {
            return getBrowserTransferStateReducer(transferState, config.state.ssrTransfer.keys, Boolean(authStatePersistenceService === null || authStatePersistenceService === void 0 ? void 0 : authStatePersistenceService.isUserLoggedIn()));
        }
        else if (isPlatformServer(platformId)) {
            return getServerTransferStateReducer(transferState, config.state.ssrTransfer.keys);
        }
    }
    return (reducer) => reducer;
}
export function getServerTransferStateReducer(transferState, keys) {
    const transferStateKeys = filterKeysByType(keys, StateTransferType.TRANSFER_STATE);
    return function (reducer) {
        return function (state, action) {
            const newState = reducer(state, action);
            if (newState) {
                const stateSlice = getStateSlice(transferStateKeys, [], newState);
                transferState.set(CX_KEY, stateSlice);
            }
            return newState;
        };
    };
}
export function getBrowserTransferStateReducer(transferState, keys, isLoggedIn) {
    const transferStateKeys = filterKeysByType(keys, StateTransferType.TRANSFER_STATE);
    return function (reducer) {
        return function (state, action) {
            if (action.type === INIT) {
                if (!state) {
                    state = reducer(state, action);
                }
                if (!isLoggedIn && transferState.hasKey(CX_KEY)) {
                    const cxKey = transferState.get(CX_KEY, {});
                    const transferredStateSlice = getStateSlice(transferStateKeys, [], cxKey);
                    state = deepMerge({}, state, transferredStateSlice);
                }
                return state;
            }
            return reducer(state, action);
        };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmZXItc3RhdGUucmVkdWNlci5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy9QYXRyeWsvRGVza3RvcC9zcGFydGFjdXMvcHJvamVjdHMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9zdGF0ZS9yZWR1Y2Vycy90cmFuc2Zlci1zdGF0ZS5yZWR1Y2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3RFLE9BQU8sRUFDTCxZQUFZLEdBR2IsTUFBTSwyQkFBMkIsQ0FBQztBQUNuQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRW5DLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMxRCxPQUFPLEVBQWUsaUJBQWlCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsYUFBYSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFM0UsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFxQixZQUFZLENBQVMsVUFBVSxDQUFDLENBQUM7QUFFekUsTUFBTSxVQUFVLHVCQUF1QixDQUNyQyxVQUFVLEVBQ1YsYUFBNkIsRUFDN0IsTUFBb0IsRUFDcEIsMkJBQXlEOztJQUV6RCxJQUFJLGFBQWEsaUJBQUksTUFBTSxhQUFOLE1BQU0sdUJBQU4sTUFBTSxDQUFFLEtBQUssMENBQUUsV0FBVywwQ0FBRSxJQUFJLENBQUEsRUFBRTtRQUNyRCxJQUFJLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ2pDLE9BQU8sOEJBQThCLENBQ25DLGFBQWEsRUFDYixNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQzdCLE9BQU8sQ0FBQywyQkFBMkIsYUFBM0IsMkJBQTJCLHVCQUEzQiwyQkFBMkIsQ0FBRSxjQUFjLEdBQUcsQ0FDdkQsQ0FBQztTQUNIO2FBQU0sSUFBSSxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUN2QyxPQUFPLDZCQUE2QixDQUNsQyxhQUFhLEVBQ2IsTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUM5QixDQUFDO1NBQ0g7S0FDRjtJQUVELE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQztBQUM5QixDQUFDO0FBRUQsTUFBTSxVQUFVLDZCQUE2QixDQUMzQyxhQUE0QixFQUM1QixJQUEwQztJQUUxQyxNQUFNLGlCQUFpQixHQUFHLGdCQUFnQixDQUN4QyxJQUFJLEVBQ0osaUJBQWlCLENBQUMsY0FBYyxDQUNqQyxDQUFDO0lBRUYsT0FBTyxVQUFVLE9BQU87UUFDdEIsT0FBTyxVQUFVLEtBQUssRUFBRSxNQUFXO1lBQ2pDLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDeEMsSUFBSSxRQUFRLEVBQUU7Z0JBQ1osTUFBTSxVQUFVLEdBQUcsYUFBYSxDQUFDLGlCQUFpQixFQUFFLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztnQkFDbEUsYUFBYSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7YUFDdkM7WUFFRCxPQUFPLFFBQVEsQ0FBQztRQUNsQixDQUFDLENBQUM7SUFDSixDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLDhCQUE4QixDQUM1QyxhQUE0QixFQUM1QixJQUEwQyxFQUMxQyxVQUFtQjtJQUVuQixNQUFNLGlCQUFpQixHQUFHLGdCQUFnQixDQUN4QyxJQUFJLEVBQ0osaUJBQWlCLENBQUMsY0FBYyxDQUNqQyxDQUFDO0lBRUYsT0FBTyxVQUFVLE9BQU87UUFDdEIsT0FBTyxVQUFVLEtBQUssRUFBRSxNQUFXO1lBQ2pDLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxJQUFJLEVBQUU7Z0JBQ3hCLElBQUksQ0FBQyxLQUFLLEVBQUU7b0JBQ1YsS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7aUJBQ2hDO2dCQUVELElBQUksQ0FBQyxVQUFVLElBQUksYUFBYSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTtvQkFDL0MsTUFBTSxLQUFLLEdBQUcsYUFBYSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7b0JBQzVDLE1BQU0scUJBQXFCLEdBQUcsYUFBYSxDQUN6QyxpQkFBaUIsRUFDakIsRUFBRSxFQUNGLEtBQUssQ0FDTixDQUFDO29CQUVGLEtBQUssR0FBRyxTQUFTLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO2lCQUNyRDtnQkFDRCxPQUFPLEtBQUssQ0FBQzthQUNkO1lBQ0QsT0FBTyxPQUFPLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ2hDLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciwgaXNQbGF0Zm9ybVNlcnZlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge1xuICBtYWtlU3RhdGVLZXksXG4gIFN0YXRlS2V5LFxuICBUcmFuc2ZlclN0YXRlLFxufSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IElOSVQgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBBdXRoU3RhdGVQZXJzaXN0ZW5jZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9hdXRoL3VzZXItYXV0aC9zZXJ2aWNlcy9hdXRoLXN0YXRlLXBlcnNpc3RlbmNlLnNlcnZpY2UnO1xuaW1wb3J0IHsgZGVlcE1lcmdlIH0gZnJvbSAnLi4vLi4vY29uZmlnL3V0aWxzL2RlZXAtbWVyZ2UnO1xuaW1wb3J0IHsgU3RhdGVDb25maWcsIFN0YXRlVHJhbnNmZXJUeXBlIH0gZnJvbSAnLi4vY29uZmlnL3N0YXRlLWNvbmZpZyc7XG5pbXBvcnQgeyBmaWx0ZXJLZXlzQnlUeXBlLCBnZXRTdGF0ZVNsaWNlIH0gZnJvbSAnLi4vdXRpbHMvZ2V0LXN0YXRlLXNsaWNlJztcblxuZXhwb3J0IGNvbnN0IENYX0tFWTogU3RhdGVLZXk8c3RyaW5nPiA9IG1ha2VTdGF0ZUtleTxzdHJpbmc+KCdjeC1zdGF0ZScpO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHJhbnNmZXJTdGF0ZVJlZHVjZXIoXG4gIHBsYXRmb3JtSWQsXG4gIHRyYW5zZmVyU3RhdGU/OiBUcmFuc2ZlclN0YXRlLFxuICBjb25maWc/OiBTdGF0ZUNvbmZpZyxcbiAgYXV0aFN0YXRlUGVyc2lzdGVuY2VTZXJ2aWNlPzogQXV0aFN0YXRlUGVyc2lzdGVuY2VTZXJ2aWNlXG4pIHtcbiAgaWYgKHRyYW5zZmVyU3RhdGUgJiYgY29uZmlnPy5zdGF0ZT8uc3NyVHJhbnNmZXI/LmtleXMpIHtcbiAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIocGxhdGZvcm1JZCkpIHtcbiAgICAgIHJldHVybiBnZXRCcm93c2VyVHJhbnNmZXJTdGF0ZVJlZHVjZXIoXG4gICAgICAgIHRyYW5zZmVyU3RhdGUsXG4gICAgICAgIGNvbmZpZy5zdGF0ZS5zc3JUcmFuc2Zlci5rZXlzLFxuICAgICAgICBCb29sZWFuKGF1dGhTdGF0ZVBlcnNpc3RlbmNlU2VydmljZT8uaXNVc2VyTG9nZ2VkSW4oKSlcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChpc1BsYXRmb3JtU2VydmVyKHBsYXRmb3JtSWQpKSB7XG4gICAgICByZXR1cm4gZ2V0U2VydmVyVHJhbnNmZXJTdGF0ZVJlZHVjZXIoXG4gICAgICAgIHRyYW5zZmVyU3RhdGUsXG4gICAgICAgIGNvbmZpZy5zdGF0ZS5zc3JUcmFuc2Zlci5rZXlzXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAocmVkdWNlcikgPT4gcmVkdWNlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNlcnZlclRyYW5zZmVyU3RhdGVSZWR1Y2VyKFxuICB0cmFuc2ZlclN0YXRlOiBUcmFuc2ZlclN0YXRlLFxuICBrZXlzOiB7IFtrZXk6IHN0cmluZ106IFN0YXRlVHJhbnNmZXJUeXBlIH1cbikge1xuICBjb25zdCB0cmFuc2ZlclN0YXRlS2V5cyA9IGZpbHRlcktleXNCeVR5cGUoXG4gICAga2V5cyxcbiAgICBTdGF0ZVRyYW5zZmVyVHlwZS5UUkFOU0ZFUl9TVEFURVxuICApO1xuXG4gIHJldHVybiBmdW5jdGlvbiAocmVkdWNlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbjogYW55KSB7XG4gICAgICBjb25zdCBuZXdTdGF0ZSA9IHJlZHVjZXIoc3RhdGUsIGFjdGlvbik7XG4gICAgICBpZiAobmV3U3RhdGUpIHtcbiAgICAgICAgY29uc3Qgc3RhdGVTbGljZSA9IGdldFN0YXRlU2xpY2UodHJhbnNmZXJTdGF0ZUtleXMsIFtdLCBuZXdTdGF0ZSk7XG4gICAgICAgIHRyYW5zZmVyU3RhdGUuc2V0KENYX0tFWSwgc3RhdGVTbGljZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QnJvd3NlclRyYW5zZmVyU3RhdGVSZWR1Y2VyKFxuICB0cmFuc2ZlclN0YXRlOiBUcmFuc2ZlclN0YXRlLFxuICBrZXlzOiB7IFtrZXk6IHN0cmluZ106IFN0YXRlVHJhbnNmZXJUeXBlIH0sXG4gIGlzTG9nZ2VkSW46IGJvb2xlYW5cbikge1xuICBjb25zdCB0cmFuc2ZlclN0YXRlS2V5cyA9IGZpbHRlcktleXNCeVR5cGUoXG4gICAga2V5cyxcbiAgICBTdGF0ZVRyYW5zZmVyVHlwZS5UUkFOU0ZFUl9TVEFURVxuICApO1xuXG4gIHJldHVybiBmdW5jdGlvbiAocmVkdWNlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbjogYW55KSB7XG4gICAgICBpZiAoYWN0aW9uLnR5cGUgPT09IElOSVQpIHtcbiAgICAgICAgaWYgKCFzdGF0ZSkge1xuICAgICAgICAgIHN0YXRlID0gcmVkdWNlcihzdGF0ZSwgYWN0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNMb2dnZWRJbiAmJiB0cmFuc2ZlclN0YXRlLmhhc0tleShDWF9LRVkpKSB7XG4gICAgICAgICAgY29uc3QgY3hLZXkgPSB0cmFuc2ZlclN0YXRlLmdldChDWF9LRVksIHt9KTtcbiAgICAgICAgICBjb25zdCB0cmFuc2ZlcnJlZFN0YXRlU2xpY2UgPSBnZXRTdGF0ZVNsaWNlKFxuICAgICAgICAgICAgdHJhbnNmZXJTdGF0ZUtleXMsXG4gICAgICAgICAgICBbXSxcbiAgICAgICAgICAgIGN4S2V5XG4gICAgICAgICAgKTtcblxuICAgICAgICAgIHN0YXRlID0gZGVlcE1lcmdlKHt9LCBzdGF0ZSwgdHJhbnNmZXJyZWRTdGF0ZVNsaWNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVkdWNlcihzdGF0ZSwgYWN0aW9uKTtcbiAgICB9O1xuICB9O1xufVxuIl19