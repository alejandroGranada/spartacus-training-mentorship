import { Injectable, isDevMode, Optional, } from '@angular/core';
import { Subject } from 'rxjs';
import { tap } from 'rxjs/operators';
import { FeatureConfigService } from '../features-config/services/feature-config.service';
import { createFrom } from '../util/create-from';
import { CxEvent } from './cx-event';
import { MergingSubject } from './utils/merging-subject';
import * as i0 from "@angular/core";
import * as i1 from "../features-config/services/feature-config.service";
/**
 * A service to register and observe event sources. Events are driven by event types, which are class signatures
 * for the given event.
 *
 * It is possible to register multiple sources to a single event, even without
 * knowing as multiple decoupled features can attach sources to the same
 * event type.
 */
export class EventService {
    constructor(
    // TODO: #10896 - remove this
    /** @deprecated @since 3.1 - this will be removed in 4.0 */ featureConfigService) {
        this.featureConfigService = featureConfigService;
        /**
         * The various events meta are collected in a map, stored by the event type class
         */
        this.eventsMeta = new Map();
    }
    /**
     * Register an event source for the given event type.
     *
     * CAUTION: To avoid memory leaks, the returned teardown function should be called
     *  when the event source is no longer maintained by its creator
     * (i.e. in `ngOnDestroy` if the event source was registered in the component).
     *
     * @since 3.1 - registers the given `source$` for the parent classes of the given `eventType`.
     *
     * @param eventType the event type
     * @param source$ an observable that represents the source
     *
     * @returns a teardown function which unregisters the given event source
     */
    // TODO: #10896 - change from `AbstractType` to `Type`.
    register(eventType, source$) {
        const eventMeta = this.getEventMeta(eventType);
        if (eventMeta.mergingSubject.has(source$)) {
            if (isDevMode()) {
                console.warn(`EventService: the event source`, source$, `has been already registered for the type`, eventType);
            }
        }
        else {
            eventMeta.mergingSubject.add(source$);
        }
        return () => eventMeta.mergingSubject.remove(source$);
    }
    /**
     * Returns a stream of events for the given event type
     * @param eventTypes event type
     */
    get(eventType) {
        let output$ = this.getEventMeta(eventType).mergingSubject.output$;
        if (isDevMode()) {
            output$ = this.getValidatedEventStream(output$, eventType);
        }
        return output$;
    }
    /**
     * Dispatches an instance of an individual event.
     * If the eventType is provided a new event will be created for that type and with the event data.
     *
     * @param event an event
     * @param eventType (optional) - type of event
     */
    dispatch(event, eventType) {
        if (!eventType) {
            eventType = event.constructor;
        }
        else if (!(event instanceof eventType)) {
            event = createFrom(eventType, event);
        }
        const inputSubject$ = this.getInputSubject(eventType);
        inputSubject$.next(event);
    }
    /**
     * Returns the input subject used to dispatch a single event.
     * The subject is created on demand, when it's needed for the first time.
     * @param eventType type of event
     */
    getInputSubject(eventType) {
        const eventMeta = this.getEventMeta(eventType);
        if (!eventMeta.inputSubject$) {
            eventMeta.inputSubject$ = new Subject();
            this.register(eventType, eventMeta.inputSubject$);
        }
        return eventMeta.inputSubject$;
    }
    /**
     * Returns the event meta object for the given event type
     */
    getEventMeta(eventType) {
        if (!this.eventsMeta.get(eventType)) {
            if (isDevMode()) {
                this.validateEventType(eventType);
            }
            this.createEventMeta(eventType);
        }
        return this.eventsMeta.get(eventType);
    }
    createEventMeta(eventType) {
        var _a;
        const eventMeta = {
            inputSubject$: null,
            mergingSubject: new MergingSubject(),
        };
        this.eventsMeta.set(eventType, eventMeta);
        // TODO: #10896 - remove this if block, and leave its body
        if ((_a = this.featureConfigService) === null || _a === void 0 ? void 0 : _a.isLevel('3.1')) {
            let parentEvent = Object.getPrototypeOf(eventType);
            while (parentEvent !== null &&
                Object.getPrototypeOf(parentEvent) !== Object.getPrototypeOf({})) {
                this.register(parentEvent, eventMeta.mergingSubject.output$);
                parentEvent = Object.getPrototypeOf(parentEvent);
            }
        }
    }
    /**
     * Checks if the event type is a valid type (is a class with constructor).
     *
     * Should be used only in dev mode.
     */
    validateEventType(eventType) {
        var _a;
        if (!(eventType === null || eventType === void 0 ? void 0 : eventType.constructor)) {
            throw new Error(`EventService:  ${eventType} is not a valid event type. Please provide a class reference.`);
        }
        // TODO: #10896 - remove this if block and leave its body
        if ((_a = this.featureConfigService) === null || _a === void 0 ? void 0 : _a.isLevel('3.1')) {
            this.validateCxEvent(eventType);
        }
    }
    /**
     * Validates if the given type (or its prototype chain) extends from the CxEvent.
     *
     * Should be used only in the dev mode.
     */
    validateCxEvent(eventType) {
        let parentType = eventType;
        while (parentType !== null &&
            Object.getPrototypeOf(parentType) !== Object.getPrototypeOf({})) {
            if (parentType.type === CxEvent.type) {
                return;
            }
            parentType = Object.getPrototypeOf(parentType);
        }
        console.warn(`The ${eventType.name} (or one of its parent classes) does not inherit from the ${CxEvent.type}`);
    }
    /**
     * Returns the given event source with runtime validation whether the emitted values are instances of given event type.
     *
     * Should be used only in dev mode.
     */
    getValidatedEventStream(source$, eventType) {
        return source$.pipe(tap((event) => {
            if (!(event instanceof eventType)) {
                console.warn(`EventService: The stream`, source$, `emitted the event`, event, `that is not an instance of the declared type`, eventType.name);
            }
        }));
    }
}
EventService.ɵprov = i0.ɵɵdefineInjectable({ factory: function EventService_Factory() { return new EventService(i0.ɵɵinject(i1.FeatureConfigService, 8)); }, token: EventService, providedIn: "root" });
EventService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
EventService.ctorParameters = () => [
    { type: FeatureConfigService, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,