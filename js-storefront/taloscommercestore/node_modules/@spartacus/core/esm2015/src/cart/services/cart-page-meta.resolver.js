import { Injectable, Optional } from '@angular/core';
import { of } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { CmsService } from '../../cms/facade/cms.service';
import { PageRobotsMeta } from '../../cms/model/page.model';
import { BasePageMetaResolver } from '../../cms/page/base-page-meta.resolver';
import { PageMetaResolver } from '../../cms/page/page-meta.resolver';
import { PageType } from '../../model/cms.model';
import * as i0 from "@angular/core";
import * as i1 from "../../cms/facade/cms.service";
import * as i2 from "../../cms/page/base-page-meta.resolver";
/**
 * Resolves the page metadata for the Cart page (Using the `PageType.CONTENT_PAGE`
 * and the `CartPageTemplate`). If the cart page matches this template, the more
 * generic `ContentPageMetaResolver` is overridden by this resolver.
 *
 * The page title and robots are resolved in this implementation only.
 *
 * @deprecated since 3.1, in future versions we'll drop this service as the logic
 * is no longer specific since we introduce backend driven robots.
 */
// TODO(#10467): Remove implementation
export class CartPageMetaResolver extends PageMetaResolver {
    constructor(cms, basePageMetaResolver) {
        super();
        this.cms = cms;
        this.basePageMetaResolver = basePageMetaResolver;
        // TODO(#10467): remove the cms property as it's no longer needed when we use the `BasePageMetaResolver`
        /**
         * @deprecated since 3.1, we'll use the BasePageMetaResolver to resolve the page title
         */
        this.cms$ = this.cms
            .getCurrentPage()
            .pipe(filter((page) => !!page));
        this.pageType = PageType.CONTENT_PAGE;
        this.pageTemplate = 'CartPageTemplate';
    }
    resolveTitle() {
        // TODO(#10467): resolve the title from the `BasePageMetaResolver.resolveTitle()` only
        return this.basePageMetaResolver
            ? this.basePageMetaResolver.resolveTitle()
            : this.cms$.pipe(map((p) => p.title));
    }
    /**
     * @Override Returns robots for the cart pages, which default to NOINDEX/NOFOLLOW.
     */
    // TODO(#10467): resolve robots from `BasePageMetaResolver` instead
    resolveRobots() {
        return of([PageRobotsMeta.NOFOLLOW, PageRobotsMeta.NOINDEX]);
    }
}
CartPageMetaResolver.ɵprov = i0.ɵɵdefineInjectable({ factory: function CartPageMetaResolver_Factory() { return new CartPageMetaResolver(i0.ɵɵinject(i1.CmsService), i0.ɵɵinject(i2.BasePageMetaResolver)); }, token: CartPageMetaResolver, providedIn: "root" });
CartPageMetaResolver.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
CartPageMetaResolver.ctorParameters = () => [
    { type: CmsService },
    { type: BasePageMetaResolver, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC1wYWdlLW1ldGEucmVzb2x2ZXIuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvUGF0cnlrL0Rlc2t0b3Avc3BhcnRhY3VzL3Byb2plY3RzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY2FydC9zZXJ2aWNlcy9jYXJ0LXBhZ2UtbWV0YS5yZXNvbHZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzFELE9BQU8sRUFBUSxjQUFjLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUM5RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUtyRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7Ozs7QUFFakQ7Ozs7Ozs7OztHQVNHO0FBQ0gsc0NBQXNDO0FBSXRDLE1BQU0sT0FBTyxvQkFDWCxTQUFRLGdCQUFnQjtJQVV4QixZQUNZLEdBQWUsRUFDSCxvQkFBMkM7UUFFakUsS0FBSyxFQUFFLENBQUM7UUFIRSxRQUFHLEdBQUgsR0FBRyxDQUFZO1FBQ0gseUJBQW9CLEdBQXBCLG9CQUFvQixDQUF1QjtRQU9uRSx3R0FBd0c7UUFDeEc7O1dBRUc7UUFDTyxTQUFJLEdBQXFCLElBQUksQ0FBQyxHQUFHO2FBQ3hDLGNBQWMsRUFBRTthQUNoQixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQVZoQyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUM7UUFDdEMsSUFBSSxDQUFDLFlBQVksR0FBRyxrQkFBa0IsQ0FBQztJQUN6QyxDQUFDO0lBVUQsWUFBWTtRQUNWLHNGQUFzRjtRQUN0RixPQUFPLElBQUksQ0FBQyxvQkFBb0I7WUFDOUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLEVBQUU7WUFDMUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsbUVBQW1FO0lBQ25FLGFBQWE7UUFDWCxPQUFPLEVBQUUsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDL0QsQ0FBQzs7OztZQTVDRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7OztZQXZCUSxVQUFVO1lBRVYsb0JBQW9CLHVCQW1DeEIsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBDbXNTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vY21zL2ZhY2FkZS9jbXMuc2VydmljZSc7XG5pbXBvcnQgeyBQYWdlLCBQYWdlUm9ib3RzTWV0YSB9IGZyb20gJy4uLy4uL2Ntcy9tb2RlbC9wYWdlLm1vZGVsJztcbmltcG9ydCB7IEJhc2VQYWdlTWV0YVJlc29sdmVyIH0gZnJvbSAnLi4vLi4vY21zL3BhZ2UvYmFzZS1wYWdlLW1ldGEucmVzb2x2ZXInO1xuaW1wb3J0IHsgUGFnZU1ldGFSZXNvbHZlciB9IGZyb20gJy4uLy4uL2Ntcy9wYWdlL3BhZ2UtbWV0YS5yZXNvbHZlcic7XG5pbXBvcnQge1xuICBQYWdlUm9ib3RzUmVzb2x2ZXIsXG4gIFBhZ2VUaXRsZVJlc29sdmVyLFxufSBmcm9tICcuLi8uLi9jbXMvcGFnZS9wYWdlLnJlc29sdmVycyc7XG5pbXBvcnQgeyBQYWdlVHlwZSB9IGZyb20gJy4uLy4uL21vZGVsL2Ntcy5tb2RlbCc7XG5cbi8qKlxuICogUmVzb2x2ZXMgdGhlIHBhZ2UgbWV0YWRhdGEgZm9yIHRoZSBDYXJ0IHBhZ2UgKFVzaW5nIHRoZSBgUGFnZVR5cGUuQ09OVEVOVF9QQUdFYFxuICogYW5kIHRoZSBgQ2FydFBhZ2VUZW1wbGF0ZWApLiBJZiB0aGUgY2FydCBwYWdlIG1hdGNoZXMgdGhpcyB0ZW1wbGF0ZSwgdGhlIG1vcmVcbiAqIGdlbmVyaWMgYENvbnRlbnRQYWdlTWV0YVJlc29sdmVyYCBpcyBvdmVycmlkZGVuIGJ5IHRoaXMgcmVzb2x2ZXIuXG4gKlxuICogVGhlIHBhZ2UgdGl0bGUgYW5kIHJvYm90cyBhcmUgcmVzb2x2ZWQgaW4gdGhpcyBpbXBsZW1lbnRhdGlvbiBvbmx5LlxuICpcbiAqIEBkZXByZWNhdGVkIHNpbmNlIDMuMSwgaW4gZnV0dXJlIHZlcnNpb25zIHdlJ2xsIGRyb3AgdGhpcyBzZXJ2aWNlIGFzIHRoZSBsb2dpY1xuICogaXMgbm8gbG9uZ2VyIHNwZWNpZmljIHNpbmNlIHdlIGludHJvZHVjZSBiYWNrZW5kIGRyaXZlbiByb2JvdHMuXG4gKi9cbi8vIFRPRE8oIzEwNDY3KTogUmVtb3ZlIGltcGxlbWVudGF0aW9uXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgQ2FydFBhZ2VNZXRhUmVzb2x2ZXJcbiAgZXh0ZW5kcyBQYWdlTWV0YVJlc29sdmVyXG4gIGltcGxlbWVudHMgUGFnZVRpdGxlUmVzb2x2ZXIsIFBhZ2VSb2JvdHNSZXNvbHZlciB7XG4gIC8vIFRPRE8oIzEwNDY3KTogUmVtb3ZlIGRlcHJlY2F0ZWQgY29uc3RydWN0b3JzXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5pZmllZC1zaWduYXR1cmVzXG4gIGNvbnN0cnVjdG9yKGNtczogQ21zU2VydmljZSwgYmFzZVBhZ2VNZXRhUmVzb2x2ZXI/OiBCYXNlUGFnZU1ldGFSZXNvbHZlcik7XG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBzaW5jZSAzLjEsIHdlJ2xsIHVzZSB0aGUgQmFzZVBhZ2VNZXRhUmVzb2x2ZXIgaW4gZnV0dXJlIHZlcnNpb25zIGFuZFxuICAgKiBkcm9wIHRoZSBDbXNTZXJ2aWNlIGZyb20gdGhlIGNvbnN0cnVjdG9yIGFzIGl0IHdpbGwgbm8gbG9uZ2VyIGJlIHVzZWQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihjbXM6IENtc1NlcnZpY2UpO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgY21zOiBDbXNTZXJ2aWNlLFxuICAgIEBPcHRpb25hbCgpIHByb3RlY3RlZCBiYXNlUGFnZU1ldGFSZXNvbHZlcj86IEJhc2VQYWdlTWV0YVJlc29sdmVyXG4gICkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5wYWdlVHlwZSA9IFBhZ2VUeXBlLkNPTlRFTlRfUEFHRTtcbiAgICB0aGlzLnBhZ2VUZW1wbGF0ZSA9ICdDYXJ0UGFnZVRlbXBsYXRlJztcbiAgfVxuXG4gIC8vIFRPRE8oIzEwNDY3KTogcmVtb3ZlIHRoZSBjbXMgcHJvcGVydHkgYXMgaXQncyBubyBsb25nZXIgbmVlZGVkIHdoZW4gd2UgdXNlIHRoZSBgQmFzZVBhZ2VNZXRhUmVzb2x2ZXJgXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBzaW5jZSAzLjEsIHdlJ2xsIHVzZSB0aGUgQmFzZVBhZ2VNZXRhUmVzb2x2ZXIgdG8gcmVzb2x2ZSB0aGUgcGFnZSB0aXRsZVxuICAgKi9cbiAgcHJvdGVjdGVkIGNtcyQ6IE9ic2VydmFibGU8UGFnZT4gPSB0aGlzLmNtc1xuICAgIC5nZXRDdXJyZW50UGFnZSgpXG4gICAgLnBpcGUoZmlsdGVyKChwYWdlKSA9PiAhIXBhZ2UpKTtcblxuICByZXNvbHZlVGl0bGUoKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICAvLyBUT0RPKCMxMDQ2Nyk6IHJlc29sdmUgdGhlIHRpdGxlIGZyb20gdGhlIGBCYXNlUGFnZU1ldGFSZXNvbHZlci5yZXNvbHZlVGl0bGUoKWAgb25seVxuICAgIHJldHVybiB0aGlzLmJhc2VQYWdlTWV0YVJlc29sdmVyXG4gICAgICA/IHRoaXMuYmFzZVBhZ2VNZXRhUmVzb2x2ZXIucmVzb2x2ZVRpdGxlKClcbiAgICAgIDogdGhpcy5jbXMkLnBpcGUobWFwKChwKSA9PiBwLnRpdGxlKSk7XG4gIH1cblxuICAvKipcbiAgICogQE92ZXJyaWRlIFJldHVybnMgcm9ib3RzIGZvciB0aGUgY2FydCBwYWdlcywgd2hpY2ggZGVmYXVsdCB0byBOT0lOREVYL05PRk9MTE9XLlxuICAgKi9cbiAgLy8gVE9ETygjMTA0NjcpOiByZXNvbHZlIHJvYm90cyBmcm9tIGBCYXNlUGFnZU1ldGFSZXNvbHZlcmAgaW5zdGVhZFxuICByZXNvbHZlUm9ib3RzKCk6IE9ic2VydmFibGU8UGFnZVJvYm90c01ldGFbXT4ge1xuICAgIHJldHVybiBvZihbUGFnZVJvYm90c01ldGEuTk9GT0xMT1csIFBhZ2VSb2JvdHNNZXRhLk5PSU5ERVhdKTtcbiAgfVxufVxuIl19