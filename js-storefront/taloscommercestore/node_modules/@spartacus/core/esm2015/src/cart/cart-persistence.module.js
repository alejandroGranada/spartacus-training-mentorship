import { APP_INITIALIZER, NgModule } from '@angular/core';
import { META_REDUCERS } from '@ngrx/store';
import { ConfigInitializerService } from '../config/config-initializer/config-initializer.service';
import { MultiCartStatePersistenceService } from './services/multi-cart-state-persistence.service';
import { activeCartInitialState } from './store/reducers/multi-cart.reducer';
export function cartStatePersistenceFactory(cartStatePersistenceService, configInit) {
    const result = () => configInit.getStableConfig('context').then(() => {
        cartStatePersistenceService.initSync();
    });
    return result;
}
/**
 * Before `MultiCartStatePersistenceService` restores the active cart id `ActiveCartService`
 * will use `current` cart instead of the one saved in browser. This meta reducer
 * sets the value on store initialization to null cart which holds active cart loading
 * until the data from storage is restored.
 */
export function uninitializeActiveCartMetaReducerFactory() {
    const metaReducer = (reducer) => (state, action) => {
        const newState = Object.assign({}, state);
        if (action.type === '@ngrx/store/init') {
            newState.cart = Object.assign(Object.assign({}, newState.cart), { active: activeCartInitialState });
        }
        return reducer(newState, action);
    };
    return metaReducer;
}
/**
 * Complimentary module for cart to store cart id in browser storage.
 * This makes it possible to work on the same anonymous cart even after page refresh.
 */
export class CartPersistenceModule {
    static forRoot() {
        return {
            ngModule: CartPersistenceModule,
            providers: [
                {
                    provide: APP_INITIALIZER,
                    useFactory: cartStatePersistenceFactory,
                    deps: [MultiCartStatePersistenceService, ConfigInitializerService],
                    multi: true,
                },
                {
                    provide: META_REDUCERS,
                    useFactory: uninitializeActiveCartMetaReducerFactory,
                    multi: true,
                },
            ],
        };
    }
}
CartPersistenceModule.decorators = [
    { type: NgModule }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC1wZXJzaXN0ZW5jZS5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvUGF0cnlrL0Rlc2t0b3Avc3BhcnRhY3VzL3Byb2plY3RzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY2FydC9jYXJ0LXBlcnNpc3RlbmNlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0UsT0FBTyxFQUE4QixhQUFhLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDeEUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0seURBQXlELENBQUM7QUFDbkcsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0saURBQWlELENBQUM7QUFDbkcsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFFN0UsTUFBTSxVQUFVLDJCQUEyQixDQUN6QywyQkFBNkQsRUFDN0QsVUFBb0M7SUFFcEMsTUFBTSxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQ2xCLFVBQVUsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUM5QywyQkFBMkIsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN6QyxDQUFDLENBQUMsQ0FBQztJQUNMLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSx3Q0FBd0M7SUFDdEQsTUFBTSxXQUFXLEdBQUcsQ0FBQyxPQUEyQixFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUNyRSxNQUFNLFFBQVEscUJBQVEsS0FBSyxDQUFFLENBQUM7UUFDOUIsSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLGtCQUFrQixFQUFFO1lBQ3RDLFFBQVEsQ0FBQyxJQUFJLG1DQUNSLFFBQVEsQ0FBQyxJQUFJLEdBQ2IsRUFBRSxNQUFNLEVBQUUsc0JBQXNCLEVBQUUsQ0FDdEMsQ0FBQztTQUNIO1FBQ0QsT0FBTyxPQUFPLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ25DLENBQUMsQ0FBQztJQUNGLE9BQU8sV0FBVyxDQUFDO0FBQ3JCLENBQUM7QUFFRDs7O0dBR0c7QUFFSCxNQUFNLE9BQU8scUJBQXFCO0lBQ2hDLE1BQU0sQ0FBQyxPQUFPO1FBQ1osT0FBTztZQUNMLFFBQVEsRUFBRSxxQkFBcUI7WUFDL0IsU0FBUyxFQUFFO2dCQUNUO29CQUNFLE9BQU8sRUFBRSxlQUFlO29CQUN4QixVQUFVLEVBQUUsMkJBQTJCO29CQUN2QyxJQUFJLEVBQUUsQ0FBQyxnQ0FBZ0MsRUFBRSx3QkFBd0IsQ0FBQztvQkFDbEUsS0FBSyxFQUFFLElBQUk7aUJBQ1o7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLGFBQWE7b0JBQ3RCLFVBQVUsRUFBRSx3Q0FBd0M7b0JBQ3BELEtBQUssRUFBRSxJQUFJO2lCQUNaO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQzs7O1lBbkJGLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBUFBfSU5JVElBTElaRVIsIE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3Rpb25SZWR1Y2VyLCBNZXRhUmVkdWNlciwgTUVUQV9SRURVQ0VSUyB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IENvbmZpZ0luaXRpYWxpemVyU2VydmljZSB9IGZyb20gJy4uL2NvbmZpZy9jb25maWctaW5pdGlhbGl6ZXIvY29uZmlnLWluaXRpYWxpemVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgTXVsdGlDYXJ0U3RhdGVQZXJzaXN0ZW5jZVNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL211bHRpLWNhcnQtc3RhdGUtcGVyc2lzdGVuY2Uuc2VydmljZSc7XG5pbXBvcnQgeyBhY3RpdmVDYXJ0SW5pdGlhbFN0YXRlIH0gZnJvbSAnLi9zdG9yZS9yZWR1Y2Vycy9tdWx0aS1jYXJ0LnJlZHVjZXInO1xuXG5leHBvcnQgZnVuY3Rpb24gY2FydFN0YXRlUGVyc2lzdGVuY2VGYWN0b3J5KFxuICBjYXJ0U3RhdGVQZXJzaXN0ZW5jZVNlcnZpY2U6IE11bHRpQ2FydFN0YXRlUGVyc2lzdGVuY2VTZXJ2aWNlLFxuICBjb25maWdJbml0OiBDb25maWdJbml0aWFsaXplclNlcnZpY2Vcbikge1xuICBjb25zdCByZXN1bHQgPSAoKSA9PlxuICAgIGNvbmZpZ0luaXQuZ2V0U3RhYmxlQ29uZmlnKCdjb250ZXh0JykudGhlbigoKSA9PiB7XG4gICAgICBjYXJ0U3RhdGVQZXJzaXN0ZW5jZVNlcnZpY2UuaW5pdFN5bmMoKTtcbiAgICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBCZWZvcmUgYE11bHRpQ2FydFN0YXRlUGVyc2lzdGVuY2VTZXJ2aWNlYCByZXN0b3JlcyB0aGUgYWN0aXZlIGNhcnQgaWQgYEFjdGl2ZUNhcnRTZXJ2aWNlYFxuICogd2lsbCB1c2UgYGN1cnJlbnRgIGNhcnQgaW5zdGVhZCBvZiB0aGUgb25lIHNhdmVkIGluIGJyb3dzZXIuIFRoaXMgbWV0YSByZWR1Y2VyXG4gKiBzZXRzIHRoZSB2YWx1ZSBvbiBzdG9yZSBpbml0aWFsaXphdGlvbiB0byBudWxsIGNhcnQgd2hpY2ggaG9sZHMgYWN0aXZlIGNhcnQgbG9hZGluZ1xuICogdW50aWwgdGhlIGRhdGEgZnJvbSBzdG9yYWdlIGlzIHJlc3RvcmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdW5pbml0aWFsaXplQWN0aXZlQ2FydE1ldGFSZWR1Y2VyRmFjdG9yeSgpOiBNZXRhUmVkdWNlcjxhbnk+IHtcbiAgY29uc3QgbWV0YVJlZHVjZXIgPSAocmVkdWNlcjogQWN0aW9uUmVkdWNlcjxhbnk+KSA9PiAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGNvbnN0IG5ld1N0YXRlID0geyAuLi5zdGF0ZSB9O1xuICAgIGlmIChhY3Rpb24udHlwZSA9PT0gJ0BuZ3J4L3N0b3JlL2luaXQnKSB7XG4gICAgICBuZXdTdGF0ZS5jYXJ0ID0ge1xuICAgICAgICAuLi5uZXdTdGF0ZS5jYXJ0LFxuICAgICAgICAuLi57IGFjdGl2ZTogYWN0aXZlQ2FydEluaXRpYWxTdGF0ZSB9LFxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHJlZHVjZXIobmV3U3RhdGUsIGFjdGlvbik7XG4gIH07XG4gIHJldHVybiBtZXRhUmVkdWNlcjtcbn1cblxuLyoqXG4gKiBDb21wbGltZW50YXJ5IG1vZHVsZSBmb3IgY2FydCB0byBzdG9yZSBjYXJ0IGlkIGluIGJyb3dzZXIgc3RvcmFnZS5cbiAqIFRoaXMgbWFrZXMgaXQgcG9zc2libGUgdG8gd29yayBvbiB0aGUgc2FtZSBhbm9ueW1vdXMgY2FydCBldmVuIGFmdGVyIHBhZ2UgcmVmcmVzaC5cbiAqL1xuQE5nTW9kdWxlKClcbmV4cG9ydCBjbGFzcyBDYXJ0UGVyc2lzdGVuY2VNb2R1bGUge1xuICBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPENhcnRQZXJzaXN0ZW5jZU1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogQ2FydFBlcnNpc3RlbmNlTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBBUFBfSU5JVElBTElaRVIsXG4gICAgICAgICAgdXNlRmFjdG9yeTogY2FydFN0YXRlUGVyc2lzdGVuY2VGYWN0b3J5LFxuICAgICAgICAgIGRlcHM6IFtNdWx0aUNhcnRTdGF0ZVBlcnNpc3RlbmNlU2VydmljZSwgQ29uZmlnSW5pdGlhbGl6ZXJTZXJ2aWNlXSxcbiAgICAgICAgICBtdWx0aTogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IE1FVEFfUkVEVUNFUlMsXG4gICAgICAgICAgdXNlRmFjdG9yeTogdW5pbml0aWFsaXplQWN0aXZlQ2FydE1ldGFSZWR1Y2VyRmFjdG9yeSxcbiAgICAgICAgICBtdWx0aTogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfTtcbiAgfVxufVxuIl19