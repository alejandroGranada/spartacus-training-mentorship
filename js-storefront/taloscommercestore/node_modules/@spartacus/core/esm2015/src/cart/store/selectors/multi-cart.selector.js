import { createFeatureSelector, createSelector, } from '@ngrx/store';
import { entityValueSelector } from '../../../state/utils/entity-loader/entity-loader.selectors';
import { entityHasPendingProcessesSelector, entityIsStableSelector, entityProcessesLoaderStateSelector, } from '../../../state/utils/entity-processes-loader/entity-processes-loader.selectors';
import { MULTI_CART_FEATURE, } from '../multi-cart-state';
export const getMultiCartState = createFeatureSelector(MULTI_CART_FEATURE);
const ɵ0 = (state) => state.carts;
export const getMultiCartEntities = createSelector(getMultiCartState, ɵ0);
export const getCartEntitySelectorFactory = (cartId) => {
    return createSelector(getMultiCartEntities, (state) => entityProcessesLoaderStateSelector(state, cartId));
};
export const getCartSelectorFactory = (cartId) => {
    return createSelector(getMultiCartEntities, (state) => entityValueSelector(state, cartId));
};
export const getCartIsStableSelectorFactory = (cartId) => {
    return createSelector(getMultiCartEntities, (state) => entityIsStableSelector(state, cartId));
};
export const getCartHasPendingProcessesSelectorFactory = (cartId) => {
    return createSelector(getMultiCartEntities, (state) => entityHasPendingProcessesSelector(state, cartId));
};
export const getCartEntriesSelectorFactory = (cartId) => {
    return createSelector(getCartSelectorFactory(cartId), (state) => {
        return state && state.entries ? state.entries : [];
    });
};
export const getCartEntrySelectorFactory = (cartId, productCode) => {
    return createSelector(getCartEntriesSelectorFactory(cartId), (state) => {
        return state
            ? state.find((entry) => entry.product.code === productCode)
            : undefined;
    });
};
const ɵ1 = (state) => state.active;
export const getActiveCartId = createSelector(getMultiCartState, ɵ1);
const ɵ2 = (state) => state.wishList;
export const getWishListId = createSelector(getMultiCartState, ɵ2);
const ɵ3 = (state) => Object.keys(state.entities).map((key) => entityValueSelector(state, key));
export const getCartsSelectorFactory = createSelector(getMultiCartEntities, ɵ3);
export { ɵ0, ɵ1, ɵ2, ɵ3 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktY2FydC5zZWxlY3Rvci5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy9QYXRyeWsvRGVza3RvcC9zcGFydGFjdXMvcHJvamVjdHMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9jYXJ0L3N0b3JlL3NlbGVjdG9ycy9tdWx0aS1jYXJ0LnNlbGVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxxQkFBcUIsRUFDckIsY0FBYyxHQUVmLE1BQU0sYUFBYSxDQUFDO0FBR3JCLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDREQUE0RCxDQUFDO0FBRWpHLE9BQU8sRUFDTCxpQ0FBaUMsRUFDakMsc0JBQXNCLEVBQ3RCLGtDQUFrQyxHQUNuQyxNQUFNLGdGQUFnRixDQUFDO0FBRXhGLE9BQU8sRUFFTCxrQkFBa0IsR0FFbkIsTUFBTSxxQkFBcUIsQ0FBQztBQUU3QixNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FHMUIscUJBQXFCLENBQWlCLGtCQUFrQixDQUFDLENBQUM7V0FLeEIsQ0FBQyxLQUFxQixFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSztBQUg1RSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FHN0IsY0FBYyxDQUFDLGlCQUFpQixLQUF5QyxDQUFDO0FBRTlFLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLENBQzFDLE1BQWMsRUFDb0QsRUFBRTtJQUNwRSxPQUFPLGNBQWMsQ0FDbkIsb0JBQW9CLEVBQ3BCLENBQUMsS0FBdUMsRUFBRSxFQUFFLENBQzFDLGtDQUFrQyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FDcEQsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLENBQ3BDLE1BQWMsRUFDOEIsRUFBRTtJQUM5QyxPQUFPLGNBQWMsQ0FDbkIsb0JBQW9CLEVBQ3BCLENBQUMsS0FBdUMsRUFBRSxFQUFFLENBQzFDLG1CQUFtQixDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FDckMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFHLENBQzVDLE1BQWMsRUFDaUMsRUFBRTtJQUNqRCxPQUFPLGNBQWMsQ0FDbkIsb0JBQW9CLEVBQ3BCLENBQUMsS0FBdUMsRUFBRSxFQUFFLENBQzFDLHNCQUFzQixDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FDeEMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHlDQUF5QyxHQUFHLENBQ3ZELE1BQWMsRUFDaUMsRUFBRTtJQUNqRCxPQUFPLGNBQWMsQ0FDbkIsb0JBQW9CLEVBQ3BCLENBQUMsS0FBdUMsRUFBRSxFQUFFLENBQzFDLGlDQUFpQyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FDbkQsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLDZCQUE2QixHQUFHLENBQzNDLE1BQWMsRUFDc0MsRUFBRTtJQUN0RCxPQUFPLGNBQWMsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQVcsRUFBRSxFQUFFO1FBQ3BFLE9BQU8sS0FBSyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNyRCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLDJCQUEyQixHQUFHLENBQ3pDLE1BQWMsRUFDZCxXQUFtQixFQUMrQixFQUFFO0lBQ3BELE9BQU8sY0FBYyxDQUNuQiw2QkFBNkIsQ0FBQyxNQUFNLENBQUMsRUFDckMsQ0FBQyxLQUFtQixFQUFFLEVBQUU7UUFDdEIsT0FBTyxLQUFLO1lBQ1YsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLFdBQVcsQ0FBQztZQUMzRCxDQUFDLENBQUMsU0FBUyxDQUFDO0lBQ2hCLENBQUMsQ0FDRixDQUFDO0FBQ0osQ0FBQyxDQUFDO1dBS29DLENBQUMsS0FBcUIsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU07QUFIN0UsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUd4QixjQUFjLENBQUMsaUJBQWlCLEtBQTBDLENBQUM7V0FPN0UsQ0FBQyxLQUFxQixFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUTtBQUwzQyxNQUFNLENBQUMsTUFBTSxhQUFhLEdBR3RCLGNBQWMsQ0FDaEIsaUJBQWlCLEtBRWxCLENBQUM7V0FPQSxDQUFDLEtBQXVDLEVBQUUsRUFBRSxDQUMxQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztBQU43RSxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FHaEMsY0FBYyxDQUNoQixvQkFBb0IsS0FHckIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGNyZWF0ZUZlYXR1cmVTZWxlY3RvcixcbiAgY3JlYXRlU2VsZWN0b3IsXG4gIE1lbW9pemVkU2VsZWN0b3IsXG59IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IENhcnQgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9jYXJ0Lm1vZGVsJztcbmltcG9ydCB7IE9yZGVyRW50cnkgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9vcmRlci5tb2RlbCc7XG5pbXBvcnQgeyBlbnRpdHlWYWx1ZVNlbGVjdG9yIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvZW50aXR5LWxvYWRlci9lbnRpdHktbG9hZGVyLnNlbGVjdG9ycyc7XG5pbXBvcnQgeyBFbnRpdHlQcm9jZXNzZXNMb2FkZXJTdGF0ZSB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2VudGl0eS1wcm9jZXNzZXMtbG9hZGVyL2VudGl0eS1wcm9jZXNzZXMtbG9hZGVyLXN0YXRlJztcbmltcG9ydCB7XG4gIGVudGl0eUhhc1BlbmRpbmdQcm9jZXNzZXNTZWxlY3RvcixcbiAgZW50aXR5SXNTdGFibGVTZWxlY3RvcixcbiAgZW50aXR5UHJvY2Vzc2VzTG9hZGVyU3RhdGVTZWxlY3Rvcixcbn0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvZW50aXR5LXByb2Nlc3Nlcy1sb2FkZXIvZW50aXR5LXByb2Nlc3Nlcy1sb2FkZXIuc2VsZWN0b3JzJztcbmltcG9ydCB7IFByb2Nlc3Nlc0xvYWRlclN0YXRlIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvcHJvY2Vzc2VzLWxvYWRlci9wcm9jZXNzZXMtbG9hZGVyLXN0YXRlJztcbmltcG9ydCB7XG4gIE11bHRpQ2FydFN0YXRlLFxuICBNVUxUSV9DQVJUX0ZFQVRVUkUsXG4gIFN0YXRlV2l0aE11bHRpQ2FydCxcbn0gZnJvbSAnLi4vbXVsdGktY2FydC1zdGF0ZSc7XG5cbmV4cG9ydCBjb25zdCBnZXRNdWx0aUNhcnRTdGF0ZTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoTXVsdGlDYXJ0LFxuICBNdWx0aUNhcnRTdGF0ZVxuPiA9IGNyZWF0ZUZlYXR1cmVTZWxlY3RvcjxNdWx0aUNhcnRTdGF0ZT4oTVVMVElfQ0FSVF9GRUFUVVJFKTtcblxuZXhwb3J0IGNvbnN0IGdldE11bHRpQ2FydEVudGl0aWVzOiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhNdWx0aUNhcnQsXG4gIEVudGl0eVByb2Nlc3Nlc0xvYWRlclN0YXRlPENhcnQ+XG4+ID0gY3JlYXRlU2VsZWN0b3IoZ2V0TXVsdGlDYXJ0U3RhdGUsIChzdGF0ZTogTXVsdGlDYXJ0U3RhdGUpID0+IHN0YXRlLmNhcnRzKTtcblxuZXhwb3J0IGNvbnN0IGdldENhcnRFbnRpdHlTZWxlY3RvckZhY3RvcnkgPSAoXG4gIGNhcnRJZDogc3RyaW5nXG4pOiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aE11bHRpQ2FydCwgUHJvY2Vzc2VzTG9hZGVyU3RhdGU8Q2FydD4+ID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKFxuICAgIGdldE11bHRpQ2FydEVudGl0aWVzLFxuICAgIChzdGF0ZTogRW50aXR5UHJvY2Vzc2VzTG9hZGVyU3RhdGU8Q2FydD4pID0+XG4gICAgICBlbnRpdHlQcm9jZXNzZXNMb2FkZXJTdGF0ZVNlbGVjdG9yKHN0YXRlLCBjYXJ0SWQpXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0Q2FydFNlbGVjdG9yRmFjdG9yeSA9IChcbiAgY2FydElkOiBzdHJpbmdcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoTXVsdGlDYXJ0LCBDYXJ0PiA9PiB7XG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihcbiAgICBnZXRNdWx0aUNhcnRFbnRpdGllcyxcbiAgICAoc3RhdGU6IEVudGl0eVByb2Nlc3Nlc0xvYWRlclN0YXRlPENhcnQ+KSA9PlxuICAgICAgZW50aXR5VmFsdWVTZWxlY3RvcihzdGF0ZSwgY2FydElkKVxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldENhcnRJc1N0YWJsZVNlbGVjdG9yRmFjdG9yeSA9IChcbiAgY2FydElkOiBzdHJpbmdcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoTXVsdGlDYXJ0LCBib29sZWFuPiA9PiB7XG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihcbiAgICBnZXRNdWx0aUNhcnRFbnRpdGllcyxcbiAgICAoc3RhdGU6IEVudGl0eVByb2Nlc3Nlc0xvYWRlclN0YXRlPENhcnQ+KSA9PlxuICAgICAgZW50aXR5SXNTdGFibGVTZWxlY3RvcihzdGF0ZSwgY2FydElkKVxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldENhcnRIYXNQZW5kaW5nUHJvY2Vzc2VzU2VsZWN0b3JGYWN0b3J5ID0gKFxuICBjYXJ0SWQ6IHN0cmluZ1xuKTogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhNdWx0aUNhcnQsIGJvb2xlYW4+ID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKFxuICAgIGdldE11bHRpQ2FydEVudGl0aWVzLFxuICAgIChzdGF0ZTogRW50aXR5UHJvY2Vzc2VzTG9hZGVyU3RhdGU8Q2FydD4pID0+XG4gICAgICBlbnRpdHlIYXNQZW5kaW5nUHJvY2Vzc2VzU2VsZWN0b3Ioc3RhdGUsIGNhcnRJZClcbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRDYXJ0RW50cmllc1NlbGVjdG9yRmFjdG9yeSA9IChcbiAgY2FydElkOiBzdHJpbmdcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoTXVsdGlDYXJ0LCBPcmRlckVudHJ5W10+ID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yKGdldENhcnRTZWxlY3RvckZhY3RvcnkoY2FydElkKSwgKHN0YXRlOiBDYXJ0KSA9PiB7XG4gICAgcmV0dXJuIHN0YXRlICYmIHN0YXRlLmVudHJpZXMgPyBzdGF0ZS5lbnRyaWVzIDogW107XG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldENhcnRFbnRyeVNlbGVjdG9yRmFjdG9yeSA9IChcbiAgY2FydElkOiBzdHJpbmcsXG4gIHByb2R1Y3RDb2RlOiBzdHJpbmdcbik6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoTXVsdGlDYXJ0LCBPcmRlckVudHJ5PiA9PiB7XG4gIHJldHVybiBjcmVhdGVTZWxlY3RvcihcbiAgICBnZXRDYXJ0RW50cmllc1NlbGVjdG9yRmFjdG9yeShjYXJ0SWQpLFxuICAgIChzdGF0ZTogT3JkZXJFbnRyeVtdKSA9PiB7XG4gICAgICByZXR1cm4gc3RhdGVcbiAgICAgICAgPyBzdGF0ZS5maW5kKChlbnRyeSkgPT4gZW50cnkucHJvZHVjdC5jb2RlID09PSBwcm9kdWN0Q29kZSlcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEFjdGl2ZUNhcnRJZDogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgU3RhdGVXaXRoTXVsdGlDYXJ0LFxuICBzdHJpbmdcbj4gPSBjcmVhdGVTZWxlY3RvcihnZXRNdWx0aUNhcnRTdGF0ZSwgKHN0YXRlOiBNdWx0aUNhcnRTdGF0ZSkgPT4gc3RhdGUuYWN0aXZlKTtcblxuZXhwb3J0IGNvbnN0IGdldFdpc2hMaXN0SWQ6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aE11bHRpQ2FydCxcbiAgc3RyaW5nXG4+ID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldE11bHRpQ2FydFN0YXRlLFxuICAoc3RhdGU6IE11bHRpQ2FydFN0YXRlKSA9PiBzdGF0ZS53aXNoTGlzdFxuKTtcblxuZXhwb3J0IGNvbnN0IGdldENhcnRzU2VsZWN0b3JGYWN0b3J5OiBNZW1vaXplZFNlbGVjdG9yPFxuICBTdGF0ZVdpdGhNdWx0aUNhcnQsXG4gIENhcnRbXVxuPiA9IGNyZWF0ZVNlbGVjdG9yKFxuICBnZXRNdWx0aUNhcnRFbnRpdGllcyxcbiAgKHN0YXRlOiBFbnRpdHlQcm9jZXNzZXNMb2FkZXJTdGF0ZTxDYXJ0PikgPT5cbiAgICBPYmplY3Qua2V5cyhzdGF0ZS5lbnRpdGllcykubWFwKChrZXkpID0+IGVudGl0eVZhbHVlU2VsZWN0b3Ioc3RhdGUsIGtleSkpXG4pO1xuIl19