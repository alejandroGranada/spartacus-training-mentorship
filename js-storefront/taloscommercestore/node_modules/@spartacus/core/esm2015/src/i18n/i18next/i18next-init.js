import { Injectable } from '@angular/core';
import i18nextXhrBackend from 'i18next-xhr-backend';
import * as i0 from "@angular/core";
export function i18nextInit(i18next, configInit, languageService, httpClient, serverRequestOrigin, siteContextI18nextSynchronizer) {
    return () => configInit.getStableConfig('i18n').then((config) => {
        let i18nextConfig = {
            ns: [],
            fallbackLng: config.i18n.fallbackLang,
            debug: config.i18n.debug,
            interpolation: {
                escapeValue: false,
            },
        };
        if (config.i18n.backend) {
            i18next.use(i18nextXhrBackend);
            const loadPath = getLoadPath(config.i18n.backend.loadPath, serverRequestOrigin);
            const backend = {
                loadPath,
                ajax: i18nextGetHttpClient(httpClient),
            };
            i18nextConfig = Object.assign(Object.assign({}, i18nextConfig), { backend });
        }
        return i18next.init(i18nextConfig, () => {
            // Don't use i18next's 'resources' config key for adding static translations,
            // because it will disable loading chunks from backend. We add resources here, in the init's callback.
            i18nextAddTranslations(i18next, config.i18n.resources);
            siteContextI18nextSynchronizer.init(i18next, languageService);
        });
    });
}
export function i18nextAddTranslations(i18next, resources = {}) {
    Object.keys(resources).forEach((lang) => {
        Object.keys(resources[lang]).forEach((chunkName) => {
            i18next.addResourceBundle(lang, chunkName, resources[lang][chunkName], true, true);
        });
    });
}
export class SiteContextI18nextSynchronizer {
    init(i18next, language) {
        var _a;
        // always update language of i18next on site context (language) change
        this.sub = (_a = this.sub) !== null && _a !== void 0 ? _a : language.getActive().subscribe((lang) => i18next.changeLanguage(lang));
    }
    ngOnDestroy() {
        var _a;
        (_a = this.sub) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    }
}
SiteContextI18nextSynchronizer.ɵprov = i0.ɵɵdefineInjectable({ factory: function SiteContextI18nextSynchronizer_Factory() { return new SiteContextI18nextSynchronizer(); }, token: SiteContextI18nextSynchronizer, providedIn: "root" });
SiteContextI18nextSynchronizer.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/**
 * Returns a function appropriate for i18next to make http calls for JSON files.
 * See docs for `i18next-xhr-backend`: https://github.com/i18next/i18next-xhr-backend#backend-options
 *
 * It uses Angular HttpClient under the hood, so it works in SSR.
 * @param httpClient Angular http client
 */
export function i18nextGetHttpClient(httpClient) {
    return (url, _options, callback, _data) => {
        httpClient.get(url, { responseType: 'text' }).subscribe((data) => callback(data, { status: 200 }), (error) => callback(null, { status: error.status }));
    };
}
/**
 * Resolves the relative path to the absolute one in SSR, using the server request's origin.
 * It's needed, because Angular Universal doesn't support relative URLs in HttpClient. See Angular issues:
 * - https://github.com/angular/angular/issues/19224
 * - https://github.com/angular/universal/issues/858
 */
export function getLoadPath(path, serverRequestOrigin) {
    if (!path) {
        return undefined;
    }
    if (serverRequestOrigin && !path.match(/^http(s)?:\/\//)) {
        if (path.startsWith('/')) {
            path = path.slice(1);
        }
        if (path.startsWith('./')) {
            path = path.slice(2);
        }
        const result = `${serverRequestOrigin}/${path}`;
        return result;
    }
    return path;
}
//# sourceMappingURL=data:application/json;base64,