import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { ConfigInitializerService } from '../../config/config-initializer/config-initializer.service';
import * as i0 from "@angular/core";
import * as i1 from "../../config/config-initializer/config-initializer.service";
export class I18nConfigInitializer {
    constructor(configInit) {
        this.configInit = configInit;
        this.scopes = ['i18n.fallbackLang'];
        this.configFactory = () => this.resolveConfig().toPromise();
    }
    /**
     * Resolves the `fallbackLang` based on the default language from config `context.language` .
     */
    resolveConfig() {
        return this.configInit.getStable('context.language').pipe(map((config) => {
            var _a, _b;
            return ({
                i18n: {
                    // the first language in the array is the default one
                    fallbackLang: (_b = (_a = config === null || config === void 0 ? void 0 : config.context) === null || _a === void 0 ? void 0 : _a.language) === null || _b === void 0 ? void 0 : _b[0],
                },
            });
        }));
    }
}
I18nConfigInitializer.ɵprov = i0.ɵɵdefineInjectable({ factory: function I18nConfigInitializer_Factory() { return new I18nConfigInitializer(i0.ɵɵinject(i1.ConfigInitializerService)); }, token: I18nConfigInitializer, providedIn: "root" });
I18nConfigInitializer.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
I18nConfigInitializer.ctorParameters = () => [
    { type: ConfigInitializerService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaTE4bi1jb25maWctaW5pdGlhbGl6ZXIuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvUGF0cnlrL0Rlc2t0b3Avc3BhcnRhY3VzL3Byb2plY3RzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvaTE4bi9jb25maWcvaTE4bi1jb25maWctaW5pdGlhbGl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sNERBQTRELENBQUM7OztBQUl0RyxNQUFNLE9BQU8scUJBQXFCO0lBSWhDLFlBQXNCLFVBQW9DO1FBQXBDLGVBQVUsR0FBVixVQUFVLENBQTBCO1FBSGpELFdBQU0sR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDL0Isa0JBQWEsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7SUFFSCxDQUFDO0lBRTlEOztPQUVHO0lBQ08sYUFBYTtRQUNyQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLENBQUMsSUFBSSxDQUN2RCxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTs7WUFBQyxPQUFBLENBQUM7Z0JBQ2YsSUFBSSxFQUFFO29CQUNKLHFEQUFxRDtvQkFDckQsWUFBWSxjQUFFLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxPQUFPLDBDQUFFLFFBQVEsMENBQUcsQ0FBQyxDQUFDO2lCQUM3QzthQUNGLENBQUMsQ0FBQTtTQUFBLENBQUMsQ0FDSixDQUFDO0lBQ0osQ0FBQzs7OztZQW5CRixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7WUFIekIsd0JBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQ29uZmlnSW5pdGlhbGl6ZXIgfSBmcm9tICcuLi8uLi9jb25maWcvY29uZmlnLWluaXRpYWxpemVyL2NvbmZpZy1pbml0aWFsaXplcic7XG5pbXBvcnQgeyBDb25maWdJbml0aWFsaXplclNlcnZpY2UgfSBmcm9tICcuLi8uLi9jb25maWcvY29uZmlnLWluaXRpYWxpemVyL2NvbmZpZy1pbml0aWFsaXplci5zZXJ2aWNlJztcbmltcG9ydCB7IEkxOG5Db25maWcgfSBmcm9tICcuL2kxOG4tY29uZmlnJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBJMThuQ29uZmlnSW5pdGlhbGl6ZXIgaW1wbGVtZW50cyBDb25maWdJbml0aWFsaXplciB7XG4gIHJlYWRvbmx5IHNjb3BlcyA9IFsnaTE4bi5mYWxsYmFja0xhbmcnXTtcbiAgcmVhZG9ubHkgY29uZmlnRmFjdG9yeSA9ICgpID0+IHRoaXMucmVzb2x2ZUNvbmZpZygpLnRvUHJvbWlzZSgpO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBjb25maWdJbml0OiBDb25maWdJbml0aWFsaXplclNlcnZpY2UpIHt9XG5cbiAgLyoqXG4gICAqIFJlc29sdmVzIHRoZSBgZmFsbGJhY2tMYW5nYCBiYXNlZCBvbiB0aGUgZGVmYXVsdCBsYW5ndWFnZSBmcm9tIGNvbmZpZyBgY29udGV4dC5sYW5ndWFnZWAgLlxuICAgKi9cbiAgcHJvdGVjdGVkIHJlc29sdmVDb25maWcoKTogT2JzZXJ2YWJsZTxJMThuQ29uZmlnPiB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnSW5pdC5nZXRTdGFibGUoJ2NvbnRleHQubGFuZ3VhZ2UnKS5waXBlKFxuICAgICAgbWFwKChjb25maWcpID0+ICh7XG4gICAgICAgIGkxOG46IHtcbiAgICAgICAgICAvLyB0aGUgZmlyc3QgbGFuZ3VhZ2UgaW4gdGhlIGFycmF5IGlzIHRoZSBkZWZhdWx0IG9uZVxuICAgICAgICAgIGZhbGxiYWNrTGFuZzogY29uZmlnPy5jb250ZXh0Py5sYW5ndWFnZT8uWzBdLFxuICAgICAgICB9LFxuICAgICAgfSkpXG4gICAgKTtcbiAgfVxufVxuIl19