import { NgModule } from '@angular/core';
import { CmsModule } from './cms/cms.module';
import { ConfigInitializerModule } from './config/config-initializer/config-initializer.module';
import { ConfigValidatorModule } from './config/config-validator/config-validator.module';
import { ConfigModule } from './config/config.module';
import { FeaturesConfigModule } from './features-config/features-config.module';
import { GlobalMessageModule } from './global-message/global-message.module';
import { I18nModule } from './i18n/i18n.module';
import { LazyLoadingModule } from './lazy-loading/lazy-loading.module';
import { BaseOccModule } from './occ/base-occ.module';
import { MetaTagConfigModule } from './occ/config/meta-tag-config.module';
import { ProcessModule } from './process/process.module';
import { SiteContextModule } from './site-context/site-context.module';
import { StateModule } from './state/state.module';
export class BaseCoreModule {
    static forRoot() {
        return {
            ngModule: BaseCoreModule,
        };
    }
}
BaseCoreModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    StateModule.forRoot(),
                    ConfigModule.forRoot(),
                    ConfigInitializerModule.forRoot(),
                    ConfigValidatorModule.forRoot(),
                    I18nModule.forRoot(),
                    CmsModule.forRoot(),
                    GlobalMessageModule.forRoot(),
                    ProcessModule.forRoot(),
                    FeaturesConfigModule.forRoot(),
                    SiteContextModule.forRoot(),
                    MetaTagConfigModule.forRoot(),
                    BaseOccModule.forRoot(),
                    LazyLoadingModule.forRoot(),
                ],
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1jb3JlLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy9QYXRyeWsvRGVza3RvcC9zcGFydGFjdXMvcHJvamVjdHMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9iYXNlLWNvcmUubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQUNoRyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUMxRixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDaEYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDN0UsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUMxRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDekQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDdkUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBbUJuRCxNQUFNLE9BQU8sY0FBYztJQUN6QixNQUFNLENBQUMsT0FBTztRQUNaLE9BQU87WUFDTCxRQUFRLEVBQUUsY0FBYztTQUN6QixDQUFDO0lBQ0osQ0FBQzs7O1lBdEJGLFFBQVEsU0FBQztnQkFDUixPQUFPLEVBQUU7b0JBQ1AsV0FBVyxDQUFDLE9BQU8sRUFBRTtvQkFDckIsWUFBWSxDQUFDLE9BQU8sRUFBRTtvQkFDdEIsdUJBQXVCLENBQUMsT0FBTyxFQUFFO29CQUNqQyxxQkFBcUIsQ0FBQyxPQUFPLEVBQUU7b0JBQy9CLFVBQVUsQ0FBQyxPQUFPLEVBQUU7b0JBQ3BCLFNBQVMsQ0FBQyxPQUFPLEVBQUU7b0JBQ25CLG1CQUFtQixDQUFDLE9BQU8sRUFBRTtvQkFDN0IsYUFBYSxDQUFDLE9BQU8sRUFBRTtvQkFDdkIsb0JBQW9CLENBQUMsT0FBTyxFQUFFO29CQUM5QixpQkFBaUIsQ0FBQyxPQUFPLEVBQUU7b0JBQzNCLG1CQUFtQixDQUFDLE9BQU8sRUFBRTtvQkFDN0IsYUFBYSxDQUFDLE9BQU8sRUFBRTtvQkFDdkIsaUJBQWlCLENBQUMsT0FBTyxFQUFFO2lCQUM1QjthQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENtc01vZHVsZSB9IGZyb20gJy4vY21zL2Ntcy5tb2R1bGUnO1xuaW1wb3J0IHsgQ29uZmlnSW5pdGlhbGl6ZXJNb2R1bGUgfSBmcm9tICcuL2NvbmZpZy9jb25maWctaW5pdGlhbGl6ZXIvY29uZmlnLWluaXRpYWxpemVyLm1vZHVsZSc7XG5pbXBvcnQgeyBDb25maWdWYWxpZGF0b3JNb2R1bGUgfSBmcm9tICcuL2NvbmZpZy9jb25maWctdmFsaWRhdG9yL2NvbmZpZy12YWxpZGF0b3IubW9kdWxlJztcbmltcG9ydCB7IENvbmZpZ01vZHVsZSB9IGZyb20gJy4vY29uZmlnL2NvbmZpZy5tb2R1bGUnO1xuaW1wb3J0IHsgRmVhdHVyZXNDb25maWdNb2R1bGUgfSBmcm9tICcuL2ZlYXR1cmVzLWNvbmZpZy9mZWF0dXJlcy1jb25maWcubW9kdWxlJztcbmltcG9ydCB7IEdsb2JhbE1lc3NhZ2VNb2R1bGUgfSBmcm9tICcuL2dsb2JhbC1tZXNzYWdlL2dsb2JhbC1tZXNzYWdlLm1vZHVsZSc7XG5pbXBvcnQgeyBJMThuTW9kdWxlIH0gZnJvbSAnLi9pMThuL2kxOG4ubW9kdWxlJztcbmltcG9ydCB7IExhenlMb2FkaW5nTW9kdWxlIH0gZnJvbSAnLi9sYXp5LWxvYWRpbmcvbGF6eS1sb2FkaW5nLm1vZHVsZSc7XG5pbXBvcnQgeyBCYXNlT2NjTW9kdWxlIH0gZnJvbSAnLi9vY2MvYmFzZS1vY2MubW9kdWxlJztcbmltcG9ydCB7IE1ldGFUYWdDb25maWdNb2R1bGUgfSBmcm9tICcuL29jYy9jb25maWcvbWV0YS10YWctY29uZmlnLm1vZHVsZSc7XG5pbXBvcnQgeyBQcm9jZXNzTW9kdWxlIH0gZnJvbSAnLi9wcm9jZXNzL3Byb2Nlc3MubW9kdWxlJztcbmltcG9ydCB7IFNpdGVDb250ZXh0TW9kdWxlIH0gZnJvbSAnLi9zaXRlLWNvbnRleHQvc2l0ZS1jb250ZXh0Lm1vZHVsZSc7XG5pbXBvcnQgeyBTdGF0ZU1vZHVsZSB9IGZyb20gJy4vc3RhdGUvc3RhdGUubW9kdWxlJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIFN0YXRlTW9kdWxlLmZvclJvb3QoKSxcbiAgICBDb25maWdNb2R1bGUuZm9yUm9vdCgpLFxuICAgIENvbmZpZ0luaXRpYWxpemVyTW9kdWxlLmZvclJvb3QoKSxcbiAgICBDb25maWdWYWxpZGF0b3JNb2R1bGUuZm9yUm9vdCgpLFxuICAgIEkxOG5Nb2R1bGUuZm9yUm9vdCgpLFxuICAgIENtc01vZHVsZS5mb3JSb290KCksXG4gICAgR2xvYmFsTWVzc2FnZU1vZHVsZS5mb3JSb290KCksXG4gICAgUHJvY2Vzc01vZHVsZS5mb3JSb290KCksXG4gICAgRmVhdHVyZXNDb25maWdNb2R1bGUuZm9yUm9vdCgpLFxuICAgIFNpdGVDb250ZXh0TW9kdWxlLmZvclJvb3QoKSwgLy8gc2hvdWxkIGJlIGltcG9ydGVkIGFmdGVyIFJvdXRlck1vZHVsZS5mb3JSb290LCBiZWNhdXNlIGl0IG92ZXJ3cml0ZXMgVXJsU2VyaWFsaXplclxuICAgIE1ldGFUYWdDb25maWdNb2R1bGUuZm9yUm9vdCgpLFxuICAgIEJhc2VPY2NNb2R1bGUuZm9yUm9vdCgpLFxuICAgIExhenlMb2FkaW5nTW9kdWxlLmZvclJvb3QoKSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgQmFzZUNvcmVNb2R1bGUge1xuICBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPEJhc2VDb3JlTW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBCYXNlQ29yZU1vZHVsZSxcbiAgICB9O1xuICB9XG59XG4iXX0=