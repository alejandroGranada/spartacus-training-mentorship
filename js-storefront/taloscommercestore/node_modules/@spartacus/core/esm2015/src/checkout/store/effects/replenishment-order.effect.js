import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { catchError, map, mergeMap, switchMap } from 'rxjs/operators';
import { CartActions } from '../../../cart/store/actions/index';
import { normalizeHttpError } from '../../../util/normalize-http-error';
import { CheckoutReplenishmentOrderConnector } from '../../connectors/index';
import { CheckoutActions } from '../actions/index';
export class ReplenishmentOrderEffects {
    constructor(actions$, checkoutReplOrderConnector) {
        this.actions$ = actions$;
        this.checkoutReplOrderConnector = checkoutReplOrderConnector;
        this.scheduleReplenishmentOrder$ = this.actions$.pipe(ofType(CheckoutActions.SCHEDULE_REPLENISHMENT_ORDER), map((action) => action.payload), mergeMap((payload) => {
            return this.checkoutReplOrderConnector
                .scheduleReplenishmentOrder(payload.cartId, payload.scheduleReplenishmentForm, payload.termsChecked, payload.userId)
                .pipe(switchMap((data) => [
                new CartActions.RemoveCart({ cartId: payload.cartId }),
                new CheckoutActions.ScheduleReplenishmentOrderSuccess(data),
            ]), catchError((error) => of(new CheckoutActions.ScheduleReplenishmentOrderFail(normalizeHttpError(error)))));
        }));
    }
}
ReplenishmentOrderEffects.decorators = [
    { type: Injectable }
];
ReplenishmentOrderEffects.ctorParameters = () => [
    { type: Actions },
    { type: CheckoutReplenishmentOrderConnector }
];
__decorate([
    Effect()
], ReplenishmentOrderEffects.prototype, "scheduleReplenishmentOrder$", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwbGVuaXNobWVudC1vcmRlci5lZmZlY3QuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvUGF0cnlrL0Rlc2t0b3Avc3BhcnRhY3VzL3Byb2plY3RzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY2hlY2tvdXQvc3RvcmUvZWZmZWN0cy9yZXBsZW5pc2htZW50LW9yZGVyLmVmZmVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEQsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzdFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUduRCxNQUFNLE9BQU8seUJBQXlCO0lBaUNwQyxZQUNVLFFBQWlCLEVBQ2pCLDBCQUErRDtRQUQvRCxhQUFRLEdBQVIsUUFBUSxDQUFTO1FBQ2pCLCtCQUEwQixHQUExQiwwQkFBMEIsQ0FBcUM7UUFqQ3pFLGdDQUEyQixHQUl2QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDcEIsTUFBTSxDQUFDLGVBQWUsQ0FBQyw0QkFBNEIsQ0FBQyxFQUNwRCxHQUFHLENBQUMsQ0FBQyxNQUFrRCxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQzNFLFFBQVEsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ25CLE9BQU8sSUFBSSxDQUFDLDBCQUEwQjtpQkFDbkMsMEJBQTBCLENBQ3pCLE9BQU8sQ0FBQyxNQUFNLEVBQ2QsT0FBTyxDQUFDLHlCQUF5QixFQUNqQyxPQUFPLENBQUMsWUFBWSxFQUNwQixPQUFPLENBQUMsTUFBTSxDQUNmO2lCQUNBLElBQUksQ0FDSCxTQUFTLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDO2dCQUNsQixJQUFJLFdBQVcsQ0FBQyxVQUFVLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUN0RCxJQUFJLGVBQWUsQ0FBQyxpQ0FBaUMsQ0FBQyxJQUFJLENBQUM7YUFDNUQsQ0FBQyxFQUNGLFVBQVUsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQ25CLEVBQUUsQ0FDQSxJQUFJLGVBQWUsQ0FBQyw4QkFBOEIsQ0FDaEQsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQzFCLENBQ0YsQ0FDRixDQUNGLENBQUM7UUFDTixDQUFDLENBQUMsQ0FDSCxDQUFDO0lBS0MsQ0FBQzs7O1lBckNMLFVBQVU7OztZQVJGLE9BQU87WUFLUCxtQ0FBbUM7O0FBTTFDO0lBREMsTUFBTSxFQUFFOzhFQThCUCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGlvbnMsIEVmZmVjdCwgb2ZUeXBlIH0gZnJvbSAnQG5ncngvZWZmZWN0cyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciwgbWFwLCBtZXJnZU1hcCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQ2FydEFjdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9jYXJ0L3N0b3JlL2FjdGlvbnMvaW5kZXgnO1xuaW1wb3J0IHsgbm9ybWFsaXplSHR0cEVycm9yIH0gZnJvbSAnLi4vLi4vLi4vdXRpbC9ub3JtYWxpemUtaHR0cC1lcnJvcic7XG5pbXBvcnQgeyBDaGVja291dFJlcGxlbmlzaG1lbnRPcmRlckNvbm5lY3RvciB9IGZyb20gJy4uLy4uL2Nvbm5lY3RvcnMvaW5kZXgnO1xuaW1wb3J0IHsgQ2hlY2tvdXRBY3Rpb25zIH0gZnJvbSAnLi4vYWN0aW9ucy9pbmRleCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBSZXBsZW5pc2htZW50T3JkZXJFZmZlY3RzIHtcbiAgQEVmZmVjdCgpXG4gIHNjaGVkdWxlUmVwbGVuaXNobWVudE9yZGVyJDogT2JzZXJ2YWJsZTxcbiAgICB8IENoZWNrb3V0QWN0aW9ucy5TY2hlZHVsZVJlcGxlbmlzaG1lbnRPcmRlclN1Y2Nlc3NcbiAgICB8IENoZWNrb3V0QWN0aW9ucy5TY2hlZHVsZVJlcGxlbmlzaG1lbnRPcmRlckZhaWxcbiAgICB8IENhcnRBY3Rpb25zLlJlbW92ZUNhcnRcbiAgPiA9IHRoaXMuYWN0aW9ucyQucGlwZShcbiAgICBvZlR5cGUoQ2hlY2tvdXRBY3Rpb25zLlNDSEVEVUxFX1JFUExFTklTSE1FTlRfT1JERVIpLFxuICAgIG1hcCgoYWN0aW9uOiBDaGVja291dEFjdGlvbnMuU2NoZWR1bGVSZXBsZW5pc2htZW50T3JkZXIpID0+IGFjdGlvbi5wYXlsb2FkKSxcbiAgICBtZXJnZU1hcCgocGF5bG9hZCkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuY2hlY2tvdXRSZXBsT3JkZXJDb25uZWN0b3JcbiAgICAgICAgLnNjaGVkdWxlUmVwbGVuaXNobWVudE9yZGVyKFxuICAgICAgICAgIHBheWxvYWQuY2FydElkLFxuICAgICAgICAgIHBheWxvYWQuc2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybSxcbiAgICAgICAgICBwYXlsb2FkLnRlcm1zQ2hlY2tlZCxcbiAgICAgICAgICBwYXlsb2FkLnVzZXJJZFxuICAgICAgICApXG4gICAgICAgIC5waXBlKFxuICAgICAgICAgIHN3aXRjaE1hcCgoZGF0YSkgPT4gW1xuICAgICAgICAgICAgbmV3IENhcnRBY3Rpb25zLlJlbW92ZUNhcnQoeyBjYXJ0SWQ6IHBheWxvYWQuY2FydElkIH0pLFxuICAgICAgICAgICAgbmV3IENoZWNrb3V0QWN0aW9ucy5TY2hlZHVsZVJlcGxlbmlzaG1lbnRPcmRlclN1Y2Nlc3MoZGF0YSksXG4gICAgICAgICAgXSksXG4gICAgICAgICAgY2F0Y2hFcnJvcigoZXJyb3IpID0+XG4gICAgICAgICAgICBvZihcbiAgICAgICAgICAgICAgbmV3IENoZWNrb3V0QWN0aW9ucy5TY2hlZHVsZVJlcGxlbmlzaG1lbnRPcmRlckZhaWwoXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplSHR0cEVycm9yKGVycm9yKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgIH0pXG4gICk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBhY3Rpb25zJDogQWN0aW9ucyxcbiAgICBwcml2YXRlIGNoZWNrb3V0UmVwbE9yZGVyQ29ubmVjdG9yOiBDaGVja291dFJlcGxlbmlzaG1lbnRPcmRlckNvbm5lY3RvclxuICApIHt9XG59XG4iXX0=