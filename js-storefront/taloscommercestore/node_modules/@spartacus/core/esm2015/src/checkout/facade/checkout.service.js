import { Injectable } from '@angular/core';
import { select, Store } from '@ngrx/store';
import { take } from 'rxjs/operators';
import { UserIdService } from '../../auth/user-auth/facade/user-id.service';
import { ActiveCartService } from '../../cart/facade/active-cart.service';
import { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';
import { getProcessErrorFactory, getProcessLoadingFactory, getProcessSuccessFactory, } from '../../process/store/selectors/process-group.selectors';
import { CheckoutActions } from '../store/actions/index';
import { PLACED_ORDER_PROCESS_ID, } from '../store/checkout-state';
import { CheckoutSelectors } from '../store/selectors/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "../../cart/facade/active-cart.service";
import * as i3 from "../../auth/user-auth/facade/user-id.service";
export class CheckoutService {
    constructor(checkoutStore, activeCartService, userIdService) {
        this.checkoutStore = checkoutStore;
        this.activeCartService = activeCartService;
        this.userIdService = userIdService;
    }
    /**
     * Places an order
     */
    placeOrder(termsChecked) {
        if (this.actionAllowed()) {
            let userId;
            this.userIdService
                .getUserId()
                .subscribe((occUserId) => (userId = occUserId))
                .unsubscribe();
            let cartId;
            this.activeCartService
                .getActiveCartId()
                .subscribe((activeCartId) => (cartId = activeCartId))
                .unsubscribe();
            if (userId && cartId) {
                this.checkoutStore.dispatch(new CheckoutActions.PlaceOrder({
                    userId,
                    cartId,
                    termsChecked,
                }));
            }
        }
    }
    /**
     * Schedule a replenishment order
     */
    scheduleReplenishmentOrder(scheduleReplenishmentForm, termsChecked) {
        let cartId;
        this.activeCartService
            .getActiveCartId()
            .pipe(take(1))
            .subscribe((activeCartId) => (cartId = activeCartId));
        this.userIdService.invokeWithUserId((userId) => {
            if (Boolean(cartId) &&
                Boolean(userId) &&
                userId !== OCC_USER_ID_ANONYMOUS) {
                this.checkoutStore.dispatch(new CheckoutActions.ScheduleReplenishmentOrder({
                    cartId,
                    scheduleReplenishmentForm,
                    termsChecked,
                    userId,
                }));
            }
        });
    }
    /**
     * Returns the place or schedule replenishment order's loading flag
     */
    getPlaceOrderLoading() {
        return this.checkoutStore.pipe(select(getProcessLoadingFactory(PLACED_ORDER_PROCESS_ID)));
    }
    /**
     * Returns the place or schedule replenishment order's success flag
     */
    getPlaceOrderSuccess() {
        return this.checkoutStore.pipe(select(getProcessSuccessFactory(PLACED_ORDER_PROCESS_ID)));
    }
    /**
     * Returns the place or schedule replenishment order's error flag
     */
    getPlaceOrderError() {
        return this.checkoutStore.pipe(select(getProcessErrorFactory(PLACED_ORDER_PROCESS_ID)));
    }
    /**
     * Resets the place or schedule replenishment order's processing state
     */
    clearPlaceOrderState() {
        this.checkoutStore.dispatch(new CheckoutActions.ClearPlaceOrder());
    }
    /**
     * Clear checkout data
     */
    clearCheckoutData() {
        this.checkoutStore.dispatch(new CheckoutActions.ClearCheckoutData());
    }
    /**
     * Clear checkout step
     * @param stepNumber : the step number to be cleared
     */
    clearCheckoutStep(stepNumber) {
        this.checkoutStore.dispatch(new CheckoutActions.ClearCheckoutStep(stepNumber));
    }
    /**
     * Load checkout details data
     * @param cartId : string Cart ID of loaded cart
     */
    loadCheckoutDetails(cartId) {
        let userId;
        this.userIdService
            .getUserId()
            .subscribe((occUserId) => (userId = occUserId))
            .unsubscribe();
        if (userId) {
            this.checkoutStore.dispatch(new CheckoutActions.LoadCheckoutDetails({
                userId,
                cartId,
            }));
        }
    }
    /**
     * Get status of checkout details loaded
     */
    getCheckoutDetailsLoaded() {
        return this.checkoutStore.pipe(select(CheckoutSelectors.getCheckoutDetailsLoaded));
    }
    /**
     * Check if checkout details are stable (no longer loading)
     */
    isLoading() {
        return this.checkoutStore.pipe(select(CheckoutSelectors.getCheckoutLoading));
    }
    /**
     * Get order details
     */
    getOrderDetails() {
        return this.checkoutStore.pipe(select(CheckoutSelectors.getCheckoutOrderDetails));
    }
    /**
     * Set checkout order type
     * @param orderType : an enum of types of order we are placing
     */
    setOrderType(orderType) {
        this.checkoutStore.dispatch(new CheckoutActions.SetOrderType(orderType));
    }
    /**
     * Get current checkout order type
     */
    getCurrentOrderType() {
        return this.checkoutStore.pipe(select(CheckoutSelectors.getSelectedOrderType));
    }
    actionAllowed() {
        let userId;
        this.userIdService
            .getUserId()
            .subscribe((occUserId) => (userId = occUserId))
            .unsubscribe();
        return ((userId && userId !== OCC_USER_ID_ANONYMOUS) ||
            this.activeCartService.isGuestCart());
    }
}
CheckoutService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CheckoutService_Factory() { return new CheckoutService(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.ActiveCartService), i0.ɵɵinject(i3.UserIdService)); }, token: CheckoutService, providedIn: "root" });
CheckoutService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
CheckoutService.ctorParameters = () => [
    { type: Store },
    { type: ActiveCartService },
    { type: UserIdService }
];
//# sourceMappingURL=data:application/json;base64,