import { SiteContextActions } from '../actions/index';
export const initialState = {
    entities: null,
    details: {},
    activeSite: '',
};
export function reducer(state = initialState, action) {
    switch (action.type) {
        case SiteContextActions.LOAD_BASE_SITE_SUCCESS: {
            return Object.assign(Object.assign({}, state), { details: action.payload });
        }
        case SiteContextActions.SET_ACTIVE_BASE_SITE: {
            // if active base site is updated,
            // the active base site details data should also be updated
            let details = {};
            if (state.entities) {
                details = state.entities[action.payload];
            }
            return Object.assign(Object.assign({}, state), { details, activeSite: action.payload });
        }
        case SiteContextActions.LOAD_BASE_SITES_SUCCESS: {
            const sites = action.payload;
            const entities = sites.reduce((siteEntities, site) => {
                return Object.assign(Object.assign({}, siteEntities), { [site.uid]: site });
            }, Object.assign({}, state.entities));
            // after base sites entities are populated,
            // the active base site details data is also populated
            const details = entities[state.activeSite];
            return Object.assign(Object.assign({}, state), { details,
                entities });
        }
    }
    return state;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1zaXRlLnJlZHVjZXIuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvUGF0cnlrL0Rlc2t0b3Avc3BhcnRhY3VzL3Byb2plY3RzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvc2l0ZS1jb250ZXh0L3N0b3JlL3JlZHVjZXJzL2Jhc2Utc2l0ZS5yZWR1Y2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBR3RELE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBa0I7SUFDekMsUUFBUSxFQUFFLElBQUk7SUFDZCxPQUFPLEVBQUUsRUFBRTtJQUNYLFVBQVUsRUFBRSxFQUFFO0NBQ2YsQ0FBQztBQUVGLE1BQU0sVUFBVSxPQUFPLENBQ3JCLEtBQUssR0FBRyxZQUFZLEVBQ3BCLE1BQXlDO0lBRXpDLFFBQVEsTUFBTSxDQUFDLElBQUksRUFBRTtRQUNuQixLQUFLLGtCQUFrQixDQUFDLHNCQUFzQixDQUFDLENBQUM7WUFDOUMsdUNBQ0ssS0FBSyxLQUNSLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxJQUN2QjtTQUNIO1FBRUQsS0FBSyxrQkFBa0IsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1lBQzVDLGtDQUFrQztZQUNsQywyREFBMkQ7WUFDM0QsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDO1lBQ2pCLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRTtnQkFDbEIsT0FBTyxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQzFDO1lBQ0QsdUNBQ0ssS0FBSyxLQUNSLE9BQU8sRUFDUCxVQUFVLEVBQUUsTUFBTSxDQUFDLE9BQU8sSUFDMUI7U0FDSDtRQUVELEtBQUssa0JBQWtCLENBQUMsdUJBQXVCLENBQUMsQ0FBQztZQUMvQyxNQUFNLEtBQUssR0FBZSxNQUFNLENBQUMsT0FBTyxDQUFDO1lBQ3pDLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQzNCLENBQUMsWUFBeUMsRUFBRSxJQUFjLEVBQUUsRUFBRTtnQkFDNUQsdUNBQ0ssWUFBWSxLQUNmLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksSUFDaEI7WUFDSixDQUFDLG9CQUVJLEtBQUssQ0FBQyxRQUFRLEVBRXBCLENBQUM7WUFDRiwyQ0FBMkM7WUFDM0Msc0RBQXNEO1lBQ3RELE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7WUFFM0MsdUNBQ0ssS0FBSyxLQUNSLE9BQU87Z0JBQ1AsUUFBUSxJQUNSO1NBQ0g7S0FDRjtJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VTaXRlIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvbWlzYy5tb2RlbCc7XG5pbXBvcnQgeyBTaXRlQ29udGV4dEFjdGlvbnMgfSBmcm9tICcuLi9hY3Rpb25zL2luZGV4JztcbmltcG9ydCB7IEJhc2VTaXRlU3RhdGUgfSBmcm9tICcuLi9zdGF0ZSc7XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsU3RhdGU6IEJhc2VTaXRlU3RhdGUgPSB7XG4gIGVudGl0aWVzOiBudWxsLFxuICBkZXRhaWxzOiB7fSxcbiAgYWN0aXZlU2l0ZTogJycsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gcmVkdWNlcihcbiAgc3RhdGUgPSBpbml0aWFsU3RhdGUsXG4gIGFjdGlvbjogU2l0ZUNvbnRleHRBY3Rpb25zLkJhc2VTaXRlQWN0aW9uXG4pOiBCYXNlU2l0ZVN0YXRlIHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgU2l0ZUNvbnRleHRBY3Rpb25zLkxPQURfQkFTRV9TSVRFX1NVQ0NFU1M6IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBkZXRhaWxzOiBhY3Rpb24ucGF5bG9hZCxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY2FzZSBTaXRlQ29udGV4dEFjdGlvbnMuU0VUX0FDVElWRV9CQVNFX1NJVEU6IHtcbiAgICAgIC8vIGlmIGFjdGl2ZSBiYXNlIHNpdGUgaXMgdXBkYXRlZCxcbiAgICAgIC8vIHRoZSBhY3RpdmUgYmFzZSBzaXRlIGRldGFpbHMgZGF0YSBzaG91bGQgYWxzbyBiZSB1cGRhdGVkXG4gICAgICBsZXQgZGV0YWlscyA9IHt9O1xuICAgICAgaWYgKHN0YXRlLmVudGl0aWVzKSB7XG4gICAgICAgIGRldGFpbHMgPSBzdGF0ZS5lbnRpdGllc1thY3Rpb24ucGF5bG9hZF07XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgZGV0YWlscyxcbiAgICAgICAgYWN0aXZlU2l0ZTogYWN0aW9uLnBheWxvYWQsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGNhc2UgU2l0ZUNvbnRleHRBY3Rpb25zLkxPQURfQkFTRV9TSVRFU19TVUNDRVNTOiB7XG4gICAgICBjb25zdCBzaXRlczogQmFzZVNpdGVbXSA9IGFjdGlvbi5wYXlsb2FkO1xuICAgICAgY29uc3QgZW50aXRpZXMgPSBzaXRlcy5yZWR1Y2UoXG4gICAgICAgIChzaXRlRW50aXRpZXM6IHsgW3VpZDogc3RyaW5nXTogQmFzZVNpdGUgfSwgc2l0ZTogQmFzZVNpdGUpID0+IHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uc2l0ZUVudGl0aWVzLFxuICAgICAgICAgICAgW3NpdGUudWlkXTogc2l0ZSxcbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgLi4uc3RhdGUuZW50aXRpZXMsXG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICAvLyBhZnRlciBiYXNlIHNpdGVzIGVudGl0aWVzIGFyZSBwb3B1bGF0ZWQsXG4gICAgICAvLyB0aGUgYWN0aXZlIGJhc2Ugc2l0ZSBkZXRhaWxzIGRhdGEgaXMgYWxzbyBwb3B1bGF0ZWRcbiAgICAgIGNvbnN0IGRldGFpbHMgPSBlbnRpdGllc1tzdGF0ZS5hY3RpdmVTaXRlXTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGRldGFpbHMsXG4gICAgICAgIGVudGl0aWVzLFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RhdGU7XG59XG4iXX0=