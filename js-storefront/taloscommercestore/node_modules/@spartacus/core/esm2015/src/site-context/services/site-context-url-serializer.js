import { Injectable } from '@angular/core';
import { DefaultUrlSerializer } from '@angular/router';
import { SiteContextParamsService } from './site-context-params.service';
/**
 * Angular URL Serializer aware of Spartacus site context parameters
 * encoded in the URL.
 */
export class SiteContextUrlSerializer extends DefaultUrlSerializer {
    constructor(siteContextParams) {
        super();
        this.siteContextParams = siteContextParams;
        /**
         * Splits the URL into 2 parts: path and the query/fragment part
         */
        this.URL_SPLIT = /(^[^#?]*)(.*)/;
    }
    /**
     * Names of site context parameters encoded in the URL
     */
    get urlEncodingParameters() {
        return this.siteContextParams.getUrlEncodingParameters();
    }
    /**
     * Tells whether any site context parameters should be encoded in the URL
     */
    get hasContextInRoutes() {
        return this.urlEncodingParameters.length > 0;
    }
    /**
     * @override Recognizes the site context parameters encoded in the prefix segments
     * of the given URL.
     *
     * It returns the UrlTree for the given URL shortened by the recognized params, but saves
     * the params' values in the custom property of UrlTree: `siteContext`.
     */
    parse(url) {
        if (this.hasContextInRoutes) {
            const urlWithParams = this.urlExtractContextParameters(url);
            const parsed = super.parse(urlWithParams.url);
            this.urlTreeIncludeContextParameters(parsed, urlWithParams.params);
            return parsed;
        }
        else {
            return super.parse(url);
        }
    }
    /**
     * Recognizes the site context parameters encoded in the prefix segments of the given URL.
     *
     * It returns the recognized site context params as well as the
     * URL shortened by the recognized params.
     */
    urlExtractContextParameters(url) {
        const [, urlPart, queryPart] = url.match(this.URL_SPLIT);
        const segments = urlPart.split('/');
        if (segments[0] === '') {
            segments.shift();
        }
        const params = {};
        let paramId = 0;
        let segmentId = 0;
        while (paramId < this.urlEncodingParameters.length &&
            segmentId < segments.length) {
            const paramName = this.urlEncodingParameters[paramId];
            const paramValues = this.siteContextParams.getParamValues(paramName);
            if (paramValues.includes(segments[segmentId])) {
                params[paramName] = segments[segmentId];
                segmentId++;
            }
            paramId++;
        }
        url = segments.slice(segmentId).join('/') + queryPart;
        return { url, params };
    }
    /**
     * Saves the given site context parameters in the custom property
     * of the given UrlTree: `siteContext`.
     */
    urlTreeIncludeContextParameters(urlTree, params) {
        urlTree.siteContext = params;
    }
    /**
     * @override Serializes the given UrlTree to a string and prepends
     *  to it the current values of the site context parameters.
     */
    serialize(tree) {
        const params = this.urlTreeExtractContextParameters(tree);
        const url = super.serialize(tree);
        const serialized = this.urlIncludeContextParameters(url, params);
        return serialized;
    }
    /**
     * Returns the site context parameters stored in the custom property
     * of the UrlTree: `siteContext`.
     */
    urlTreeExtractContextParameters(urlTree) {
        return urlTree.siteContext ? urlTree.siteContext : {};
    }
    /**
     * Prepends the current values of the site context parameters to the given URL.
     */
    urlIncludeContextParameters(url, params) {
        const contextRoutePart = this.urlEncodingParameters
            .map((param) => {
            return params[param]
                ? params[param]
                : this.siteContextParams.getValue(param);
        })
            .join('/');
        return contextRoutePart + url;
    }
}
SiteContextUrlSerializer.decorators = [
    { type: Injectable }
];
SiteContextUrlSerializer.ctorParameters = () => [
    { type: SiteContextParamsService }
];
//# sourceMappingURL=data:application/json;base64,