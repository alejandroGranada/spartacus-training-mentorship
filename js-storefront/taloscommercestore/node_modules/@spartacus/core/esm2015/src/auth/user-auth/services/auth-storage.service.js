import { Injectable } from '@angular/core';
import { OAuthStorage } from 'angular-oauth2-oidc';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * Storage service for AuthToken. Used as a storage for angular-oauth2-oidc library.
 */
export class AuthStorageService extends OAuthStorage {
    constructor() {
        super(...arguments);
        this._token$ = new BehaviorSubject({});
    }
    decode(key, value) {
        if (AuthStorageService.nonStringifiedOAuthLibKeys.includes(key)) {
            return value;
        }
        return JSON.stringify(value);
    }
    encode(key, value) {
        if (AuthStorageService.nonStringifiedOAuthLibKeys.includes(key)) {
            return value;
        }
        else {
            try {
                return JSON.parse(value);
            }
            catch (_a) {
                return value;
            }
        }
    }
    /* Async API for spartacus use */
    /**
     * Returns complete token (all fields).
     *
     * @return observable emitting AuthToken
     */
    getToken() {
        return this._token$;
    }
    /**
     * Set current value of token.
     *
     * @param token
     */
    setToken(token) {
        this._token$.next(token);
    }
    /* Sync API for OAuth lib use */
    /**
     * Get parameter from the token (eg. access_token)
     *
     * @param key
     */
    getItem(key) {
        let token;
        this.getToken()
            .subscribe((currentToken) => (token = currentToken))
            .unsubscribe();
        return this.decode(key, token === null || token === void 0 ? void 0 : token[key]);
    }
    /**
     * Removes parameter from the token (eg. access_token)
     *
     * @param key
     */
    removeItem(key) {
        const val = Object.assign({}, this._token$.value);
        delete val[key];
        this._token$.next(Object.assign({}, val));
    }
    /**
     * Sets parameter of the token (eg. access_token)
     *
     * @param key
     */
    setItem(key, data) {
        if (key) {
            this._token$.next(Object.assign(Object.assign({}, this._token$.value), { [key]: this.encode(key, data) }));
        }
    }
}
/**
 * Extracted keys that are not `JSON.stringify` from reading the angular-oauth2-oidc source code
 */
AuthStorageService.nonStringifiedOAuthLibKeys = [
    'PKCE_verifier',
    'access_token',
    'refresh_token',
    'expires_at',
    'access_token_stored_at',
    'id_token',
    'id_token_expires_at',
    'id_token_stored_at',
    'session_state',
    'nonce',
];
AuthStorageService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthStorageService_Factory() { return new AuthStorageService(); }, token: AuthStorageService, providedIn: "root" });
AuthStorageService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1zdG9yYWdlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvUGF0cnlrL0Rlc2t0b3Avc3BhcnRhY3VzL3Byb2plY3RzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvYXV0aC91c2VyLWF1dGgvc2VydmljZXMvYXV0aC1zdG9yYWdlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkQsT0FBTyxFQUFFLGVBQWUsRUFBYyxNQUFNLE1BQU0sQ0FBQzs7QUFHbkQ7O0dBRUc7QUFJSCxNQUFNLE9BQU8sa0JBQW1CLFNBQVEsWUFBWTtJQUhwRDs7UUFvQlksWUFBTyxHQUEwQixJQUFJLGVBQWUsQ0FDNUQsRUFBZSxDQUNoQixDQUFDO0tBa0ZIO0lBaEZXLE1BQU0sQ0FBQyxHQUFXLEVBQUUsS0FBVTtRQUN0QyxJQUFJLGtCQUFrQixDQUFDLDBCQUEwQixDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUMvRCxPQUFPLEtBQUssQ0FBQztTQUNkO1FBQ0QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFUyxNQUFNLENBQUMsR0FBVyxFQUFFLEtBQVU7UUFDdEMsSUFBSSxrQkFBa0IsQ0FBQywwQkFBMEIsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDL0QsT0FBTyxLQUFLLENBQUM7U0FDZDthQUFNO1lBQ0wsSUFBSTtnQkFDRixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDMUI7WUFBQyxXQUFNO2dCQUNOLE9BQU8sS0FBSyxDQUFDO2FBQ2Q7U0FDRjtJQUNILENBQUM7SUFFRCxpQ0FBaUM7SUFFakM7Ozs7T0FJRztJQUNILFFBQVE7UUFDTixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxRQUFRLENBQUMsS0FBZ0I7UUFDdEIsSUFBSSxDQUFDLE9BQXNDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRCxnQ0FBZ0M7SUFFaEM7Ozs7T0FJRztJQUNILE9BQU8sQ0FBQyxHQUFXO1FBQ2pCLElBQUksS0FBSyxDQUFDO1FBQ1YsSUFBSSxDQUFDLFFBQVEsRUFBRTthQUNaLFNBQVMsQ0FBQyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLEdBQUcsWUFBWSxDQUFDLENBQUM7YUFDbkQsV0FBVyxFQUFFLENBQUM7UUFDakIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUcsR0FBRyxFQUFFLENBQUM7SUFDeEMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxVQUFVLENBQUMsR0FBVztRQUNwQixNQUFNLEdBQUcscUJBQVMsSUFBSSxDQUFDLE9BQXNDLENBQUMsS0FBSyxDQUFFLENBQUM7UUFDdEUsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsT0FBc0MsQ0FBQyxJQUFJLG1CQUM1QyxHQUFHLEVBQ04sQ0FBQztJQUNMLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsT0FBTyxDQUFDLEdBQVcsRUFBRSxJQUFTO1FBQzVCLElBQUksR0FBRyxFQUFFO1lBQ04sSUFBSSxDQUFDLE9BQXNDLENBQUMsSUFBSSxpQ0FDM0MsSUFBSSxDQUFDLE9BQXNDLENBQUMsS0FBSyxLQUNyRCxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUM3QixDQUFDO1NBQ0o7SUFDSCxDQUFDOztBQW5HRDs7R0FFRztBQUN1Qiw2Q0FBMEIsR0FBRztJQUNyRCxlQUFlO0lBQ2YsY0FBYztJQUNkLGVBQWU7SUFDZixZQUFZO0lBQ1osd0JBQXdCO0lBQ3hCLFVBQVU7SUFDVixxQkFBcUI7SUFDckIsb0JBQW9CO0lBQ3BCLGVBQWU7SUFDZixPQUFPO0NBQ1IsQ0FBQzs7O1lBbEJILFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9BdXRoU3RvcmFnZSB9IGZyb20gJ2FuZ3VsYXItb2F1dGgyLW9pZGMnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBdXRoVG9rZW4gfSBmcm9tICcuLi9tb2RlbHMvYXV0aC10b2tlbi5tb2RlbCc7XG5cbi8qKlxuICogU3RvcmFnZSBzZXJ2aWNlIGZvciBBdXRoVG9rZW4uIFVzZWQgYXMgYSBzdG9yYWdlIGZvciBhbmd1bGFyLW9hdXRoMi1vaWRjIGxpYnJhcnkuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBBdXRoU3RvcmFnZVNlcnZpY2UgZXh0ZW5kcyBPQXV0aFN0b3JhZ2Uge1xuICAvKipcbiAgICogRXh0cmFjdGVkIGtleXMgdGhhdCBhcmUgbm90IGBKU09OLnN0cmluZ2lmeWAgZnJvbSByZWFkaW5nIHRoZSBhbmd1bGFyLW9hdXRoMi1vaWRjIHNvdXJjZSBjb2RlXG4gICAqL1xuICBwcm90ZWN0ZWQgc3RhdGljIHJlYWRvbmx5IG5vblN0cmluZ2lmaWVkT0F1dGhMaWJLZXlzID0gW1xuICAgICdQS0NFX3ZlcmlmaWVyJyxcbiAgICAnYWNjZXNzX3Rva2VuJyxcbiAgICAncmVmcmVzaF90b2tlbicsXG4gICAgJ2V4cGlyZXNfYXQnLFxuICAgICdhY2Nlc3NfdG9rZW5fc3RvcmVkX2F0JyxcbiAgICAnaWRfdG9rZW4nLFxuICAgICdpZF90b2tlbl9leHBpcmVzX2F0JyxcbiAgICAnaWRfdG9rZW5fc3RvcmVkX2F0JyxcbiAgICAnc2Vzc2lvbl9zdGF0ZScsXG4gICAgJ25vbmNlJyxcbiAgXTtcblxuICBwcm90ZWN0ZWQgX3Rva2VuJDogT2JzZXJ2YWJsZTxBdXRoVG9rZW4+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxBdXRoVG9rZW4+KFxuICAgIHt9IGFzIEF1dGhUb2tlblxuICApO1xuXG4gIHByb3RlY3RlZCBkZWNvZGUoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcbiAgICBpZiAoQXV0aFN0b3JhZ2VTZXJ2aWNlLm5vblN0cmluZ2lmaWVkT0F1dGhMaWJLZXlzLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBlbmNvZGUoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcbiAgICBpZiAoQXV0aFN0b3JhZ2VTZXJ2aWNlLm5vblN0cmluZ2lmaWVkT0F1dGhMaWJLZXlzLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodmFsdWUpO1xuICAgICAgfSBjYXRjaCB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKiBBc3luYyBBUEkgZm9yIHNwYXJ0YWN1cyB1c2UgKi9cblxuICAvKipcbiAgICogUmV0dXJucyBjb21wbGV0ZSB0b2tlbiAoYWxsIGZpZWxkcykuXG4gICAqXG4gICAqIEByZXR1cm4gb2JzZXJ2YWJsZSBlbWl0dGluZyBBdXRoVG9rZW5cbiAgICovXG4gIGdldFRva2VuKCk6IE9ic2VydmFibGU8QXV0aFRva2VuPiB7XG4gICAgcmV0dXJuIHRoaXMuX3Rva2VuJDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgY3VycmVudCB2YWx1ZSBvZiB0b2tlbi5cbiAgICpcbiAgICogQHBhcmFtIHRva2VuXG4gICAqL1xuICBzZXRUb2tlbih0b2tlbjogQXV0aFRva2VuKTogdm9pZCB7XG4gICAgKHRoaXMuX3Rva2VuJCBhcyBCZWhhdmlvclN1YmplY3Q8QXV0aFRva2VuPikubmV4dCh0b2tlbik7XG4gIH1cblxuICAvKiBTeW5jIEFQSSBmb3IgT0F1dGggbGliIHVzZSAqL1xuXG4gIC8qKlxuICAgKiBHZXQgcGFyYW1ldGVyIGZyb20gdGhlIHRva2VuIChlZy4gYWNjZXNzX3Rva2VuKVxuICAgKlxuICAgKiBAcGFyYW0ga2V5XG4gICAqL1xuICBnZXRJdGVtKGtleTogc3RyaW5nKTogYW55IHtcbiAgICBsZXQgdG9rZW47XG4gICAgdGhpcy5nZXRUb2tlbigpXG4gICAgICAuc3Vic2NyaWJlKChjdXJyZW50VG9rZW4pID0+ICh0b2tlbiA9IGN1cnJlbnRUb2tlbikpXG4gICAgICAudW5zdWJzY3JpYmUoKTtcbiAgICByZXR1cm4gdGhpcy5kZWNvZGUoa2V5LCB0b2tlbj8uW2tleV0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgcGFyYW1ldGVyIGZyb20gdGhlIHRva2VuIChlZy4gYWNjZXNzX3Rva2VuKVxuICAgKlxuICAgKiBAcGFyYW0ga2V5XG4gICAqL1xuICByZW1vdmVJdGVtKGtleTogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc3QgdmFsID0geyAuLi4odGhpcy5fdG9rZW4kIGFzIEJlaGF2aW9yU3ViamVjdDxBdXRoVG9rZW4+KS52YWx1ZSB9O1xuICAgIGRlbGV0ZSB2YWxba2V5XTtcbiAgICAodGhpcy5fdG9rZW4kIGFzIEJlaGF2aW9yU3ViamVjdDxBdXRoVG9rZW4+KS5uZXh0KHtcbiAgICAgIC4uLnZhbCxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHBhcmFtZXRlciBvZiB0aGUgdG9rZW4gKGVnLiBhY2Nlc3NfdG9rZW4pXG4gICAqXG4gICAqIEBwYXJhbSBrZXlcbiAgICovXG4gIHNldEl0ZW0oa2V5OiBzdHJpbmcsIGRhdGE6IGFueSk6IHZvaWQge1xuICAgIGlmIChrZXkpIHtcbiAgICAgICh0aGlzLl90b2tlbiQgYXMgQmVoYXZpb3JTdWJqZWN0PEF1dGhUb2tlbj4pLm5leHQoe1xuICAgICAgICAuLi4odGhpcy5fdG9rZW4kIGFzIEJlaGF2aW9yU3ViamVjdDxBdXRoVG9rZW4+KS52YWx1ZSxcbiAgICAgICAgW2tleV06IHRoaXMuZW5jb2RlKGtleSwgZGF0YSksXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==