import { Inject, Injectable, PLATFORM_ID } from '@angular/core';
import { OAuthService } from 'angular-oauth2-oidc';
import { WindowRef } from '../../../window/window-ref';
import { AuthConfigService } from './auth-config.service';
import * as i0 from "@angular/core";
import * as i1 from "angular-oauth2-oidc";
import * as i2 from "./auth-config.service";
import * as i3 from "../../../window/window-ref";
/**
 * Wrapper service on the library OAuthService. Normalizes the lib API for services.
 * Use this service when you want to access low level OAuth library methods.
 */
export class OAuthLibWrapperService {
    // TODO: Remove platformId dependency in 4.0
    constructor(oAuthService, authConfigService, platformId, winRef) {
        this.oAuthService = oAuthService;
        this.authConfigService = authConfigService;
        this.platformId = platformId;
        this.winRef = winRef;
        this.initialize();
    }
    initialize() {
        var _a, _b, _c, _d;
        const isSSR = !this.winRef.isBrowser();
        this.oAuthService.configure(Object.assign({ tokenEndpoint: this.authConfigService.getTokenEndpoint(), loginUrl: this.authConfigService.getLoginUrl(), clientId: this.authConfigService.getClientId(), dummyClientSecret: this.authConfigService.getClientSecret(), revocationEndpoint: this.authConfigService.getRevokeEndpoint(), logoutUrl: this.authConfigService.getLogoutUrl(), userinfoEndpoint: this.authConfigService.getUserinfoEndpoint(), issuer: (_b = (_a = this.authConfigService.getOAuthLibConfig()) === null || _a === void 0 ? void 0 : _a.issuer) !== null && _b !== void 0 ? _b : this.authConfigService.getBaseUrl(), redirectUri: (_d = (_c = this.authConfigService.getOAuthLibConfig()) === null || _c === void 0 ? void 0 : _c.redirectUri) !== null && _d !== void 0 ? _d : (!isSSR
                ? // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                    this.winRef.nativeWindow.location.origin
                : '') }, this.authConfigService.getOAuthLibConfig()));
    }
    /**
     * Authorize with ResourceOwnerPasswordFlow.
     *
     * @param userId
     * @param password
     *
     * @return token response from the lib
     */
    authorizeWithPasswordFlow(userId, password) {
        return this.oAuthService.fetchTokenUsingPasswordFlow(userId, password);
    }
    /**
     * Refresh access_token.
     */
    refreshToken() {
        this.oAuthService.refreshToken();
    }
    /**
     * Revoke access tokens and clear tokens in lib state.
     */
    revokeAndLogout() {
        return new Promise((resolve) => {
            this.oAuthService
                .revokeTokenAndLogout()
                .catch(() => {
                // when there would be some kind of error during revocation we can't do anything else, so at least we logout user.
                this.oAuthService.logOut();
            })
                .finally(() => {
                resolve();
            });
        });
    }
    /**
     * Clear tokens in library state (no revocation).
     */
    logout() {
        this.oAuthService.logOut();
    }
    /**
     * Returns Open Id token. Might be empty, when it was not requested with the `responseType` config.
     *
     * @return id token
     */
    getIdToken() {
        return this.oAuthService.getIdToken();
    }
    /**
     * Initialize Implicit Flow or Authorization Code flows with the redirect to OAuth login url.
     */
    initLoginFlow() {
        return this.oAuthService.initLoginFlow();
    }
    /**
     * Tries to login user based on `code` or `token` present in the url.
     */
    tryLogin() {
        return this.oAuthService.tryLogin({
            // We don't load discovery document, because it doesn't contain revoke endpoint information
            disableOAuth2StateCheck: true,
        });
    }
}
OAuthLibWrapperService.ɵprov = i0.ɵɵdefineInjectable({ factory: function OAuthLibWrapperService_Factory() { return new OAuthLibWrapperService(i0.ɵɵinject(i1.OAuthService), i0.ɵɵinject(i2.AuthConfigService), i0.ɵɵinject(i0.PLATFORM_ID), i0.ɵɵinject(i3.WindowRef)); }, token: OAuthLibWrapperService, providedIn: "root" });
OAuthLibWrapperService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
OAuthLibWrapperService.ctorParameters = () => [
    { type: OAuthService },
    { type: AuthConfigService },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: WindowRef }
];
//# sourceMappingURL=data:application/json;base64,