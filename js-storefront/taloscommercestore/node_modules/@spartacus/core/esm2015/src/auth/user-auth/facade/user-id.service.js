import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { map, take } from 'rxjs/operators';
import { OCC_USER_ID_ANONYMOUS, OCC_USER_ID_CURRENT, } from '../../../occ/utils/occ-constants';
import * as i0 from "@angular/core";
/**
 * This implementation is OCC specific.
 * Different backend might have completely different need regarding user id.
 * It might not need user id at all and work based on access_token.
 * To implement custom solution provide your own implementation and customize services that use UserIdService
 */
export class UserIdService {
    constructor() {
        this._userId = new ReplaySubject(1);
    }
    /**
     * Sets current user id.
     *
     * @param userId
     */
    setUserId(userId) {
        this._userId.next(userId);
    }
    /**
     * This function provides the userId the OCC calls should use, depending
     * on whether there is an active storefront session or not.
     *
     * It returns the userId of the current storefront user or 'anonymous'
     * in the case there are no signed in user in the storefront.
     *
     * The user id of a regular customer session is 'current'. In the case of an
     * asm customer emulation session, the userId will be the customerId.
     */
    getUserId() {
        return this._userId;
    }
    /**
     * @deprecated Use `takeUserId` method instead.
     *
     * Calls provided callback with current user id.
     *
     * @param cb callback function to invoke
     */
    invokeWithUserId(cb) {
        return this.getUserId()
            .pipe(take(1))
            .subscribe((id) => cb(id));
    }
    /**
     * Utility method if you need userId to perform single action (eg. dispatch call to API).
     *
     * @param loggedIn Set to true if you want the observable to emit id only for logged in user. Throws in case of anonymous user.
     *
     * @returns Observable that emits once and completes with the last userId value.
     */
    takeUserId(loggedIn = false) {
        return this.getUserId().pipe(take(1), map((userId) => {
            if (loggedIn && userId === OCC_USER_ID_ANONYMOUS) {
                throw new Error('Requested user id for logged user while user is not logged in.');
            }
            return userId;
        }));
    }
    /**
     * Sets user id to the default value for logged out user.
     */
    clearUserId() {
        this.setUserId(OCC_USER_ID_ANONYMOUS);
    }
    /**
     * Checks if the userId is of emulated user type.
     */
    isEmulated() {
        return this.getUserId().pipe(map((userId) => userId !== OCC_USER_ID_ANONYMOUS && userId !== OCC_USER_ID_CURRENT));
    }
}
UserIdService.ɵprov = i0.ɵɵdefineInjectable({ factory: function UserIdService_Factory() { return new UserIdService(); }, token: UserIdService, providedIn: "root" });
UserIdService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1pZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9wcm9qZWN0cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL2F1dGgvdXNlci1hdXRoL2ZhY2FkZS91c2VyLWlkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQWMsYUFBYSxFQUFnQixNQUFNLE1BQU0sQ0FBQztBQUMvRCxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFDTCxxQkFBcUIsRUFDckIsbUJBQW1CLEdBQ3BCLE1BQU0sa0NBQWtDLENBQUM7O0FBRTFDOzs7OztHQUtHO0FBSUgsTUFBTSxPQUFPLGFBQWE7SUFIMUI7UUFJVSxZQUFPLEdBQXVCLElBQUksYUFBYSxDQUFTLENBQUMsQ0FBQyxDQUFDO0tBNkVwRTtJQTNFQzs7OztPQUlHO0lBQ0ksU0FBUyxDQUFDLE1BQWM7UUFDNUIsSUFBSSxDQUFDLE9BQWlDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRDs7Ozs7Ozs7O09BU0c7SUFDSSxTQUFTO1FBQ2QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSSxnQkFBZ0IsQ0FBQyxFQUEyQjtRQUNqRCxPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUU7YUFDcEIsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNiLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNJLFVBQVUsQ0FBQyxRQUFRLEdBQUcsS0FBSztRQUNoQyxPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQzFCLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDUCxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNiLElBQUksUUFBUSxJQUFJLE1BQU0sS0FBSyxxQkFBcUIsRUFBRTtnQkFDaEQsTUFBTSxJQUFJLEtBQUssQ0FDYixnRUFBZ0UsQ0FDakUsQ0FBQzthQUNIO1lBQ0QsT0FBTyxNQUFNLENBQUM7UUFDaEIsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNJLFdBQVc7UUFDaEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRDs7T0FFRztJQUNJLFVBQVU7UUFDZixPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQzFCLEdBQUcsQ0FDRCxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQ1QsTUFBTSxLQUFLLHFCQUFxQixJQUFJLE1BQU0sS0FBSyxtQkFBbUIsQ0FDckUsQ0FDRixDQUFDO0lBQ0osQ0FBQzs7OztZQWhGRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBSZXBsYXlTdWJqZWN0LCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCwgdGFrZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7XG4gIE9DQ19VU0VSX0lEX0FOT05ZTU9VUyxcbiAgT0NDX1VTRVJfSURfQ1VSUkVOVCxcbn0gZnJvbSAnLi4vLi4vLi4vb2NjL3V0aWxzL29jYy1jb25zdGFudHMnO1xuXG4vKipcbiAqIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgT0NDIHNwZWNpZmljLlxuICogRGlmZmVyZW50IGJhY2tlbmQgbWlnaHQgaGF2ZSBjb21wbGV0ZWx5IGRpZmZlcmVudCBuZWVkIHJlZ2FyZGluZyB1c2VyIGlkLlxuICogSXQgbWlnaHQgbm90IG5lZWQgdXNlciBpZCBhdCBhbGwgYW5kIHdvcmsgYmFzZWQgb24gYWNjZXNzX3Rva2VuLlxuICogVG8gaW1wbGVtZW50IGN1c3RvbSBzb2x1dGlvbiBwcm92aWRlIHlvdXIgb3duIGltcGxlbWVudGF0aW9uIGFuZCBjdXN0b21pemUgc2VydmljZXMgdGhhdCB1c2UgVXNlcklkU2VydmljZVxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgVXNlcklkU2VydmljZSB7XG4gIHByaXZhdGUgX3VzZXJJZDogT2JzZXJ2YWJsZTxzdHJpbmc+ID0gbmV3IFJlcGxheVN1YmplY3Q8c3RyaW5nPigxKTtcblxuICAvKipcbiAgICogU2V0cyBjdXJyZW50IHVzZXIgaWQuXG4gICAqXG4gICAqIEBwYXJhbSB1c2VySWRcbiAgICovXG4gIHB1YmxpYyBzZXRVc2VySWQodXNlcklkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAodGhpcy5fdXNlcklkIGFzIFJlcGxheVN1YmplY3Q8c3RyaW5nPikubmV4dCh1c2VySWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gcHJvdmlkZXMgdGhlIHVzZXJJZCB0aGUgT0NDIGNhbGxzIHNob3VsZCB1c2UsIGRlcGVuZGluZ1xuICAgKiBvbiB3aGV0aGVyIHRoZXJlIGlzIGFuIGFjdGl2ZSBzdG9yZWZyb250IHNlc3Npb24gb3Igbm90LlxuICAgKlxuICAgKiBJdCByZXR1cm5zIHRoZSB1c2VySWQgb2YgdGhlIGN1cnJlbnQgc3RvcmVmcm9udCB1c2VyIG9yICdhbm9ueW1vdXMnXG4gICAqIGluIHRoZSBjYXNlIHRoZXJlIGFyZSBubyBzaWduZWQgaW4gdXNlciBpbiB0aGUgc3RvcmVmcm9udC5cbiAgICpcbiAgICogVGhlIHVzZXIgaWQgb2YgYSByZWd1bGFyIGN1c3RvbWVyIHNlc3Npb24gaXMgJ2N1cnJlbnQnLiBJbiB0aGUgY2FzZSBvZiBhblxuICAgKiBhc20gY3VzdG9tZXIgZW11bGF0aW9uIHNlc3Npb24sIHRoZSB1c2VySWQgd2lsbCBiZSB0aGUgY3VzdG9tZXJJZC5cbiAgICovXG4gIHB1YmxpYyBnZXRVc2VySWQoKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5fdXNlcklkO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgdGFrZVVzZXJJZGAgbWV0aG9kIGluc3RlYWQuXG4gICAqXG4gICAqIENhbGxzIHByb3ZpZGVkIGNhbGxiYWNrIHdpdGggY3VycmVudCB1c2VyIGlkLlxuICAgKlxuICAgKiBAcGFyYW0gY2IgY2FsbGJhY2sgZnVuY3Rpb24gdG8gaW52b2tlXG4gICAqL1xuICBwdWJsaWMgaW52b2tlV2l0aFVzZXJJZChjYjogKHVzZXJJZDogc3RyaW5nKSA9PiBhbnkpOiBTdWJzY3JpcHRpb24ge1xuICAgIHJldHVybiB0aGlzLmdldFVzZXJJZCgpXG4gICAgICAucGlwZSh0YWtlKDEpKVxuICAgICAgLnN1YnNjcmliZSgoaWQpID0+IGNiKGlkKSk7XG4gIH1cblxuICAvKipcbiAgICogVXRpbGl0eSBtZXRob2QgaWYgeW91IG5lZWQgdXNlcklkIHRvIHBlcmZvcm0gc2luZ2xlIGFjdGlvbiAoZWcuIGRpc3BhdGNoIGNhbGwgdG8gQVBJKS5cbiAgICpcbiAgICogQHBhcmFtIGxvZ2dlZEluIFNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRoZSBvYnNlcnZhYmxlIHRvIGVtaXQgaWQgb25seSBmb3IgbG9nZ2VkIGluIHVzZXIuIFRocm93cyBpbiBjYXNlIG9mIGFub255bW91cyB1c2VyLlxuICAgKlxuICAgKiBAcmV0dXJucyBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgb25jZSBhbmQgY29tcGxldGVzIHdpdGggdGhlIGxhc3QgdXNlcklkIHZhbHVlLlxuICAgKi9cbiAgcHVibGljIHRha2VVc2VySWQobG9nZ2VkSW4gPSBmYWxzZSk6IE9ic2VydmFibGU8c3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VXNlcklkKCkucGlwZShcbiAgICAgIHRha2UoMSksXG4gICAgICBtYXAoKHVzZXJJZCkgPT4ge1xuICAgICAgICBpZiAobG9nZ2VkSW4gJiYgdXNlcklkID09PSBPQ0NfVVNFUl9JRF9BTk9OWU1PVVMpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAnUmVxdWVzdGVkIHVzZXIgaWQgZm9yIGxvZ2dlZCB1c2VyIHdoaWxlIHVzZXIgaXMgbm90IGxvZ2dlZCBpbi4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdXNlcklkO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdXNlciBpZCB0byB0aGUgZGVmYXVsdCB2YWx1ZSBmb3IgbG9nZ2VkIG91dCB1c2VyLlxuICAgKi9cbiAgcHVibGljIGNsZWFyVXNlcklkKCk6IHZvaWQge1xuICAgIHRoaXMuc2V0VXNlcklkKE9DQ19VU0VSX0lEX0FOT05ZTU9VUyk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSB1c2VySWQgaXMgb2YgZW11bGF0ZWQgdXNlciB0eXBlLlxuICAgKi9cbiAgcHVibGljIGlzRW11bGF0ZWQoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VXNlcklkKCkucGlwZShcbiAgICAgIG1hcChcbiAgICAgICAgKHVzZXJJZCkgPT5cbiAgICAgICAgICB1c2VySWQgIT09IE9DQ19VU0VSX0lEX0FOT05ZTU9VUyAmJiB1c2VySWQgIT09IE9DQ19VU0VSX0lEX0NVUlJFTlRcbiAgICAgIClcbiAgICApO1xuICB9XG59XG4iXX0=