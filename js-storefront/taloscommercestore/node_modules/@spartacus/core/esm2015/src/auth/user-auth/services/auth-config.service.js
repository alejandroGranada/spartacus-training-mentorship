import { Injectable } from '@angular/core';
import { OccConfig } from '../../../occ/config/occ-config';
import { AuthConfig } from '../config/auth-config';
import { OAuthFlow } from '../models/oauth-flow';
import * as i0 from "@angular/core";
import * as i1 from "../config/auth-config";
import * as i2 from "../../../occ/config/occ-config";
/**
 * Utility service on top of the authorization config.
 * Provides handy defaults, when not everything is set in the configuration.
 * Use this service instead of direct configuration.
 */
export class AuthConfigService {
    constructor(authConfig, occConfig) {
        this.authConfig = authConfig;
        this.occConfig = occConfig;
    }
    /**
     * Utility to make access to authentication config easier.
     */
    get config() {
        var _a, _b;
        return (_b = (_a = this.authConfig) === null || _a === void 0 ? void 0 : _a.authentication) !== null && _b !== void 0 ? _b : {};
    }
    /**
     * Get client_id
     *
     * @return client_id
     */
    getClientId() {
        var _a;
        return (_a = this.config.client_id) !== null && _a !== void 0 ? _a : '';
    }
    /**
     * Get client_secret. OAuth server shouldn't require it from web apps (but Hybris OAuth server requires).
     *
     * @return client_secret
     */
    getClientSecret() {
        var _a;
        return (_a = this.config.client_secret) !== null && _a !== void 0 ? _a : '';
    }
    /**
     * Returns base url of the authorization server
     */
    getBaseUrl() {
        var _a, _b, _c, _d, _e;
        return ((_a = this.config.baseUrl) !== null && _a !== void 0 ? _a : ((_e = (_d = (_c = (_b = this.occConfig) === null || _b === void 0 ? void 0 : _b.backend) === null || _c === void 0 ? void 0 : _c.occ) === null || _d === void 0 ? void 0 : _d.baseUrl) !== null && _e !== void 0 ? _e : '') + '/authorizationserver');
    }
    /**
     * Returns endpoint for getting the auth token
     */
    getTokenEndpoint() {
        var _a;
        const tokenEndpoint = (_a = this.config.tokenEndpoint) !== null && _a !== void 0 ? _a : '';
        return this.prefixEndpoint(tokenEndpoint);
    }
    /**
     * Returns url for redirect to the authorization server to get token/code
     */
    getLoginUrl() {
        var _a;
        const loginUrl = (_a = this.config.loginUrl) !== null && _a !== void 0 ? _a : '';
        return this.prefixEndpoint(loginUrl);
    }
    /**
     * Returns endpoint for token revocation (both access and refresh token).
     */
    getRevokeEndpoint() {
        var _a;
        const revokeEndpoint = (_a = this.config.revokeEndpoint) !== null && _a !== void 0 ? _a : '';
        return this.prefixEndpoint(revokeEndpoint);
    }
    /**
     * Returns logout url to redirect to on logout.
     */
    getLogoutUrl() {
        var _a;
        const logoutUrl = (_a = this.config.logoutUrl) !== null && _a !== void 0 ? _a : '';
        return this.prefixEndpoint(logoutUrl);
    }
    /**
     * Returns userinfo endpoint of the OAuth server.
     */
    getUserinfoEndpoint() {
        var _a;
        const userinfoEndpoint = (_a = this.config.userinfoEndpoint) !== null && _a !== void 0 ? _a : '';
        return this.prefixEndpoint(userinfoEndpoint);
    }
    /**
     * Returns configuration specific for the angular-oauth2-oidc library.
     */
    getOAuthLibConfig() {
        var _a;
        return (_a = this.config.OAuthLibConfig) !== null && _a !== void 0 ? _a : {};
    }
    prefixEndpoint(endpoint) {
        let url = endpoint;
        if (!url.startsWith('/')) {
            url = '/' + url;
        }
        return `${this.getBaseUrl()}${url}`;
    }
    /**
     * Returns the type of the OAuth flow based on auth config.
     * Use when you have to perform particular action only in some of the OAuth flow scenarios.
     */
    getOAuthFlow() {
        var _a;
        const responseType = (_a = this.config.OAuthLibConfig) === null || _a === void 0 ? void 0 : _a.responseType;
        if (responseType) {
            const types = responseType.split(' ');
            if (types.includes('code')) {
                return OAuthFlow.AuthorizationCode;
            }
            else if (types.includes('token')) {
                return OAuthFlow.ImplicitFlow;
            }
            else {
                return OAuthFlow.ResourceOwnerPasswordFlow;
            }
        }
        return OAuthFlow.ResourceOwnerPasswordFlow;
    }
}
AuthConfigService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthConfigService_Factory() { return new AuthConfigService(i0.ɵɵinject(i1.AuthConfig), i0.ɵɵinject(i2.OccConfig)); }, token: AuthConfigService, providedIn: "root" });
AuthConfigService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
AuthConfigService.ctorParameters = () => [
    { type: AuthConfig },
    { type: OccConfig }
];
//# sourceMappingURL=data:application/json;base64,