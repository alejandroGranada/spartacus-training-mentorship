import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * Service serves storage role for AuthRedirectService.
 * Used by AuthStatePersistenceService to store redirect url for OAuth flows that rely on redirects.
 */
export class AuthRedirectStorageService {
    constructor() {
        this.redirectUrl$ = new BehaviorSubject(undefined);
    }
    /**
     * Get redirect url after logging in.
     *
     * @returns observable with the redirect url as string
     */
    getRedirectUrl() {
        return this.redirectUrl$;
    }
    /**
     * Set url to redirect to after login.
     *
     * @param redirectUrl
     */
    setRedirectUrl(redirectUrl) {
        this.redirectUrl$.next(redirectUrl);
    }
}
AuthRedirectStorageService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthRedirectStorageService_Factory() { return new AuthRedirectStorageService(); }, token: AuthRedirectStorageService, providedIn: "root" });
AuthRedirectStorageService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
AuthRedirectStorageService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1yZWRpcmVjdC1zdG9yYWdlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvUGF0cnlrL0Rlc2t0b3Avc3BhcnRhY3VzL3Byb2plY3RzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvYXV0aC91c2VyLWF1dGgvc2VydmljZXMvYXV0aC1yZWRpcmVjdC1zdG9yYWdlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZUFBZSxFQUFjLE1BQU0sTUFBTSxDQUFDOztBQUVuRDs7O0dBR0c7QUFJSCxNQUFNLE9BQU8sMEJBQTBCO0lBQ3JDO1FBRVEsaUJBQVksR0FBdUIsSUFBSSxlQUFlLENBQzVELFNBQVMsQ0FDVixDQUFDO0lBSmEsQ0FBQztJQU1oQjs7OztPQUlHO0lBQ0gsY0FBYztRQUNaLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILGNBQWMsQ0FBQyxXQUFtQjtRQUMvQixJQUFJLENBQUMsWUFBd0MsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDbkUsQ0FBQzs7OztZQTFCRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBTZXJ2aWNlIHNlcnZlcyBzdG9yYWdlIHJvbGUgZm9yIEF1dGhSZWRpcmVjdFNlcnZpY2UuXG4gKiBVc2VkIGJ5IEF1dGhTdGF0ZVBlcnNpc3RlbmNlU2VydmljZSB0byBzdG9yZSByZWRpcmVjdCB1cmwgZm9yIE9BdXRoIGZsb3dzIHRoYXQgcmVseSBvbiByZWRpcmVjdHMuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBBdXRoUmVkaXJlY3RTdG9yYWdlU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBwcml2YXRlIHJlZGlyZWN0VXJsJDogT2JzZXJ2YWJsZTxzdHJpbmc+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxzdHJpbmc+KFxuICAgIHVuZGVmaW5lZFxuICApO1xuXG4gIC8qKlxuICAgKiBHZXQgcmVkaXJlY3QgdXJsIGFmdGVyIGxvZ2dpbmcgaW4uXG4gICAqXG4gICAqIEByZXR1cm5zIG9ic2VydmFibGUgd2l0aCB0aGUgcmVkaXJlY3QgdXJsIGFzIHN0cmluZ1xuICAgKi9cbiAgZ2V0UmVkaXJlY3RVcmwoKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5yZWRpcmVjdFVybCQ7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHVybCB0byByZWRpcmVjdCB0byBhZnRlciBsb2dpbi5cbiAgICpcbiAgICogQHBhcmFtIHJlZGlyZWN0VXJsXG4gICAqL1xuICBzZXRSZWRpcmVjdFVybChyZWRpcmVjdFVybDogc3RyaW5nKTogdm9pZCB7XG4gICAgKHRoaXMucmVkaXJlY3RVcmwkIGFzIEJlaGF2aW9yU3ViamVjdDxzdHJpbmc+KS5uZXh0KHJlZGlyZWN0VXJsKTtcbiAgfVxufVxuIl19