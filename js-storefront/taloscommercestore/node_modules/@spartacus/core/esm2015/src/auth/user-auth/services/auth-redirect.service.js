import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { take } from 'rxjs/operators';
import { RoutingService } from '../../../routing/facade/routing.service';
import { AuthRedirectStorageService } from './auth-redirect-storage.service';
import * as i0 from "@angular/core";
import * as i1 from "../../../routing/facade/routing.service";
import * as i2 from "@angular/router";
import * as i3 from "./auth-redirect-storage.service";
/**
 * Responsible for saving last accessed page (or attempted) before login and for redirecting to that page after login.
 */
export class AuthRedirectService {
    /**
     * This service is responsible for redirecting to the last page before authorization. "The last page" can be:
     * 1. Just the previously opened page; or
     * 2. The page that we just tried to open, but AuthGuard cancelled it
     *
     * For example:
     * 1. The user opens the product page, then clicks /login link and signs in
     *    -> Then we should redirect to the product page; or
     * 2. The user opens the product page, then he clicks /my-account link,
     *    but is automatically redirected to the login page by the AuthGuard, and he signs in
     *    -> Then we should redirect to the my-account page, not the product page
     */
    constructor(routing, router, authRedirectStorageService) {
        this.routing = routing;
        this.router = router;
        this.authRedirectStorageService = authRedirectStorageService;
        this.ignoredUrls = new Set();
    }
    /**
     * Redirect to saved url (homepage if nothing is saved).
     */
    redirect() {
        this.authRedirectStorageService
            .getRedirectUrl()
            .pipe(take(1))
            .subscribe((redirectUrl) => {
            if (redirectUrl === undefined) {
                this.routing.go('/');
            }
            else {
                this.routing.goByUrl(redirectUrl);
            }
            this.authRedirectStorageService.setRedirectUrl(undefined);
            this.lastAuthGuardNavigation = undefined;
        });
    }
    /**
     * Saves url of a page that user wanted to access, but wasn't yet logged in.
     */
    reportAuthGuard() {
        const { url, navigationId } = this.getCurrentNavigation();
        this.lastAuthGuardNavigation = { url, navigationId };
        this.authRedirectStorageService.setRedirectUrl(url);
    }
    /**
     * Saves url of a page that was accessed before entering a page only for not auth users.
     */
    reportNotAuthGuard() {
        const { url, initialUrl, navigationId } = this.getCurrentNavigation();
        this.ignoredUrls.add(url);
        // Don't save redirect url if you've already come from page with NotAuthGuard (i.e. user has come from login to register)
        if (!this.ignoredUrls.has(initialUrl)) {
            // We compare the navigation id to find out if the url cancelled by AuthGuard (i.e. my-account) is more recent
            // than the last opened page
            if (!this.lastAuthGuardNavigation ||
                this.lastAuthGuardNavigation.navigationId < navigationId - 1) {
                this.authRedirectStorageService.setRedirectUrl(initialUrl);
                this.lastAuthGuardNavigation = undefined;
            }
        }
    }
    getCurrentNavigation() {
        const initialUrl = this.router.url;
        const navigation = this.router.getCurrentNavigation();
        const url = this.router.serializeUrl(navigation.finalUrl);
        return {
            navigationId: navigation.id,
            url,
            initialUrl,
        };
    }
}
AuthRedirectService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthRedirectService_Factory() { return new AuthRedirectService(i0.ɵɵinject(i1.RoutingService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.AuthRedirectStorageService)); }, token: AuthRedirectService, providedIn: "root" });
AuthRedirectService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
AuthRedirectService.ctorParameters = () => [
    { type: RoutingService },
    { type: Router },
    { type: AuthRedirectStorageService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1yZWRpcmVjdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9wcm9qZWN0cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL2F1dGgvdXNlci1hdXRoL3NlcnZpY2VzL2F1dGgtcmVkaXJlY3Quc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDOzs7OztBQUU3RTs7R0FFRztBQUlILE1BQU0sT0FBTyxtQkFBbUI7SUFDOUI7Ozs7Ozs7Ozs7O09BV0c7SUFDSCxZQUNZLE9BQXVCLEVBQ3ZCLE1BQWMsRUFDZCwwQkFBc0Q7UUFGdEQsWUFBTyxHQUFQLE9BQU8sQ0FBZ0I7UUFDdkIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLCtCQUEwQixHQUExQiwwQkFBMEIsQ0FBNEI7UUFHMUQsZ0JBQVcsR0FBRyxJQUFJLEdBQUcsRUFBVSxDQUFDO0lBRnJDLENBQUM7SUFRSjs7T0FFRztJQUNILFFBQVE7UUFDTixJQUFJLENBQUMsMEJBQTBCO2FBQzVCLGNBQWMsRUFBRTthQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2IsU0FBUyxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFDekIsSUFBSSxXQUFXLEtBQUssU0FBUyxFQUFFO2dCQUM3QixJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUN0QjtpQkFBTTtnQkFDTCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQzthQUNuQztZQUNELElBQUksQ0FBQywwQkFBMEIsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7WUFFMUQsSUFBSSxDQUFDLHVCQUF1QixHQUFHLFNBQVMsQ0FBQztRQUMzQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRDs7T0FFRztJQUNILGVBQWU7UUFDYixNQUFNLEVBQUUsR0FBRyxFQUFFLFlBQVksRUFBRSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1FBQzFELElBQUksQ0FBQyx1QkFBdUIsR0FBRyxFQUFFLEdBQUcsRUFBRSxZQUFZLEVBQUUsQ0FBQztRQUNyRCxJQUFJLENBQUMsMEJBQTBCLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRDs7T0FFRztJQUNILGtCQUFrQjtRQUNoQixNQUFNLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsR0FBRyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztRQUV0RSxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUUxQix5SEFBeUg7UUFDekgsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ3JDLDhHQUE4RztZQUM5Ryw0QkFBNEI7WUFDNUIsSUFDRSxDQUFDLElBQUksQ0FBQyx1QkFBdUI7Z0JBQzdCLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxZQUFZLEdBQUcsWUFBWSxHQUFHLENBQUMsRUFDNUQ7Z0JBQ0EsSUFBSSxDQUFDLDBCQUEwQixDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFFM0QsSUFBSSxDQUFDLHVCQUF1QixHQUFHLFNBQVMsQ0FBQzthQUMxQztTQUNGO0lBQ0gsQ0FBQztJQUVPLG9CQUFvQjtRQUsxQixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUNuQyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFDdEQsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFELE9BQU87WUFDTCxZQUFZLEVBQUUsVUFBVSxDQUFDLEVBQUU7WUFDM0IsR0FBRztZQUNILFVBQVU7U0FDWCxDQUFDO0lBQ0osQ0FBQzs7OztZQTVGRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7OztZQVJRLGNBQWM7WUFGZCxNQUFNO1lBR04sMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBSb3V0aW5nU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3JvdXRpbmcvZmFjYWRlL3JvdXRpbmcuc2VydmljZSc7XG5pbXBvcnQgeyBBdXRoUmVkaXJlY3RTdG9yYWdlU2VydmljZSB9IGZyb20gJy4vYXV0aC1yZWRpcmVjdC1zdG9yYWdlLnNlcnZpY2UnO1xuXG4vKipcbiAqIFJlc3BvbnNpYmxlIGZvciBzYXZpbmcgbGFzdCBhY2Nlc3NlZCBwYWdlIChvciBhdHRlbXB0ZWQpIGJlZm9yZSBsb2dpbiBhbmQgZm9yIHJlZGlyZWN0aW5nIHRvIHRoYXQgcGFnZSBhZnRlciBsb2dpbi5cbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIEF1dGhSZWRpcmVjdFNlcnZpY2Uge1xuICAvKipcbiAgICogVGhpcyBzZXJ2aWNlIGlzIHJlc3BvbnNpYmxlIGZvciByZWRpcmVjdGluZyB0byB0aGUgbGFzdCBwYWdlIGJlZm9yZSBhdXRob3JpemF0aW9uLiBcIlRoZSBsYXN0IHBhZ2VcIiBjYW4gYmU6XG4gICAqIDEuIEp1c3QgdGhlIHByZXZpb3VzbHkgb3BlbmVkIHBhZ2U7IG9yXG4gICAqIDIuIFRoZSBwYWdlIHRoYXQgd2UganVzdCB0cmllZCB0byBvcGVuLCBidXQgQXV0aEd1YXJkIGNhbmNlbGxlZCBpdFxuICAgKlxuICAgKiBGb3IgZXhhbXBsZTpcbiAgICogMS4gVGhlIHVzZXIgb3BlbnMgdGhlIHByb2R1Y3QgcGFnZSwgdGhlbiBjbGlja3MgL2xvZ2luIGxpbmsgYW5kIHNpZ25zIGluXG4gICAqICAgIC0+IFRoZW4gd2Ugc2hvdWxkIHJlZGlyZWN0IHRvIHRoZSBwcm9kdWN0IHBhZ2U7IG9yXG4gICAqIDIuIFRoZSB1c2VyIG9wZW5zIHRoZSBwcm9kdWN0IHBhZ2UsIHRoZW4gaGUgY2xpY2tzIC9teS1hY2NvdW50IGxpbmssXG4gICAqICAgIGJ1dCBpcyBhdXRvbWF0aWNhbGx5IHJlZGlyZWN0ZWQgdG8gdGhlIGxvZ2luIHBhZ2UgYnkgdGhlIEF1dGhHdWFyZCwgYW5kIGhlIHNpZ25zIGluXG4gICAqICAgIC0+IFRoZW4gd2Ugc2hvdWxkIHJlZGlyZWN0IHRvIHRoZSBteS1hY2NvdW50IHBhZ2UsIG5vdCB0aGUgcHJvZHVjdCBwYWdlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgcm91dGluZzogUm91dGluZ1NlcnZpY2UsXG4gICAgcHJvdGVjdGVkIHJvdXRlcjogUm91dGVyLFxuICAgIHByb3RlY3RlZCBhdXRoUmVkaXJlY3RTdG9yYWdlU2VydmljZTogQXV0aFJlZGlyZWN0U3RvcmFnZVNlcnZpY2VcbiAgKSB7fVxuXG4gIHByaXZhdGUgaWdub3JlZFVybHMgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgcHJpdmF0ZSBsYXN0QXV0aEd1YXJkTmF2aWdhdGlvbjoge1xuICAgIHVybDogc3RyaW5nO1xuICAgIG5hdmlnYXRpb25JZDogbnVtYmVyO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZWRpcmVjdCB0byBzYXZlZCB1cmwgKGhvbWVwYWdlIGlmIG5vdGhpbmcgaXMgc2F2ZWQpLlxuICAgKi9cbiAgcmVkaXJlY3QoKSB7XG4gICAgdGhpcy5hdXRoUmVkaXJlY3RTdG9yYWdlU2VydmljZVxuICAgICAgLmdldFJlZGlyZWN0VXJsKClcbiAgICAgIC5waXBlKHRha2UoMSkpXG4gICAgICAuc3Vic2NyaWJlKChyZWRpcmVjdFVybCkgPT4ge1xuICAgICAgICBpZiAocmVkaXJlY3RVcmwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXMucm91dGluZy5nbygnLycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucm91dGluZy5nb0J5VXJsKHJlZGlyZWN0VXJsKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmF1dGhSZWRpcmVjdFN0b3JhZ2VTZXJ2aWNlLnNldFJlZGlyZWN0VXJsKHVuZGVmaW5lZCk7XG5cbiAgICAgICAgdGhpcy5sYXN0QXV0aEd1YXJkTmF2aWdhdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNhdmVzIHVybCBvZiBhIHBhZ2UgdGhhdCB1c2VyIHdhbnRlZCB0byBhY2Nlc3MsIGJ1dCB3YXNuJ3QgeWV0IGxvZ2dlZCBpbi5cbiAgICovXG4gIHJlcG9ydEF1dGhHdWFyZCgpIHtcbiAgICBjb25zdCB7IHVybCwgbmF2aWdhdGlvbklkIH0gPSB0aGlzLmdldEN1cnJlbnROYXZpZ2F0aW9uKCk7XG4gICAgdGhpcy5sYXN0QXV0aEd1YXJkTmF2aWdhdGlvbiA9IHsgdXJsLCBuYXZpZ2F0aW9uSWQgfTtcbiAgICB0aGlzLmF1dGhSZWRpcmVjdFN0b3JhZ2VTZXJ2aWNlLnNldFJlZGlyZWN0VXJsKHVybCk7XG4gIH1cblxuICAvKipcbiAgICogU2F2ZXMgdXJsIG9mIGEgcGFnZSB0aGF0IHdhcyBhY2Nlc3NlZCBiZWZvcmUgZW50ZXJpbmcgYSBwYWdlIG9ubHkgZm9yIG5vdCBhdXRoIHVzZXJzLlxuICAgKi9cbiAgcmVwb3J0Tm90QXV0aEd1YXJkKCkge1xuICAgIGNvbnN0IHsgdXJsLCBpbml0aWFsVXJsLCBuYXZpZ2F0aW9uSWQgfSA9IHRoaXMuZ2V0Q3VycmVudE5hdmlnYXRpb24oKTtcblxuICAgIHRoaXMuaWdub3JlZFVybHMuYWRkKHVybCk7XG5cbiAgICAvLyBEb24ndCBzYXZlIHJlZGlyZWN0IHVybCBpZiB5b3UndmUgYWxyZWFkeSBjb21lIGZyb20gcGFnZSB3aXRoIE5vdEF1dGhHdWFyZCAoaS5lLiB1c2VyIGhhcyBjb21lIGZyb20gbG9naW4gdG8gcmVnaXN0ZXIpXG4gICAgaWYgKCF0aGlzLmlnbm9yZWRVcmxzLmhhcyhpbml0aWFsVXJsKSkge1xuICAgICAgLy8gV2UgY29tcGFyZSB0aGUgbmF2aWdhdGlvbiBpZCB0byBmaW5kIG91dCBpZiB0aGUgdXJsIGNhbmNlbGxlZCBieSBBdXRoR3VhcmQgKGkuZS4gbXktYWNjb3VudCkgaXMgbW9yZSByZWNlbnRcbiAgICAgIC8vIHRoYW4gdGhlIGxhc3Qgb3BlbmVkIHBhZ2VcbiAgICAgIGlmIChcbiAgICAgICAgIXRoaXMubGFzdEF1dGhHdWFyZE5hdmlnYXRpb24gfHxcbiAgICAgICAgdGhpcy5sYXN0QXV0aEd1YXJkTmF2aWdhdGlvbi5uYXZpZ2F0aW9uSWQgPCBuYXZpZ2F0aW9uSWQgLSAxXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5hdXRoUmVkaXJlY3RTdG9yYWdlU2VydmljZS5zZXRSZWRpcmVjdFVybChpbml0aWFsVXJsKTtcblxuICAgICAgICB0aGlzLmxhc3RBdXRoR3VhcmROYXZpZ2F0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q3VycmVudE5hdmlnYXRpb24oKToge1xuICAgIG5hdmlnYXRpb25JZDogbnVtYmVyO1xuICAgIHVybDogc3RyaW5nO1xuICAgIGluaXRpYWxVcmw6IHN0cmluZztcbiAgfSB7XG4gICAgY29uc3QgaW5pdGlhbFVybCA9IHRoaXMucm91dGVyLnVybDtcbiAgICBjb25zdCBuYXZpZ2F0aW9uID0gdGhpcy5yb3V0ZXIuZ2V0Q3VycmVudE5hdmlnYXRpb24oKTtcbiAgICBjb25zdCB1cmwgPSB0aGlzLnJvdXRlci5zZXJpYWxpemVVcmwobmF2aWdhdGlvbi5maW5hbFVybCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hdmlnYXRpb25JZDogbmF2aWdhdGlvbi5pZCxcbiAgICAgIHVybCxcbiAgICAgIGluaXRpYWxVcmwsXG4gICAgfTtcbiAgfVxufVxuIl19