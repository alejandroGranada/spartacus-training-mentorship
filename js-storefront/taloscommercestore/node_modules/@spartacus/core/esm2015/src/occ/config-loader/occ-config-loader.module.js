import { NgModule } from '@angular/core';
import { CONFIG_INITIALIZER, } from '../../config/config-initializer/config-initializer';
import { FeatureConfigService } from '../../features-config/services/feature-config.service';
import { SiteContextConfig } from '../../site-context/config/site-context-config';
import { BASE_SITE_CONTEXT_ID } from '../../site-context/providers/context-ids';
import { OccConfigLoaderService } from './occ-config-loader.service';
/**
 * Initializes the Spartacus config asynchronously basing on the external config
 *
 * @deprecated since 3.2 - use `SiteContextConfigInitializer` instead
 * Not a public API though.
 */
// TODO(#11515): drop it 4.0
export function initConfig(configLoader, config, featureConfigService) {
    if (featureConfigService.isLevel('3.2')) {
        return null;
    }
    /**
     * Load config for `context` from backend only when there is no static config for `context.baseSite`
     */
    if (!config.context || !config.context[BASE_SITE_CONTEXT_ID]) {
        return {
            scopes: ['context', 'i18n.fallbackLang'],
            configFactory: () => configLoader.loadConfig(),
        };
    }
    return null;
}
/**
 * Re-provides the external config chunk given before Angular bootstrap
 *
 * @deprecated since 3.2, use `SiteContextConfigInitializer` instead
 */
// TODO(#11515): drop it 4.0
export class OccConfigLoaderModule {
    static forRoot() {
        return {
            ngModule: OccConfigLoaderModule,
            providers: [
                {
                    provide: CONFIG_INITIALIZER,
                    useFactory: initConfig,
                    deps: [
                        OccConfigLoaderService,
                        SiteContextConfig,
                        FeatureConfigService,
                    ],
                    multi: true,
                },
            ],
        };
    }
}
OccConfigLoaderModule.decorators = [
    { type: NgModule }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2NjLWNvbmZpZy1sb2FkZXIubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9wcm9qZWN0cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL29jYy9jb25maWctbG9hZGVyL29jYy1jb25maWctbG9hZGVyLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQXVCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBRUwsa0JBQWtCLEdBQ25CLE1BQU0sb0RBQW9ELENBQUM7QUFDNUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdURBQXVELENBQUM7QUFDN0YsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFDbEYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDaEYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFckU7Ozs7O0dBS0c7QUFDSCw0QkFBNEI7QUFDNUIsTUFBTSxVQUFVLFVBQVUsQ0FDeEIsWUFBb0MsRUFDcEMsTUFBeUIsRUFDekIsb0JBQTBDO0lBRTFDLElBQUksb0JBQW9CLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFDRDs7T0FFRztJQUNILElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFO1FBQzVELE9BQU87WUFDTCxNQUFNLEVBQUUsQ0FBQyxTQUFTLEVBQUUsbUJBQW1CLENBQUM7WUFDeEMsYUFBYSxFQUFFLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUU7U0FDL0MsQ0FBQztLQUNIO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILDRCQUE0QjtBQUU1QixNQUFNLE9BQU8scUJBQXFCO0lBQ2hDLE1BQU0sQ0FBQyxPQUFPO1FBQ1osT0FBTztZQUNMLFFBQVEsRUFBRSxxQkFBcUI7WUFDL0IsU0FBUyxFQUFFO2dCQUNUO29CQUNFLE9BQU8sRUFBRSxrQkFBa0I7b0JBQzNCLFVBQVUsRUFBRSxVQUFVO29CQUN0QixJQUFJLEVBQUU7d0JBQ0osc0JBQXNCO3dCQUN0QixpQkFBaUI7d0JBQ2pCLG9CQUFvQjtxQkFDckI7b0JBQ0QsS0FBSyxFQUFFLElBQUk7aUJBQ1o7YUFDRjtTQUNGLENBQUM7SUFDSixDQUFDOzs7WUFsQkYsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBDb25maWdJbml0aWFsaXplcixcbiAgQ09ORklHX0lOSVRJQUxJWkVSLFxufSBmcm9tICcuLi8uLi9jb25maWcvY29uZmlnLWluaXRpYWxpemVyL2NvbmZpZy1pbml0aWFsaXplcic7XG5pbXBvcnQgeyBGZWF0dXJlQ29uZmlnU2VydmljZSB9IGZyb20gJy4uLy4uL2ZlYXR1cmVzLWNvbmZpZy9zZXJ2aWNlcy9mZWF0dXJlLWNvbmZpZy5zZXJ2aWNlJztcbmltcG9ydCB7IFNpdGVDb250ZXh0Q29uZmlnIH0gZnJvbSAnLi4vLi4vc2l0ZS1jb250ZXh0L2NvbmZpZy9zaXRlLWNvbnRleHQtY29uZmlnJztcbmltcG9ydCB7IEJBU0VfU0lURV9DT05URVhUX0lEIH0gZnJvbSAnLi4vLi4vc2l0ZS1jb250ZXh0L3Byb3ZpZGVycy9jb250ZXh0LWlkcyc7XG5pbXBvcnQgeyBPY2NDb25maWdMb2FkZXJTZXJ2aWNlIH0gZnJvbSAnLi9vY2MtY29uZmlnLWxvYWRlci5zZXJ2aWNlJztcblxuLyoqXG4gKiBJbml0aWFsaXplcyB0aGUgU3BhcnRhY3VzIGNvbmZpZyBhc3luY2hyb25vdXNseSBiYXNpbmcgb24gdGhlIGV4dGVybmFsIGNvbmZpZ1xuICpcbiAqIEBkZXByZWNhdGVkIHNpbmNlIDMuMiAtIHVzZSBgU2l0ZUNvbnRleHRDb25maWdJbml0aWFsaXplcmAgaW5zdGVhZFxuICogTm90IGEgcHVibGljIEFQSSB0aG91Z2guXG4gKi9cbi8vIFRPRE8oIzExNTE1KTogZHJvcCBpdCA0LjBcbmV4cG9ydCBmdW5jdGlvbiBpbml0Q29uZmlnKFxuICBjb25maWdMb2FkZXI6IE9jY0NvbmZpZ0xvYWRlclNlcnZpY2UsXG4gIGNvbmZpZzogU2l0ZUNvbnRleHRDb25maWcsXG4gIGZlYXR1cmVDb25maWdTZXJ2aWNlOiBGZWF0dXJlQ29uZmlnU2VydmljZVxuKTogQ29uZmlnSW5pdGlhbGl6ZXIgfCBudWxsIHtcbiAgaWYgKGZlYXR1cmVDb25maWdTZXJ2aWNlLmlzTGV2ZWwoJzMuMicpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIExvYWQgY29uZmlnIGZvciBgY29udGV4dGAgZnJvbSBiYWNrZW5kIG9ubHkgd2hlbiB0aGVyZSBpcyBubyBzdGF0aWMgY29uZmlnIGZvciBgY29udGV4dC5iYXNlU2l0ZWBcbiAgICovXG4gIGlmICghY29uZmlnLmNvbnRleHQgfHwgIWNvbmZpZy5jb250ZXh0W0JBU0VfU0lURV9DT05URVhUX0lEXSkge1xuICAgIHJldHVybiB7XG4gICAgICBzY29wZXM6IFsnY29udGV4dCcsICdpMThuLmZhbGxiYWNrTGFuZyddLFxuICAgICAgY29uZmlnRmFjdG9yeTogKCkgPT4gY29uZmlnTG9hZGVyLmxvYWRDb25maWcoKSxcbiAgICB9O1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIFJlLXByb3ZpZGVzIHRoZSBleHRlcm5hbCBjb25maWcgY2h1bmsgZ2l2ZW4gYmVmb3JlIEFuZ3VsYXIgYm9vdHN0cmFwXG4gKlxuICogQGRlcHJlY2F0ZWQgc2luY2UgMy4yLCB1c2UgYFNpdGVDb250ZXh0Q29uZmlnSW5pdGlhbGl6ZXJgIGluc3RlYWRcbiAqL1xuLy8gVE9ETygjMTE1MTUpOiBkcm9wIGl0IDQuMFxuQE5nTW9kdWxlKClcbmV4cG9ydCBjbGFzcyBPY2NDb25maWdMb2FkZXJNb2R1bGUge1xuICBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPE9jY0NvbmZpZ0xvYWRlck1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogT2NjQ29uZmlnTG9hZGVyTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBDT05GSUdfSU5JVElBTElaRVIsXG4gICAgICAgICAgdXNlRmFjdG9yeTogaW5pdENvbmZpZyxcbiAgICAgICAgICBkZXBzOiBbXG4gICAgICAgICAgICBPY2NDb25maWdMb2FkZXJTZXJ2aWNlLFxuICAgICAgICAgICAgU2l0ZUNvbnRleHRDb25maWcsXG4gICAgICAgICAgICBGZWF0dXJlQ29uZmlnU2VydmljZSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9O1xuICB9XG59XG4iXX0=