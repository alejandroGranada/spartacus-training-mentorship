import { Injectable } from '@angular/core';
import { OccConfig } from '../../../config/occ-config';
import * as i0 from "@angular/core";
import * as i1 from "../../../config/occ-config";
export class ProductNameNormalizer {
    constructor(config) {
        this.config = config;
        /**
         * A pretty url should not have any encoded characters, which is why we replace
         * the following character in the product title.
         *
         * See https://developers.google.com/maps/documentation/urls/url-encoding for more
         * information on the characters.
         */
        this.reservedSlugCharacters = ` !*'();:@&=+$,/?%#[]`;
        this.slugChar = '-';
        // created the regex only once
        this.slugRegex = new RegExp(`[${this.reservedSlugCharacters.split('').join('\\')}]`, 'g');
        this.sanitizeMultipleSlugChars = new RegExp(`${this.slugChar}+`, 'g');
    }
    convert(source, target) {
        target = target !== null && target !== void 0 ? target : Object.assign({}, source);
        if (source.name) {
            target.name = this.normalize(source.name);
            target.slug = this.normalizeSlug(source.name);
            target.nameHtml = source.name;
        }
        return target;
    }
    /**
     * Sanitizes the name so that the name doesn't contain html elements.
     */
    normalize(name) {
        return name.replace(/<[^>]*>/g, '');
    }
    /**
     * Provides a title slug for the pretty URL.
     *
     * The name is sanitized from html, trimmed, converted to lowercase and special characters
     * which are encoded are replaced by the slug char (dash by default).
     */
    normalizeSlug(name) {
        return this.normalize(name)
            .trim()
            .toLowerCase()
            .replace(this.slugRegex, this.slugChar)
            .replace(this.sanitizeMultipleSlugChars, this.slugChar);
    }
}
ProductNameNormalizer.ɵprov = i0.ɵɵdefineInjectable({ factory: function ProductNameNormalizer_Factory() { return new ProductNameNormalizer(i0.ɵɵinject(i1.OccConfig)); }, token: ProductNameNormalizer, providedIn: "root" });
ProductNameNormalizer.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
ProductNameNormalizer.ctorParameters = () => [
    { type: OccConfig }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1uYW1lLW5vcm1hbGl6ZXIuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvUGF0cnlrL0Rlc2t0b3Avc3BhcnRhY3VzL3Byb2plY3RzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvb2NjL2FkYXB0ZXJzL3Byb2R1Y3QvY29udmVydGVycy9wcm9kdWN0LW5hbWUtbm9ybWFsaXplci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7O0FBSXZELE1BQU0sT0FBTyxxQkFBcUI7SUFDaEMsWUFBc0IsTUFBaUI7UUFBakIsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQW9CdkM7Ozs7OztXQU1HO1FBQ08sMkJBQXNCLEdBQUcsc0JBQXNCLENBQUM7UUFDaEQsYUFBUSxHQUFHLEdBQUcsQ0FBQztRQUV6Qiw4QkFBOEI7UUFDdEIsY0FBUyxHQUFHLElBQUksTUFBTSxDQUM1QixJQUFJLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQ3ZELEdBQUcsQ0FDSixDQUFDO1FBQ00sOEJBQXlCLEdBQUcsSUFBSSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFuQy9CLENBQUM7SUFFM0MsT0FBTyxDQUFDLE1BQW1CLEVBQUUsTUFBZ0I7UUFDM0MsTUFBTSxHQUFHLE1BQU0sYUFBTixNQUFNLGNBQU4sTUFBTSxxQkFBVyxNQUF1QyxDQUFFLENBQUM7UUFFcEUsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFO1lBQ2YsTUFBTSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMxQyxNQUFNLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzlDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztTQUMvQjtRQUNELE9BQU8sTUFBaUIsQ0FBQztJQUMzQixDQUFDO0lBRUQ7O09BRUc7SUFDTyxTQUFTLENBQUMsSUFBWTtRQUM5QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFtQkQ7Ozs7O09BS0c7SUFDTyxhQUFhLENBQUMsSUFBWTtRQUNsQyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO2FBQ3hCLElBQUksRUFBRTthQUNOLFdBQVcsRUFBRTthQUNiLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUM7YUFDdEMsT0FBTyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDNUQsQ0FBQzs7OztZQW5ERixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7WUFIekIsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFByb2R1Y3QgfSBmcm9tICcuLi8uLi8uLi8uLi9tb2RlbC9wcm9kdWN0Lm1vZGVsJztcbmltcG9ydCB7IENvbnZlcnRlciB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWwvY29udmVydGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgT2NjQ29uZmlnIH0gZnJvbSAnLi4vLi4vLi4vY29uZmlnL29jYy1jb25maWcnO1xuaW1wb3J0IHsgT2NjIH0gZnJvbSAnLi4vLi4vLi4vb2NjLW1vZGVscy9vY2MubW9kZWxzJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBQcm9kdWN0TmFtZU5vcm1hbGl6ZXIgaW1wbGVtZW50cyBDb252ZXJ0ZXI8T2NjLlByb2R1Y3QsIFByb2R1Y3Q+IHtcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGNvbmZpZzogT2NjQ29uZmlnKSB7fVxuXG4gIGNvbnZlcnQoc291cmNlOiBPY2MuUHJvZHVjdCwgdGFyZ2V0PzogUHJvZHVjdCk6IFByb2R1Y3Qge1xuICAgIHRhcmdldCA9IHRhcmdldCA/PyB7IC4uLigoc291cmNlIGFzIHVua25vd24pIGFzIFBhcnRpYWw8UHJvZHVjdD4pIH07XG5cbiAgICBpZiAoc291cmNlLm5hbWUpIHtcbiAgICAgIHRhcmdldC5uYW1lID0gdGhpcy5ub3JtYWxpemUoc291cmNlLm5hbWUpO1xuICAgICAgdGFyZ2V0LnNsdWcgPSB0aGlzLm5vcm1hbGl6ZVNsdWcoc291cmNlLm5hbWUpO1xuICAgICAgdGFyZ2V0Lm5hbWVIdG1sID0gc291cmNlLm5hbWU7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQgYXMgUHJvZHVjdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTYW5pdGl6ZXMgdGhlIG5hbWUgc28gdGhhdCB0aGUgbmFtZSBkb2Vzbid0IGNvbnRhaW4gaHRtbCBlbGVtZW50cy5cbiAgICovXG4gIHByb3RlY3RlZCBub3JtYWxpemUobmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gbmFtZS5yZXBsYWNlKC88W14+XSo+L2csICcnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHByZXR0eSB1cmwgc2hvdWxkIG5vdCBoYXZlIGFueSBlbmNvZGVkIGNoYXJhY3RlcnMsIHdoaWNoIGlzIHdoeSB3ZSByZXBsYWNlXG4gICAqIHRoZSBmb2xsb3dpbmcgY2hhcmFjdGVyIGluIHRoZSBwcm9kdWN0IHRpdGxlLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vbWFwcy9kb2N1bWVudGF0aW9uL3VybHMvdXJsLWVuY29kaW5nIGZvciBtb3JlXG4gICAqIGluZm9ybWF0aW9uIG9uIHRoZSBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgcHJvdGVjdGVkIHJlc2VydmVkU2x1Z0NoYXJhY3RlcnMgPSBgICEqJygpOzpAJj0rJCwvPyUjW11gO1xuICBwcm90ZWN0ZWQgc2x1Z0NoYXIgPSAnLSc7XG5cbiAgLy8gY3JlYXRlZCB0aGUgcmVnZXggb25seSBvbmNlXG4gIHByaXZhdGUgc2x1Z1JlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICBgWyR7dGhpcy5yZXNlcnZlZFNsdWdDaGFyYWN0ZXJzLnNwbGl0KCcnKS5qb2luKCdcXFxcJyl9XWAsXG4gICAgJ2cnXG4gICk7XG4gIHByaXZhdGUgc2FuaXRpemVNdWx0aXBsZVNsdWdDaGFycyA9IG5ldyBSZWdFeHAoYCR7dGhpcy5zbHVnQ2hhcn0rYCwgJ2cnKTtcblxuICAvKipcbiAgICogUHJvdmlkZXMgYSB0aXRsZSBzbHVnIGZvciB0aGUgcHJldHR5IFVSTC5cbiAgICpcbiAgICogVGhlIG5hbWUgaXMgc2FuaXRpemVkIGZyb20gaHRtbCwgdHJpbW1lZCwgY29udmVydGVkIHRvIGxvd2VyY2FzZSBhbmQgc3BlY2lhbCBjaGFyYWN0ZXJzXG4gICAqIHdoaWNoIGFyZSBlbmNvZGVkIGFyZSByZXBsYWNlZCBieSB0aGUgc2x1ZyBjaGFyIChkYXNoIGJ5IGRlZmF1bHQpLlxuICAgKi9cbiAgcHJvdGVjdGVkIG5vcm1hbGl6ZVNsdWcobmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5ub3JtYWxpemUobmFtZSlcbiAgICAgIC50cmltKClcbiAgICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgICAucmVwbGFjZSh0aGlzLnNsdWdSZWdleCwgdGhpcy5zbHVnQ2hhcilcbiAgICAgIC5yZXBsYWNlKHRoaXMuc2FuaXRpemVNdWx0aXBsZVNsdWdDaGFycywgdGhpcy5zbHVnQ2hhcik7XG4gIH1cbn1cbiJdfQ==