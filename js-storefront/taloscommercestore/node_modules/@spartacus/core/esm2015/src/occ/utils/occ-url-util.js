/**
 * Joins the multiple parts with '/' to create a url
 *
 * @param parts the distinct parts of the url to join
 */
export function urlPathJoin(...parts) {
    var _a, _b;
    const paths = [];
    parts = parts.filter((part) => Boolean(part));
    for (const part of parts) {
        paths.push(cleanSlashes(part));
    }
    if ((_a = parts[0]) === null || _a === void 0 ? void 0 : _a.startsWith('/')) {
        paths[0] = '/' + paths[0];
    }
    if ((_b = parts[parts.length - 1]) === null || _b === void 0 ? void 0 : _b.endsWith('/')) {
        paths[paths.length - 1] = paths[paths.length - 1] + '/';
    }
    return paths.join('/');
}
function cleanSlashes(path) {
    path = path.startsWith('/') ? path.slice(1) : path;
    path = path.endsWith('/') ? path.slice(0, -1) : path;
    return path;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2NjLXVybC11dGlsLmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9wcm9qZWN0cy9jb3JlLyIsInNvdXJjZXMiOlsic3JjL29jYy91dGlscy9vY2MtdXJsLXV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSxXQUFXLENBQUMsR0FBRyxLQUFlOztJQUM1QyxNQUFNLEtBQUssR0FBYSxFQUFFLENBQUM7SUFDM0IsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzlDLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO1FBQ3hCLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDaEM7SUFFRCxVQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsMENBQUUsVUFBVSxDQUFDLEdBQUcsR0FBRztRQUM3QixLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUMzQjtJQUNELFVBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLDBDQUFFLFFBQVEsQ0FBQyxHQUFHLEdBQUc7UUFDMUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0tBQ3pEO0lBQ0QsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3pCLENBQUM7QUFFRCxTQUFTLFlBQVksQ0FBQyxJQUFZO0lBQ2hDLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDbkQsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUVyRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEpvaW5zIHRoZSBtdWx0aXBsZSBwYXJ0cyB3aXRoICcvJyB0byBjcmVhdGUgYSB1cmxcbiAqXG4gKiBAcGFyYW0gcGFydHMgdGhlIGRpc3RpbmN0IHBhcnRzIG9mIHRoZSB1cmwgdG8gam9pblxuICovXG5leHBvcnQgZnVuY3Rpb24gdXJsUGF0aEpvaW4oLi4ucGFydHM6IHN0cmluZ1tdKTogc3RyaW5nIHtcbiAgY29uc3QgcGF0aHM6IHN0cmluZ1tdID0gW107XG4gIHBhcnRzID0gcGFydHMuZmlsdGVyKChwYXJ0KSA9PiBCb29sZWFuKHBhcnQpKTtcbiAgZm9yIChjb25zdCBwYXJ0IG9mIHBhcnRzKSB7XG4gICAgcGF0aHMucHVzaChjbGVhblNsYXNoZXMocGFydCkpO1xuICB9XG5cbiAgaWYgKHBhcnRzWzBdPy5zdGFydHNXaXRoKCcvJykpIHtcbiAgICBwYXRoc1swXSA9ICcvJyArIHBhdGhzWzBdO1xuICB9XG4gIGlmIChwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXT8uZW5kc1dpdGgoJy8nKSkge1xuICAgIHBhdGhzW3BhdGhzLmxlbmd0aCAtIDFdID0gcGF0aHNbcGF0aHMubGVuZ3RoIC0gMV0gKyAnLyc7XG4gIH1cbiAgcmV0dXJuIHBhdGhzLmpvaW4oJy8nKTtcbn1cblxuZnVuY3Rpb24gY2xlYW5TbGFzaGVzKHBhdGg6IHN0cmluZyk6IHN0cmluZyB7XG4gIHBhdGggPSBwYXRoLnN0YXJ0c1dpdGgoJy8nKSA/IHBhdGguc2xpY2UoMSkgOiBwYXRoO1xuICBwYXRoID0gcGF0aC5lbmRzV2l0aCgnLycpID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xuXG4gIHJldHVybiBwYXRoO1xufVxuIl19