import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { BASE_SITE_NORMALIZER, COUNTRY_NORMALIZER, CURRENCY_NORMALIZER, LANGUAGE_NORMALIZER, REGION_NORMALIZER, } from '../../../site-context/connectors/converters';
import { ConverterService } from '../../../util/converter.service';
import { OccEndpointsService } from '../../services/occ-endpoints.service';
export class OccSiteAdapter {
    constructor(http, occEndpointsService, converterService) {
        this.http = http;
        this.occEndpointsService = occEndpointsService;
        this.converterService = converterService;
    }
    loadLanguages() {
        return this.http
            .get(this.occEndpointsService.getUrl('languages'))
            .pipe(map((languageList) => languageList.languages), this.converterService.pipeableMany(LANGUAGE_NORMALIZER));
    }
    loadCurrencies() {
        return this.http
            .get(this.occEndpointsService.getUrl('currencies'))
            .pipe(map((currencyList) => currencyList.currencies), this.converterService.pipeableMany(CURRENCY_NORMALIZER));
    }
    loadCountries(type) {
        return this.http
            .get(this.occEndpointsService.getUrl('countries', undefined, type ? { type } : undefined))
            .pipe(map((countryList) => countryList.countries), this.converterService.pipeableMany(COUNTRY_NORMALIZER));
    }
    loadRegions(countryIsoCode) {
        return this.http
            .get(this.occEndpointsService.getUrl('regions', { isoCode: countryIsoCode }))
            .pipe(map((regionList) => regionList.regions), this.converterService.pipeableMany(REGION_NORMALIZER));
    }
    /**
     * There is no OCC API to load one site based on Uid.
     * So, we have to load all sites, and find the one from the list.
     */
    loadBaseSite(siteUid) {
        if (!siteUid) {
            const baseUrl = this.occEndpointsService.getBaseEndpoint();
            const urlSplits = baseUrl.split('/');
            siteUid = urlSplits.pop();
        }
        return this.http
            .get(this.occEndpointsService.buildUrl('baseSitesForConfig', {}, { baseSite: false }))
            .pipe(map((siteList) => {
            return siteList.baseSites.find((site) => site.uid === siteUid);
        }));
    }
    loadBaseSites() {
        return this.http
            .get(this.occEndpointsService.buildUrl('baseSitesForConfig', {}, { baseSite: false }))
            .pipe(map((baseSiteList) => baseSiteList.baseSites), this.converterService.pipeableMany(BASE_SITE_NORMALIZER));
    }
}
OccSiteAdapter.decorators = [
    { type: Injectable }
];
OccSiteAdapter.ctorParameters = () => [
    { type: HttpClient },
    { type: OccEndpointsService },
    { type: ConverterService }
];
//# sourceMappingURL=data:application/json;base64,