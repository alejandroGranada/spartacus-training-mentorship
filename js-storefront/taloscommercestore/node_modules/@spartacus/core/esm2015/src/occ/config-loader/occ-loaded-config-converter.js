import { Injectable } from '@angular/core';
import { BASE_SITE_CONTEXT_ID, CURRENCY_CONTEXT_ID, LANGUAGE_CONTEXT_ID, THEME_CONTEXT_ID, } from '../../site-context/providers/context-ids';
import { JavaRegExpConverter } from '../../util/java-reg-exp-converter/java-reg-exp-converter';
import * as i0 from "@angular/core";
import * as i1 from "../../util/java-reg-exp-converter/java-reg-exp-converter";
/**
 * @deprecated since 3.2 - use `SiteContextConfigInitializer` instead
 */
// TODO(#11515): drop it in 4.0
export class OccLoadedConfigConverter {
    constructor(javaRegExpConverter) {
        this.javaRegExpConverter = javaRegExpConverter;
    }
    fromOccBaseSites(baseSites, currentUrl) {
        const baseSite = baseSites === null || baseSites === void 0 ? void 0 : baseSites.find((site) => this.isCurrentBaseSite(site, currentUrl));
        if (!baseSite) {
            throw this.getError(`Current url (${currentUrl}) doesn't match with any of url patterns of any base site.`);
        }
        // Although `stores` property is an array, typically there is only one store. So we return the first store from the list.
        const baseStore = baseSite.stores && baseSite.stores[0];
        if (!baseStore) {
            throw this.getError(`Current base site (${baseSite.uid}) doesn't have any base store.`);
        }
        return {
            baseSite: baseSite.uid,
            languages: this.getIsoCodes(baseStore.languages, baseSite.defaultLanguage || baseStore.defaultLanguage),
            currencies: this.getIsoCodes(baseStore.currencies, baseStore.defaultCurrency),
            urlParameters: this.getUrlParams(baseSite.urlEncodingAttributes),
            theme: baseSite.theme,
        };
    }
    toSiteContextConfig({ baseSite, languages, currencies, urlParameters: urlEncodingAttributes, theme, }) {
        const result = {
            context: {
                urlParameters: urlEncodingAttributes,
                [BASE_SITE_CONTEXT_ID]: [baseSite],
                [LANGUAGE_CONTEXT_ID]: languages,
                [CURRENCY_CONTEXT_ID]: currencies,
                [THEME_CONTEXT_ID]: [theme],
            },
        };
        return result;
    }
    toI18nConfig({ languages }) {
        return { i18n: { fallbackLang: languages[0] } };
    }
    isCurrentBaseSite(site, currentUrl) {
        const index = (site.urlPatterns || []).findIndex((javaRegexp) => {
            const jsRegexp = this.javaRegExpConverter.toJsRegExp(javaRegexp);
            if (jsRegexp) {
                const result = jsRegexp.test(currentUrl);
                return result;
            }
        });
        return index !== -1;
    }
    /**
     * Returns an array of url encoded site context parameters.
     *
     * It maps the string "storefront" (used in OCC) to the "baseSite" (used in Spartacus)
     */
    getUrlParams(params) {
        const STOREFRONT_PARAM = 'storefront';
        return (params || []).map((param) => param === STOREFRONT_PARAM ? BASE_SITE_CONTEXT_ID : param);
    }
    /**
     * Returns iso codes in a array, where the first element is the default iso code.
     */
    getIsoCodes(elements, defaultElement) {
        const result = this.moveToFirst(elements, (el) => el.isocode === defaultElement.isocode).map((el) => el.isocode);
        return result;
    }
    /**
     * Moves to the start of the array the first element that satisfies the given predicate.
     *
     * @param array array to modify
     * @param predicate function called on elements
     */
    moveToFirst(array, predicate) {
        array = [...array];
        const index = array.findIndex(predicate);
        if (index !== -1) {
            const [el] = array.splice(index, 1);
            array.unshift(el);
        }
        return array;
    }
    getError(message) {
        return new Error(`Error: Cannot get base site config! ${message}`);
    }
}
OccLoadedConfigConverter.ɵprov = i0.ɵɵdefineInjectable({ factory: function OccLoadedConfigConverter_Factory() { return new OccLoadedConfigConverter(i0.ɵɵinject(i1.JavaRegExpConverter)); }, token: OccLoadedConfigConverter, providedIn: "root" });
OccLoadedConfigConverter.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
OccLoadedConfigConverter.ctorParameters = () => [
    { type: JavaRegExpConverter }
];
//# sourceMappingURL=data:application/json;base64,