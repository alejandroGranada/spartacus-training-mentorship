import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { REPLENISHMENT_ORDER_FORM_SERIALIZER, REPLENISHMENT_ORDER_NORMALIZER, } from '../../../checkout/connectors/replenishment-order/converters';
import { ConverterService } from '../../../util/converter.service';
import { OccEndpointsService } from '../../services/occ-endpoints.service';
export class OccCheckoutReplenishmentOrderAdapter {
    constructor(http, occEndpoints, converter) {
        this.http = http;
        this.occEndpoints = occEndpoints;
        this.converter = converter;
    }
    scheduleReplenishmentOrder(cartId, scheduleReplenishmentForm, termsChecked, userId) {
        scheduleReplenishmentForm = this.converter.convert(scheduleReplenishmentForm, REPLENISHMENT_ORDER_FORM_SERIALIZER);
        const headers = new HttpHeaders().set('Content-Type', 'application/json');
        const params = new HttpParams()
            .set('cartId', cartId)
            .set('termsChecked', termsChecked.toString());
        return this.http
            .post(this.occEndpoints.getUrl('scheduleReplenishmentOrder', {
            userId,
        }), scheduleReplenishmentForm, { headers, params })
            .pipe(this.converter.pipeable(REPLENISHMENT_ORDER_NORMALIZER));
    }
}
OccCheckoutReplenishmentOrderAdapter.decorators = [
    { type: Injectable }
];
OccCheckoutReplenishmentOrderAdapter.ctorParameters = () => [
    { type: HttpClient },
    { type: OccEndpointsService },
    { type: ConverterService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2NjLWNoZWNrb3V0LXJlcGxlbmlzaG1lbnQtb3JkZXIuYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy9QYXRyeWsvRGVza3RvcC9zcGFydGFjdXMvcHJvamVjdHMvY29yZS8iLCJzb3VyY2VzIjpbInNyYy9vY2MvYWRhcHRlcnMvY2hlY2tvdXQvb2NjLWNoZWNrb3V0LXJlcGxlbmlzaG1lbnQtb3JkZXIuYWRhcHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMzRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFDTCxtQ0FBbUMsRUFDbkMsOEJBQThCLEdBQy9CLE1BQU0sNkRBQTZELENBQUM7QUFLckUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDbkUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFHM0UsTUFBTSxPQUFPLG9DQUFvQztJQUUvQyxZQUNZLElBQWdCLEVBQ2hCLFlBQWlDLEVBQ2pDLFNBQTJCO1FBRjNCLFNBQUksR0FBSixJQUFJLENBQVk7UUFDaEIsaUJBQVksR0FBWixZQUFZLENBQXFCO1FBQ2pDLGNBQVMsR0FBVCxTQUFTLENBQWtCO0lBQ3BDLENBQUM7SUFFSiwwQkFBMEIsQ0FDeEIsTUFBYyxFQUNkLHlCQUFvRCxFQUNwRCxZQUFxQixFQUNyQixNQUFjO1FBRWQseUJBQXlCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQ2hELHlCQUF5QixFQUN6QixtQ0FBbUMsQ0FDcEMsQ0FBQztRQUVGLE1BQU0sT0FBTyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBRTFFLE1BQU0sTUFBTSxHQUFHLElBQUksVUFBVSxFQUFFO2FBQzVCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDO2FBQ3JCLEdBQUcsQ0FBQyxjQUFjLEVBQUUsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFFaEQsT0FBTyxJQUFJLENBQUMsSUFBSTthQUNiLElBQUksQ0FDSCxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyw0QkFBNEIsRUFBRTtZQUNyRCxNQUFNO1NBQ1AsQ0FBQyxFQUNGLHlCQUF5QixFQUN6QixFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsQ0FDcEI7YUFDQSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsOEJBQThCLENBQUMsQ0FBQyxDQUFDO0lBQ25FLENBQUM7OztZQW5DRixVQUFVOzs7WUFmRixVQUFVO1lBYVYsbUJBQW1CO1lBRG5CLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBIZWFkZXJzLCBIdHRwUGFyYW1zIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQ2hlY2tvdXRSZXBsZW5pc2htZW50T3JkZXJBZGFwdGVyIH0gZnJvbSAnLi4vLi4vLi4vY2hlY2tvdXQvY29ubmVjdG9ycy9yZXBsZW5pc2htZW50LW9yZGVyL2NoZWNrb3V0LXJlcGxlbmlzaG1lbnQtb3JkZXIuYWRhcHRlcic7XG5pbXBvcnQge1xuICBSRVBMRU5JU0hNRU5UX09SREVSX0ZPUk1fU0VSSUFMSVpFUixcbiAgUkVQTEVOSVNITUVOVF9PUkRFUl9OT1JNQUxJWkVSLFxufSBmcm9tICcuLi8uLi8uLi9jaGVja291dC9jb25uZWN0b3JzL3JlcGxlbmlzaG1lbnQtb3JkZXIvY29udmVydGVycyc7XG5pbXBvcnQge1xuICBSZXBsZW5pc2htZW50T3JkZXIsXG4gIFNjaGVkdWxlUmVwbGVuaXNobWVudEZvcm0sXG59IGZyb20gJy4uLy4uLy4uL21vZGVsL3JlcGxlbmlzaG1lbnQtb3JkZXIubW9kZWwnO1xuaW1wb3J0IHsgQ29udmVydGVyU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3V0aWwvY29udmVydGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgT2NjRW5kcG9pbnRzU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL29jYy1lbmRwb2ludHMuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBPY2NDaGVja291dFJlcGxlbmlzaG1lbnRPcmRlckFkYXB0ZXJcbiAgaW1wbGVtZW50cyBDaGVja291dFJlcGxlbmlzaG1lbnRPcmRlckFkYXB0ZXIge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgaHR0cDogSHR0cENsaWVudCxcbiAgICBwcm90ZWN0ZWQgb2NjRW5kcG9pbnRzOiBPY2NFbmRwb2ludHNTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBjb252ZXJ0ZXI6IENvbnZlcnRlclNlcnZpY2VcbiAgKSB7fVxuXG4gIHNjaGVkdWxlUmVwbGVuaXNobWVudE9yZGVyKFxuICAgIGNhcnRJZDogc3RyaW5nLFxuICAgIHNjaGVkdWxlUmVwbGVuaXNobWVudEZvcm06IFNjaGVkdWxlUmVwbGVuaXNobWVudEZvcm0sXG4gICAgdGVybXNDaGVja2VkOiBib29sZWFuLFxuICAgIHVzZXJJZDogc3RyaW5nXG4gICk6IE9ic2VydmFibGU8UmVwbGVuaXNobWVudE9yZGVyPiB7XG4gICAgc2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybSA9IHRoaXMuY29udmVydGVyLmNvbnZlcnQoXG4gICAgICBzY2hlZHVsZVJlcGxlbmlzaG1lbnRGb3JtLFxuICAgICAgUkVQTEVOSVNITUVOVF9PUkRFUl9GT1JNX1NFUklBTElaRVJcbiAgICApO1xuXG4gICAgY29uc3QgaGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycygpLnNldCgnQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcblxuICAgIGNvbnN0IHBhcmFtcyA9IG5ldyBIdHRwUGFyYW1zKClcbiAgICAgIC5zZXQoJ2NhcnRJZCcsIGNhcnRJZClcbiAgICAgIC5zZXQoJ3Rlcm1zQ2hlY2tlZCcsIHRlcm1zQ2hlY2tlZC50b1N0cmluZygpKTtcblxuICAgIHJldHVybiB0aGlzLmh0dHBcbiAgICAgIC5wb3N0KFxuICAgICAgICB0aGlzLm9jY0VuZHBvaW50cy5nZXRVcmwoJ3NjaGVkdWxlUmVwbGVuaXNobWVudE9yZGVyJywge1xuICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgfSksXG4gICAgICAgIHNjaGVkdWxlUmVwbGVuaXNobWVudEZvcm0sXG4gICAgICAgIHsgaGVhZGVycywgcGFyYW1zIH1cbiAgICAgIClcbiAgICAgIC5waXBlKHRoaXMuY29udmVydGVyLnBpcGVhYmxlKFJFUExFTklTSE1FTlRfT1JERVJfTk9STUFMSVpFUikpO1xuICB9XG59XG4iXX0=