import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { throwError } from 'rxjs';
import { map } from 'rxjs/operators';
import { OccConfig } from '../config/occ-config';
import * as i0 from "@angular/core";
import * as i1 from "../config/occ-config";
import * as i2 from "@angular/common/http";
/**
 * @deprecated since 3.2, use `SiteConnector` instead
 */
// TODO(#11515): drop it in 4.0
export class OccSitesConfigLoader {
    constructor(config, http) {
        this.config = config;
        this.http = http;
        this.endpoint = 'basesites?fields=baseSites(uid,defaultLanguage(isocode),urlEncodingAttributes,urlPatterns,stores(currencies(isocode),defaultCurrency(isocode),languages(isocode),defaultLanguage(isocode)),theme)';
    }
    getPrefix() {
        var _a, _b, _c, _d, _e;
        if (Boolean((_b = (_a = this.config.backend) === null || _a === void 0 ? void 0 : _a.occ) === null || _b === void 0 ? void 0 : _b.prefix) &&
            !((_e = (_d = (_c = this.config.backend) === null || _c === void 0 ? void 0 : _c.occ) === null || _d === void 0 ? void 0 : _d.prefix) === null || _e === void 0 ? void 0 : _e.startsWith('/'))) {
            return '/' + this.config.backend.occ.prefix;
        }
        return this.config.backend.occ.prefix;
    }
    get baseEndpoint() {
        return (this.config.backend.occ.baseUrl || '') + this.getPrefix();
    }
    get url() {
        return `${this.baseEndpoint}${this.endpoint}`;
    }
    load() {
        if (!this.config || !this.config.backend || !this.config.backend.occ) {
            return throwError(new Error(`Missing config for OCC backend!`));
        }
        return this.http
            .get(this.url)
            .pipe(map(({ baseSites }) => baseSites));
    }
}
OccSitesConfigLoader.ɵprov = i0.ɵɵdefineInjectable({ factory: function OccSitesConfigLoader_Factory() { return new OccSitesConfigLoader(i0.ɵɵinject(i1.OccConfig), i0.ɵɵinject(i2.HttpClient)); }, token: OccSitesConfigLoader, providedIn: "root" });
OccSitesConfigLoader.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
OccSitesConfigLoader.ctorParameters = () => [
    { type: OccConfig },
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2NjLXNpdGVzLWNvbmZpZy1sb2FkZXIuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvUGF0cnlrL0Rlc2t0b3Avc3BhcnRhY3VzL3Byb2plY3RzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvb2NjL2NvbmZpZy1sb2FkZXIvb2NjLXNpdGVzLWNvbmZpZy1sb2FkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFjLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM5QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHNCQUFzQixDQUFDOzs7O0FBR2pEOztHQUVHO0FBQ0gsK0JBQStCO0FBRS9CLE1BQU0sT0FBTyxvQkFBb0I7SUFDL0IsWUFBc0IsTUFBaUIsRUFBWSxJQUFnQjtRQUE3QyxXQUFNLEdBQU4sTUFBTSxDQUFXO1FBQVksU0FBSSxHQUFKLElBQUksQ0FBWTtRQUVoRCxhQUFRLEdBQ3pCLG1NQUFtTSxDQUFDO0lBSGhJLENBQUM7SUFLL0QsU0FBUzs7UUFDZixJQUNFLE9BQU8sYUFBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sMENBQUUsR0FBRywwQ0FBRSxNQUFNLENBQUM7WUFDekMsb0JBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLDBDQUFFLEdBQUcsMENBQUUsTUFBTSwwQ0FBRSxVQUFVLENBQUMsR0FBRyxFQUFDLEVBQ2xEO1lBQ0EsT0FBTyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQztTQUM3QztRQUNELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQztJQUN4QyxDQUFDO0lBRUQsSUFBWSxZQUFZO1FBQ3RCLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNwRSxDQUFDO0lBRUQsSUFBWSxHQUFHO1FBQ2IsT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2hELENBQUM7SUFFRCxJQUFJO1FBQ0YsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRTtZQUNwRSxPQUFPLFVBQVUsQ0FBQyxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDLENBQUM7U0FDakU7UUFFRCxPQUFPLElBQUksQ0FBQyxJQUFJO2FBQ2IsR0FBRyxDQUFnQixJQUFJLENBQUMsR0FBRyxDQUFDO2FBQzVCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQzdDLENBQUM7Ozs7WUFqQ0YsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7O1lBUHpCLFNBQVM7WUFMVCxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIHRocm93RXJyb3IgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEJhc2VTaXRlIH0gZnJvbSAnLi4vLi4vbW9kZWwvbWlzYy5tb2RlbCc7XG5pbXBvcnQgeyBPY2NDb25maWcgfSBmcm9tICcuLi9jb25maWcvb2NjLWNvbmZpZyc7XG5pbXBvcnQgeyBPY2MgfSBmcm9tICcuLi9vY2MtbW9kZWxzL29jYy5tb2RlbHMnO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIHNpbmNlIDMuMiwgdXNlIGBTaXRlQ29ubmVjdG9yYCBpbnN0ZWFkXG4gKi9cbi8vIFRPRE8oIzExNTE1KTogZHJvcCBpdCBpbiA0LjBcbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgT2NjU2l0ZXNDb25maWdMb2FkZXIge1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgY29uZmlnOiBPY2NDb25maWcsIHByb3RlY3RlZCBodHRwOiBIdHRwQ2xpZW50KSB7fVxuXG4gIHByb3RlY3RlZCByZWFkb25seSBlbmRwb2ludCA9XG4gICAgJ2Jhc2VzaXRlcz9maWVsZHM9YmFzZVNpdGVzKHVpZCxkZWZhdWx0TGFuZ3VhZ2UoaXNvY29kZSksdXJsRW5jb2RpbmdBdHRyaWJ1dGVzLHVybFBhdHRlcm5zLHN0b3JlcyhjdXJyZW5jaWVzKGlzb2NvZGUpLGRlZmF1bHRDdXJyZW5jeShpc29jb2RlKSxsYW5ndWFnZXMoaXNvY29kZSksZGVmYXVsdExhbmd1YWdlKGlzb2NvZGUpKSx0aGVtZSknO1xuXG4gIHByaXZhdGUgZ2V0UHJlZml4KCk6IHN0cmluZyB7XG4gICAgaWYgKFxuICAgICAgQm9vbGVhbih0aGlzLmNvbmZpZy5iYWNrZW5kPy5vY2M/LnByZWZpeCkgJiZcbiAgICAgICF0aGlzLmNvbmZpZy5iYWNrZW5kPy5vY2M/LnByZWZpeD8uc3RhcnRzV2l0aCgnLycpXG4gICAgKSB7XG4gICAgICByZXR1cm4gJy8nICsgdGhpcy5jb25maWcuYmFja2VuZC5vY2MucHJlZml4O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jb25maWcuYmFja2VuZC5vY2MucHJlZml4O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXQgYmFzZUVuZHBvaW50KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICh0aGlzLmNvbmZpZy5iYWNrZW5kLm9jYy5iYXNlVXJsIHx8ICcnKSArIHRoaXMuZ2V0UHJlZml4KCk7XG4gIH1cblxuICBwcml2YXRlIGdldCB1cmwoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7dGhpcy5iYXNlRW5kcG9pbnR9JHt0aGlzLmVuZHBvaW50fWA7XG4gIH1cblxuICBsb2FkKCk6IE9ic2VydmFibGU8QmFzZVNpdGVbXT4ge1xuICAgIGlmICghdGhpcy5jb25maWcgfHwgIXRoaXMuY29uZmlnLmJhY2tlbmQgfHwgIXRoaXMuY29uZmlnLmJhY2tlbmQub2NjKSB7XG4gICAgICByZXR1cm4gdGhyb3dFcnJvcihuZXcgRXJyb3IoYE1pc3NpbmcgY29uZmlnIGZvciBPQ0MgYmFja2VuZCFgKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgLmdldDxPY2MuQmFzZVNpdGVzPih0aGlzLnVybClcbiAgICAgIC5waXBlKG1hcCgoeyBiYXNlU2l0ZXMgfSkgPT4gYmFzZVNpdGVzKSk7XG4gIH1cbn1cbiJdfQ==