import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { from } from 'rxjs';
import { catchError, groupBy, mergeMap, switchMap } from 'rxjs/operators';
import { AuthActions } from '../../../auth/user-auth/store/actions/index';
import { SiteContextActions } from '../../../site-context/store/actions/index';
import { bufferDebounceTime } from '../../../util/rxjs/buffer-debounce-time';
import { normalizeHttpError } from '../../../util/normalize-http-error';
import { withdrawOn } from '../../../util/rxjs/withdraw-on';
import { CmsComponentConnector } from '../../connectors/component/cms-component.connector';
import { serializePageContext } from '../../utils/cms-utils';
import { CmsActions } from '../actions/index';
export class ComponentsEffects {
    constructor(actions$, cmsComponentConnector) {
        this.actions$ = actions$;
        this.cmsComponentConnector = cmsComponentConnector;
        this.contextChange$ = this.actions$.pipe(ofType(SiteContextActions.LANGUAGE_CHANGE, AuthActions.LOGOUT, AuthActions.LOGIN));
        this.loadComponent$ = createEffect(() => ({ scheduler, debounce = 0 } = {}) => this.actions$.pipe(ofType(CmsActions.LOAD_CMS_COMPONENT), groupBy((actions) => serializePageContext(actions.payload.pageContext)), mergeMap((actionGroup) => actionGroup.pipe(bufferDebounceTime(debounce, scheduler), mergeMap((actions) => this.loadComponentsEffect(actions.map((action) => action.payload.uid), actions[0].payload.pageContext)))), withdrawOn(this.contextChange$)));
    }
    loadComponentsEffect(componentUids, pageContext) {
        return this.cmsComponentConnector.getList(componentUids, pageContext).pipe(switchMap((components) => {
            const actions = [];
            const uidsLeft = new Set(componentUids);
            for (const component of components) {
                actions.push(new CmsActions.LoadCmsComponentSuccess({
                    component,
                    uid: component.uid,
                    pageContext,
                }));
                uidsLeft.delete(component.uid);
            }
            // we have to emit LoadCmsComponentFail for all component's uids that
            // are missing from the response
            uidsLeft.forEach((uid) => {
                actions.push(new CmsActions.LoadCmsComponentFail({
                    uid,
                    pageContext,
                }));
            });
            return from(actions);
        }), catchError((error) => from(componentUids.map((uid) => new CmsActions.LoadCmsComponentFail({
            uid,
            error: normalizeHttpError(error),
            pageContext,
        })))));
    }
}
ComponentsEffects.decorators = [
    { type: Injectable }
];
ComponentsEffects.ctorParameters = () => [
    { type: Actions },
    { type: CmsComponentConnector }
];
//# sourceMappingURL=data:application/json;base64,