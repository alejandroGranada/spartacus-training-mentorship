import { Injectable } from '@angular/core';
import { WindowRef } from '../../../window/window-ref';
import { PageMetaConfig, } from '../config/page-meta.config';
import * as i0 from "@angular/core";
import * as i1 from "../config/page-meta.config";
import * as i2 from "../../../window/window-ref";
/**
 * Service to add links to the page meta data, such canonical URLs.
 */
export class PageLinkService {
    constructor(pageMetaConfig, winRef) {
        this.pageMetaConfig = pageMetaConfig;
        this.winRef = winRef;
    }
    /**
     * Returns the canonical for the page.
     *
     * The canonical url is created by the help of the default `CanonicalUrlOptions` from
     * the pageMeta options. The options can be further adjusted by the options argument.
     */
    getCanonicalUrl(options, url) {
        var _a, _b, _c;
        const config = Object.assign(Object.assign({}, (_b = (_a = this.pageMetaConfig) === null || _a === void 0 ? void 0 : _a.pageMeta) === null || _b === void 0 ? void 0 : _b.canonicalUrl), options);
        return this.buildCanonicalUrl((_c = url !== null && url !== void 0 ? url : this.winRef.location.href) !== null && _c !== void 0 ? _c : '', config);
    }
    buildCanonicalUrl(url, options) {
        if (options.forceHttps) {
            url = url.replace(/^http(?!s):/i, 'https:');
        }
        if (options.forceWww) {
            // this will not allow for not adding wwww. in case of a subdomain
            url = url.replace(/^(https?:\/\/)(?!www\.)(.*)/i, '$1www.$2');
        }
        if (options.removeQueryParams) {
            url = this.removeQueryParams(url, options);
        }
        if (options.forceTrailingSlash) {
            url = url.replace(/^([^\?]+[^\/\?]$)$/i, '$1/');
        }
        return url;
    }
    removeQueryParams(url, config) {
        const queryPos = url.indexOf('?');
        if (queryPos > -1) {
            const urlBeforeQueryParam = url.substr(0, queryPos);
            const params = new URLSearchParams(url.substr(queryPos));
            url = urlBeforeQueryParam;
            if (Array.isArray(config.removeQueryParams)) {
                config.removeQueryParams.forEach((param) => {
                    params.delete(param);
                });
                if (params.toString().length > 0) {
                    url = `${urlBeforeQueryParam}?${params.toString()}`;
                }
            }
        }
        return url;
    }
}
PageLinkService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PageLinkService_Factory() { return new PageLinkService(i0.ɵɵinject(i1.PageMetaConfig), i0.ɵɵinject(i2.WindowRef)); }, token: PageLinkService, providedIn: "root" });
PageLinkService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
PageLinkService.ctorParameters = () => [
    { type: PageMetaConfig },
    { type: WindowRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS1saW5rLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvUGF0cnlrL0Rlc2t0b3Avc3BhcnRhY3VzL3Byb2plY3RzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY21zL3BhZ2Uvcm91dGluZy9wYWdlLWxpbmsuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUN2RCxPQUFPLEVBRUwsY0FBYyxHQUNmLE1BQU0sNEJBQTRCLENBQUM7Ozs7QUFFcEM7O0dBRUc7QUFFSCxNQUFNLE9BQU8sZUFBZTtJQUMxQixZQUNZLGNBQThCLEVBQzlCLE1BQWlCO1FBRGpCLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUM5QixXQUFNLEdBQU4sTUFBTSxDQUFXO0lBQzFCLENBQUM7SUFFSjs7Ozs7T0FLRztJQUNILGVBQWUsQ0FBQyxPQUE2QixFQUFFLEdBQVk7O1FBQ3pELE1BQU0sTUFBTSwrQ0FDUCxJQUFJLENBQUMsY0FBYywwQ0FBRSxRQUFRLDBDQUFFLFlBQVksR0FDM0MsT0FBTyxDQUNYLENBQUM7UUFDRixPQUFPLElBQUksQ0FBQyxpQkFBaUIsT0FDM0IsR0FBRyxhQUFILEdBQUcsY0FBSCxHQUFHLEdBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxtQ0FBSSxFQUFFLEVBQ3RDLE1BQU0sQ0FDUCxDQUFDO0lBQ0osQ0FBQztJQUVTLGlCQUFpQixDQUN6QixHQUFXLEVBQ1gsT0FBNEI7UUFFNUIsSUFBSSxPQUFPLENBQUMsVUFBVSxFQUFFO1lBQ3RCLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxRQUFRLENBQUMsQ0FBQztTQUM3QztRQUVELElBQUksT0FBTyxDQUFDLFFBQVEsRUFBRTtZQUNwQixrRUFBa0U7WUFDbEUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsOEJBQThCLEVBQUUsVUFBVSxDQUFDLENBQUM7U0FDL0Q7UUFFRCxJQUFJLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRTtZQUM3QixHQUFHLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUM1QztRQUVELElBQUksT0FBTyxDQUFDLGtCQUFrQixFQUFFO1lBQzlCLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLHFCQUFxQixFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ2pEO1FBRUQsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRVMsaUJBQWlCLENBQ3pCLEdBQVcsRUFDWCxNQUEyQjtRQUUzQixNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xDLElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ2pCLE1BQU0sbUJBQW1CLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDcEQsTUFBTSxNQUFNLEdBQUcsSUFBSSxlQUFlLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBRXpELEdBQUcsR0FBRyxtQkFBbUIsQ0FBQztZQUUxQixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEVBQUU7Z0JBQzNDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtvQkFDekMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDdkIsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtvQkFDaEMsR0FBRyxHQUFHLEdBQUcsbUJBQW1CLElBQUksTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUM7aUJBQ3JEO2FBQ0Y7U0FDRjtRQUNELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQzs7OztZQXJFRixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7WUFOaEMsY0FBYztZQUhQLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBXaW5kb3dSZWYgfSBmcm9tICcuLi8uLi8uLi93aW5kb3cvd2luZG93LXJlZic7XG5pbXBvcnQge1xuICBDYW5vbmljYWxVcmxPcHRpb25zLFxuICBQYWdlTWV0YUNvbmZpZyxcbn0gZnJvbSAnLi4vY29uZmlnL3BhZ2UtbWV0YS5jb25maWcnO1xuXG4vKipcbiAqIFNlcnZpY2UgdG8gYWRkIGxpbmtzIHRvIHRoZSBwYWdlIG1ldGEgZGF0YSwgc3VjaCBjYW5vbmljYWwgVVJMcy5cbiAqL1xuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBQYWdlTGlua1NlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgcGFnZU1ldGFDb25maWc6IFBhZ2VNZXRhQ29uZmlnLFxuICAgIHByb3RlY3RlZCB3aW5SZWY6IFdpbmRvd1JlZlxuICApIHt9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNhbm9uaWNhbCBmb3IgdGhlIHBhZ2UuXG4gICAqXG4gICAqIFRoZSBjYW5vbmljYWwgdXJsIGlzIGNyZWF0ZWQgYnkgdGhlIGhlbHAgb2YgdGhlIGRlZmF1bHQgYENhbm9uaWNhbFVybE9wdGlvbnNgIGZyb21cbiAgICogdGhlIHBhZ2VNZXRhIG9wdGlvbnMuIFRoZSBvcHRpb25zIGNhbiBiZSBmdXJ0aGVyIGFkanVzdGVkIGJ5IHRoZSBvcHRpb25zIGFyZ3VtZW50LlxuICAgKi9cbiAgZ2V0Q2Fub25pY2FsVXJsKG9wdGlvbnM/OiBDYW5vbmljYWxVcmxPcHRpb25zLCB1cmw/OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IGNvbmZpZzogQ2Fub25pY2FsVXJsT3B0aW9ucyA9IHtcbiAgICAgIC4uLnRoaXMucGFnZU1ldGFDb25maWc/LnBhZ2VNZXRhPy5jYW5vbmljYWxVcmwsXG4gICAgICAuLi5vcHRpb25zLFxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuYnVpbGRDYW5vbmljYWxVcmwoXG4gICAgICB1cmwgPz8gdGhpcy53aW5SZWYubG9jYXRpb24uaHJlZiA/PyAnJyxcbiAgICAgIGNvbmZpZ1xuICAgICk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYnVpbGRDYW5vbmljYWxVcmwoXG4gICAgdXJsOiBzdHJpbmcsXG4gICAgb3B0aW9uczogQ2Fub25pY2FsVXJsT3B0aW9uc1xuICApOiBzdHJpbmcge1xuICAgIGlmIChvcHRpb25zLmZvcmNlSHR0cHMpIHtcbiAgICAgIHVybCA9IHVybC5yZXBsYWNlKC9eaHR0cCg/IXMpOi9pLCAnaHR0cHM6Jyk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZm9yY2VXd3cpIHtcbiAgICAgIC8vIHRoaXMgd2lsbCBub3QgYWxsb3cgZm9yIG5vdCBhZGRpbmcgd3d3dy4gaW4gY2FzZSBvZiBhIHN1YmRvbWFpblxuICAgICAgdXJsID0gdXJsLnJlcGxhY2UoL14oaHR0cHM/OlxcL1xcLykoPyF3d3dcXC4pKC4qKS9pLCAnJDF3d3cuJDInKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5yZW1vdmVRdWVyeVBhcmFtcykge1xuICAgICAgdXJsID0gdGhpcy5yZW1vdmVRdWVyeVBhcmFtcyh1cmwsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmZvcmNlVHJhaWxpbmdTbGFzaCkge1xuICAgICAgdXJsID0gdXJsLnJlcGxhY2UoL14oW15cXD9dK1teXFwvXFw/XSQpJC9pLCAnJDEvJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHByb3RlY3RlZCByZW1vdmVRdWVyeVBhcmFtcyhcbiAgICB1cmw6IHN0cmluZyxcbiAgICBjb25maWc6IENhbm9uaWNhbFVybE9wdGlvbnNcbiAgKTogc3RyaW5nIHtcbiAgICBjb25zdCBxdWVyeVBvcyA9IHVybC5pbmRleE9mKCc/Jyk7XG4gICAgaWYgKHF1ZXJ5UG9zID4gLTEpIHtcbiAgICAgIGNvbnN0IHVybEJlZm9yZVF1ZXJ5UGFyYW0gPSB1cmwuc3Vic3RyKDAsIHF1ZXJ5UG9zKTtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXModXJsLnN1YnN0cihxdWVyeVBvcykpO1xuXG4gICAgICB1cmwgPSB1cmxCZWZvcmVRdWVyeVBhcmFtO1xuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjb25maWcucmVtb3ZlUXVlcnlQYXJhbXMpKSB7XG4gICAgICAgIGNvbmZpZy5yZW1vdmVRdWVyeVBhcmFtcy5mb3JFYWNoKChwYXJhbSkgPT4ge1xuICAgICAgICAgIHBhcmFtcy5kZWxldGUocGFyYW0pO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHBhcmFtcy50b1N0cmluZygpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB1cmwgPSBgJHt1cmxCZWZvcmVRdWVyeVBhcmFtfT8ke3BhcmFtcy50b1N0cmluZygpfWA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVybDtcbiAgfVxufVxuIl19