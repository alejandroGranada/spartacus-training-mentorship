import { Injectable } from '@angular/core';
import { combineLatest, defer, of } from 'rxjs';
import { filter, map, shareReplay } from 'rxjs/operators';
import { TranslationService } from '../../i18n/translation.service';
import { PageType } from '../../model/cms.model';
import { CmsService } from '../facade/cms.service';
import { BasePageMetaResolver } from './base-page-meta.resolver';
import { PageMetaResolver } from './page-meta.resolver';
import { RoutingPageMetaResolver } from './routing/routing-page-meta.resolver';
import * as i0 from "@angular/core";
import * as i1 from "../facade/cms.service";
import * as i2 from "../../i18n/translation.service";
import * as i3 from "./routing/routing-page-meta.resolver";
import * as i4 from "./base-page-meta.resolver";
/**
 * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`.
 * More specific resolvers for content pages can be implemented by making them more
 * specific, for example by using the page template (see `CartPageMetaResolver`).
 *
 * The page title, and breadcrumbs are resolved in this implementation only.
 */
export class ContentPageMetaResolver extends PageMetaResolver {
    constructor(cmsService, translation, routingPageMetaResolver, basePageMetaResolver) {
        super();
        this.cmsService = cmsService;
        this.translation = translation;
        this.routingPageMetaResolver = routingPageMetaResolver;
        this.basePageMetaResolver = basePageMetaResolver;
        /**
         * Breadcrumb for the home page.
         *
         * @deprecated since 3.1, as we resolve the homeBreadcrumb$ from the `BasePageMetaResolver`
         */
        // TODO(#10467): drop the homeBreadcrumb$ property
        this.homeBreadcrumb$ = this.translation
            .translate('common.home')
            .pipe(map((label) => [{ label: label, link: '/' }]));
        /**
         * All the resolved breadcrumbs (including those from Angular child routes).
         *
         * @deprecated since 3.1, as we resolve the breadcrumbs$ from the `BasePageMetaResolver`
         */
        // TODO(#10467): drop the breadcrumbs$ property
        this.breadcrumbs$ = combineLatest([
            this.homeBreadcrumb$,
            defer(() => this.routingPageMetaResolver.resolveBreadcrumbs()),
        ]).pipe(map((breadcrumbs) => breadcrumbs.flat()), shareReplay({ bufferSize: 1, refCount: true }));
        /**
         * Helper to provide access to the current CMS page
         *
         * @deprecated since 3.1, as we resolve the cms page data from the `BasePageMetaResolver`
         */
        // TODO(#10467): drop the cms$ property
        this.cms$ = defer(() => this.cmsService.getCurrentPage().pipe(filter((p) => Boolean(p))));
        /**
         * @deprecated since 3.1, we'll start using the `BasePageMetaResolver` to resolve
         * the page title
         */
        // TODO(#10467): drop the title$ property
        this.title$ = this.cms$.pipe(map((p) => p.title));
        this.pageType = PageType.CONTENT_PAGE;
    }
    // TODO(#10467): resolve the title from the `BasePageMetaResolver.resolveTitle()` only
    resolveTitle() {
        return this.basePageMetaResolver
            ? this.basePageMetaResolver.resolveTitle()
            : this.title$;
    }
    resolveDescription() {
        return this.basePageMetaResolver
            ? this.basePageMetaResolver.resolveDescription()
            : of();
    }
    /**
     * @override
     * Resolves a single breadcrumb item to the home page for each `ContentPage`.
     * The home page label is resolved from the translation service.
     */
    resolveBreadcrumbs() {
        return this.basePageMetaResolver
            ? this.basePageMetaResolver.resolveBreadcrumbs()
            : this.breadcrumbs$;
    }
    /**
     * @override
     * This is added in 3.1 and will be ignored if the `BasePageMetaResolver` is not
     * available.
     */
    // TODO(#10467) drop the 3.1 note.
    resolveRobots() {
        var _a, _b;
        return (_b = (_a = this.basePageMetaResolver) === null || _a === void 0 ? void 0 : _a.resolveRobots()) !== null && _b !== void 0 ? _b : of();
    }
    /**
     * @override resolves the canonical page for the content page.
     */
    resolveCanonicalUrl() {
        var _a, _b;
        return (_b = (_a = this.basePageMetaResolver) === null || _a === void 0 ? void 0 : _a.resolveCanonicalUrl()) !== null && _b !== void 0 ? _b : of();
    }
}
ContentPageMetaResolver.ɵprov = i0.ɵɵdefineInjectable({ factory: function ContentPageMetaResolver_Factory() { return new ContentPageMetaResolver(i0.ɵɵinject(i1.CmsService), i0.ɵɵinject(i2.TranslationService), i0.ɵɵinject(i3.RoutingPageMetaResolver), i0.ɵɵinject(i4.BasePageMetaResolver)); }, token: ContentPageMetaResolver, providedIn: "root" });
ContentPageMetaResolver.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
ContentPageMetaResolver.ctorParameters = () => [
    { type: CmsService },
    { type: TranslationService },
    { type: RoutingPageMetaResolver },
    { type: BasePageMetaResolver }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC1wYWdlLW1ldGEucmVzb2x2ZXIuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvUGF0cnlrL0Rlc2t0b3Avc3BhcnRhY3VzL3Byb2plY3RzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY21zL3BhZ2UvY29udGVudC1wYWdlLW1ldGEucmVzb2x2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsYUFBYSxFQUFFLEtBQUssRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDNUQsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDcEUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2pELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUVuRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQVF4RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQzs7Ozs7O0FBRS9FOzs7Ozs7R0FNRztBQUlILE1BQU0sT0FBTyx1QkFDWCxTQUFRLGdCQUFnQjtJQXVCeEIsWUFDWSxVQUFzQixFQUN0QixXQUErQixFQUMvQix1QkFBZ0QsRUFDaEQsb0JBQTJDO1FBRXJELEtBQUssRUFBRSxDQUFDO1FBTEUsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0QixnQkFBVyxHQUFYLFdBQVcsQ0FBb0I7UUFDL0IsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5QjtRQUNoRCx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXVCO1FBTXZEOzs7O1dBSUc7UUFDSCxrREFBa0Q7UUFDeEMsb0JBQWUsR0FFckIsSUFBSSxDQUFDLFdBQVc7YUFDakIsU0FBUyxDQUFDLGFBQWEsQ0FBQzthQUN4QixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQXFCLENBQUMsQ0FBQyxDQUFDO1FBRTNFOzs7O1dBSUc7UUFDSCwrQ0FBK0M7UUFDckMsaUJBQVksR0FBaUMsYUFBYSxDQUFDO1lBQ25FLElBQUksQ0FBQyxlQUFlO1lBQ3BCLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztTQUMvRCxDQUFDLENBQUMsSUFBSSxDQUNMLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQ3hDLFdBQVcsQ0FBQyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQy9DLENBQUM7UUFFRjs7OztXQUlHO1FBQ0gsdUNBQXVDO1FBQzdCLFNBQUksR0FBcUIsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUM1QyxJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ2pFLENBQUM7UUFFRjs7O1dBR0c7UUFDSCx5Q0FBeUM7UUFDL0IsV0FBTSxHQUFtQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FDL0QsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQ3BCLENBQUM7UUE5Q0EsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsWUFBWSxDQUFDO0lBQ3hDLENBQUM7SUErQ0Qsc0ZBQXNGO0lBQ3RGLFlBQVk7UUFDVixPQUFPLElBQUksQ0FBQyxvQkFBb0I7WUFDOUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLEVBQUU7WUFDMUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVELGtCQUFrQjtRQUNoQixPQUFPLElBQUksQ0FBQyxvQkFBb0I7WUFDOUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxrQkFBa0IsRUFBRTtZQUNoRCxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7SUFDWCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILGtCQUFrQjtRQUNoQixPQUFPLElBQUksQ0FBQyxvQkFBb0I7WUFDOUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxrQkFBa0IsRUFBRTtZQUNoRCxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztJQUN4QixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILGtDQUFrQztJQUNsQyxhQUFhOztRQUNYLG1CQUFPLElBQUksQ0FBQyxvQkFBb0IsMENBQUUsYUFBYSxxQ0FBTSxFQUFFLEVBQUUsQ0FBQztJQUM1RCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxtQkFBbUI7O1FBQ2pCLG1CQUFPLElBQUksQ0FBQyxvQkFBb0IsMENBQUUsbUJBQW1CLHFDQUFNLEVBQUUsRUFBRSxDQUFDO0lBQ2xFLENBQUM7Ozs7WUF6SEYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7WUF0QlEsVUFBVTtZQUZWLGtCQUFrQjtZQWFsQix1QkFBdUI7WUFUdkIsb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgY29tYmluZUxhdGVzdCwgZGVmZXIsIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCwgc2hhcmVSZXBsYXkgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBUcmFuc2xhdGlvblNlcnZpY2UgfSBmcm9tICcuLi8uLi9pMThuL3RyYW5zbGF0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgUGFnZVR5cGUgfSBmcm9tICcuLi8uLi9tb2RlbC9jbXMubW9kZWwnO1xuaW1wb3J0IHsgQ21zU2VydmljZSB9IGZyb20gJy4uL2ZhY2FkZS9jbXMuc2VydmljZSc7XG5pbXBvcnQgeyBCcmVhZGNydW1iTWV0YSwgUGFnZSwgUGFnZVJvYm90c01ldGEgfSBmcm9tICcuLi9tb2RlbC9wYWdlLm1vZGVsJztcbmltcG9ydCB7IEJhc2VQYWdlTWV0YVJlc29sdmVyIH0gZnJvbSAnLi9iYXNlLXBhZ2UtbWV0YS5yZXNvbHZlcic7XG5pbXBvcnQgeyBQYWdlTWV0YVJlc29sdmVyIH0gZnJvbSAnLi9wYWdlLW1ldGEucmVzb2x2ZXInO1xuaW1wb3J0IHtcbiAgQ2Fub25pY2FsUGFnZVJlc29sdmVyLFxuICBQYWdlQnJlYWRjcnVtYlJlc29sdmVyLFxuICBQYWdlRGVzY3JpcHRpb25SZXNvbHZlcixcbiAgUGFnZVJvYm90c1Jlc29sdmVyLFxuICBQYWdlVGl0bGVSZXNvbHZlcixcbn0gZnJvbSAnLi9wYWdlLnJlc29sdmVycyc7XG5pbXBvcnQgeyBSb3V0aW5nUGFnZU1ldGFSZXNvbHZlciB9IGZyb20gJy4vcm91dGluZy9yb3V0aW5nLXBhZ2UtbWV0YS5yZXNvbHZlcic7XG5cbi8qKlxuICogUmVzb2x2ZXMgdGhlIHBhZ2UgZGF0YSBmb3IgYWxsIENvbnRlbnQgUGFnZXMgYmFzZWQgb24gdGhlIGBQYWdlVHlwZS5DT05URU5UX1BBR0VgLlxuICogTW9yZSBzcGVjaWZpYyByZXNvbHZlcnMgZm9yIGNvbnRlbnQgcGFnZXMgY2FuIGJlIGltcGxlbWVudGVkIGJ5IG1ha2luZyB0aGVtIG1vcmVcbiAqIHNwZWNpZmljLCBmb3IgZXhhbXBsZSBieSB1c2luZyB0aGUgcGFnZSB0ZW1wbGF0ZSAoc2VlIGBDYXJ0UGFnZU1ldGFSZXNvbHZlcmApLlxuICpcbiAqIFRoZSBwYWdlIHRpdGxlLCBhbmQgYnJlYWRjcnVtYnMgYXJlIHJlc29sdmVkIGluIHRoaXMgaW1wbGVtZW50YXRpb24gb25seS5cbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIENvbnRlbnRQYWdlTWV0YVJlc29sdmVyXG4gIGV4dGVuZHMgUGFnZU1ldGFSZXNvbHZlclxuICBpbXBsZW1lbnRzXG4gICAgUGFnZVRpdGxlUmVzb2x2ZXIsXG4gICAgUGFnZURlc2NyaXB0aW9uUmVzb2x2ZXIsXG4gICAgUGFnZUJyZWFkY3J1bWJSZXNvbHZlcixcbiAgICBQYWdlUm9ib3RzUmVzb2x2ZXIsXG4gICAgQ2Fub25pY2FsUGFnZVJlc29sdmVyIHtcbiAgLy8gVE9ETygjMTA0NjcpOiBSZW1vdmUgZGVwcmVjYXRlZCBjb25zdHJ1Y3RvcnNcbiAgY29uc3RydWN0b3IoXG4gICAgY21zU2VydmljZTogQ21zU2VydmljZSxcbiAgICB0cmFuc2xhdGlvbjogVHJhbnNsYXRpb25TZXJ2aWNlLFxuICAgIHJvdXRpbmdQYWdlTWV0YVJlc29sdmVyOiBSb3V0aW5nUGFnZU1ldGFSZXNvbHZlcixcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuaWZpZWQtc2lnbmF0dXJlc1xuICAgIGJhc2VQYWdlTWV0YVJlc29sdmVyPzogQmFzZVBhZ2VNZXRhUmVzb2x2ZXJcbiAgKTtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIHNpbmNlIDMuMSwgd2UnbGwgdXNlIHRoZSBCYXNlUGFnZU1ldGFSZXNvbHZlciBpbiBmdXR1cmUgdmVyc2lvbnMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBjbXNTZXJ2aWNlOiBDbXNTZXJ2aWNlLFxuICAgIHRyYW5zbGF0aW9uOiBUcmFuc2xhdGlvblNlcnZpY2UsXG4gICAgcm91dGluZ1BhZ2VNZXRhUmVzb2x2ZXI6IFJvdXRpbmdQYWdlTWV0YVJlc29sdmVyXG4gICk7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBjbXNTZXJ2aWNlOiBDbXNTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCB0cmFuc2xhdGlvbjogVHJhbnNsYXRpb25TZXJ2aWNlLFxuICAgIHByb3RlY3RlZCByb3V0aW5nUGFnZU1ldGFSZXNvbHZlcjogUm91dGluZ1BhZ2VNZXRhUmVzb2x2ZXIsXG4gICAgcHJvdGVjdGVkIGJhc2VQYWdlTWV0YVJlc29sdmVyPzogQmFzZVBhZ2VNZXRhUmVzb2x2ZXJcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnBhZ2VUeXBlID0gUGFnZVR5cGUuQ09OVEVOVF9QQUdFO1xuICB9XG5cbiAgLyoqXG4gICAqIEJyZWFkY3J1bWIgZm9yIHRoZSBob21lIHBhZ2UuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIHNpbmNlIDMuMSwgYXMgd2UgcmVzb2x2ZSB0aGUgaG9tZUJyZWFkY3J1bWIkIGZyb20gdGhlIGBCYXNlUGFnZU1ldGFSZXNvbHZlcmBcbiAgICovXG4gIC8vIFRPRE8oIzEwNDY3KTogZHJvcCB0aGUgaG9tZUJyZWFkY3J1bWIkIHByb3BlcnR5XG4gIHByb3RlY3RlZCBob21lQnJlYWRjcnVtYiQ6IE9ic2VydmFibGU8XG4gICAgQnJlYWRjcnVtYk1ldGFbXVxuICA+ID0gdGhpcy50cmFuc2xhdGlvblxuICAgIC50cmFuc2xhdGUoJ2NvbW1vbi5ob21lJylcbiAgICAucGlwZShtYXAoKGxhYmVsKSA9PiBbeyBsYWJlbDogbGFiZWwsIGxpbms6ICcvJyB9XSBhcyBCcmVhZGNydW1iTWV0YVtdKSk7XG5cbiAgLyoqXG4gICAqIEFsbCB0aGUgcmVzb2x2ZWQgYnJlYWRjcnVtYnMgKGluY2x1ZGluZyB0aG9zZSBmcm9tIEFuZ3VsYXIgY2hpbGQgcm91dGVzKS5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgc2luY2UgMy4xLCBhcyB3ZSByZXNvbHZlIHRoZSBicmVhZGNydW1icyQgZnJvbSB0aGUgYEJhc2VQYWdlTWV0YVJlc29sdmVyYFxuICAgKi9cbiAgLy8gVE9ETygjMTA0NjcpOiBkcm9wIHRoZSBicmVhZGNydW1icyQgcHJvcGVydHlcbiAgcHJvdGVjdGVkIGJyZWFkY3J1bWJzJDogT2JzZXJ2YWJsZTxCcmVhZGNydW1iTWV0YVtdPiA9IGNvbWJpbmVMYXRlc3QoW1xuICAgIHRoaXMuaG9tZUJyZWFkY3J1bWIkLFxuICAgIGRlZmVyKCgpID0+IHRoaXMucm91dGluZ1BhZ2VNZXRhUmVzb2x2ZXIucmVzb2x2ZUJyZWFkY3J1bWJzKCkpLFxuICBdKS5waXBlKFxuICAgIG1hcCgoYnJlYWRjcnVtYnMpID0+IGJyZWFkY3J1bWJzLmZsYXQoKSksXG4gICAgc2hhcmVSZXBsYXkoeyBidWZmZXJTaXplOiAxLCByZWZDb3VudDogdHJ1ZSB9KVxuICApO1xuXG4gIC8qKlxuICAgKiBIZWxwZXIgdG8gcHJvdmlkZSBhY2Nlc3MgdG8gdGhlIGN1cnJlbnQgQ01TIHBhZ2VcbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgc2luY2UgMy4xLCBhcyB3ZSByZXNvbHZlIHRoZSBjbXMgcGFnZSBkYXRhIGZyb20gdGhlIGBCYXNlUGFnZU1ldGFSZXNvbHZlcmBcbiAgICovXG4gIC8vIFRPRE8oIzEwNDY3KTogZHJvcCB0aGUgY21zJCBwcm9wZXJ0eVxuICBwcm90ZWN0ZWQgY21zJDogT2JzZXJ2YWJsZTxQYWdlPiA9IGRlZmVyKCgpID0+XG4gICAgdGhpcy5jbXNTZXJ2aWNlLmdldEN1cnJlbnRQYWdlKCkucGlwZShmaWx0ZXIoKHApID0+IEJvb2xlYW4ocCkpKVxuICApO1xuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBzaW5jZSAzLjEsIHdlJ2xsIHN0YXJ0IHVzaW5nIHRoZSBgQmFzZVBhZ2VNZXRhUmVzb2x2ZXJgIHRvIHJlc29sdmVcbiAgICogdGhlIHBhZ2UgdGl0bGVcbiAgICovXG4gIC8vIFRPRE8oIzEwNDY3KTogZHJvcCB0aGUgdGl0bGUkIHByb3BlcnR5XG4gIHByb3RlY3RlZCB0aXRsZSQ6IE9ic2VydmFibGU8c3RyaW5nIHwgdW5kZWZpbmVkPiA9IHRoaXMuY21zJC5waXBlKFxuICAgIG1hcCgocCkgPT4gcC50aXRsZSlcbiAgKTtcblxuICAvLyBUT0RPKCMxMDQ2Nyk6IHJlc29sdmUgdGhlIHRpdGxlIGZyb20gdGhlIGBCYXNlUGFnZU1ldGFSZXNvbHZlci5yZXNvbHZlVGl0bGUoKWAgb25seVxuICByZXNvbHZlVGl0bGUoKTogT2JzZXJ2YWJsZTxzdHJpbmcgfCB1bmRlZmluZWQ+IHtcbiAgICByZXR1cm4gdGhpcy5iYXNlUGFnZU1ldGFSZXNvbHZlclxuICAgICAgPyB0aGlzLmJhc2VQYWdlTWV0YVJlc29sdmVyLnJlc29sdmVUaXRsZSgpXG4gICAgICA6IHRoaXMudGl0bGUkO1xuICB9XG5cbiAgcmVzb2x2ZURlc2NyaXB0aW9uKCk6IE9ic2VydmFibGU8c3RyaW5nIHwgdW5kZWZpbmVkPiB7XG4gICAgcmV0dXJuIHRoaXMuYmFzZVBhZ2VNZXRhUmVzb2x2ZXJcbiAgICAgID8gdGhpcy5iYXNlUGFnZU1ldGFSZXNvbHZlci5yZXNvbHZlRGVzY3JpcHRpb24oKVxuICAgICAgOiBvZigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKiBSZXNvbHZlcyBhIHNpbmdsZSBicmVhZGNydW1iIGl0ZW0gdG8gdGhlIGhvbWUgcGFnZSBmb3IgZWFjaCBgQ29udGVudFBhZ2VgLlxuICAgKiBUaGUgaG9tZSBwYWdlIGxhYmVsIGlzIHJlc29sdmVkIGZyb20gdGhlIHRyYW5zbGF0aW9uIHNlcnZpY2UuXG4gICAqL1xuICByZXNvbHZlQnJlYWRjcnVtYnMoKTogT2JzZXJ2YWJsZTxCcmVhZGNydW1iTWV0YVtdIHwgdW5kZWZpbmVkPiB7XG4gICAgcmV0dXJuIHRoaXMuYmFzZVBhZ2VNZXRhUmVzb2x2ZXJcbiAgICAgID8gdGhpcy5iYXNlUGFnZU1ldGFSZXNvbHZlci5yZXNvbHZlQnJlYWRjcnVtYnMoKVxuICAgICAgOiB0aGlzLmJyZWFkY3J1bWJzJDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogVGhpcyBpcyBhZGRlZCBpbiAzLjEgYW5kIHdpbGwgYmUgaWdub3JlZCBpZiB0aGUgYEJhc2VQYWdlTWV0YVJlc29sdmVyYCBpcyBub3RcbiAgICogYXZhaWxhYmxlLlxuICAgKi9cbiAgLy8gVE9ETygjMTA0NjcpIGRyb3AgdGhlIDMuMSBub3RlLlxuICByZXNvbHZlUm9ib3RzKCk6IE9ic2VydmFibGU8UGFnZVJvYm90c01ldGFbXT4ge1xuICAgIHJldHVybiB0aGlzLmJhc2VQYWdlTWV0YVJlc29sdmVyPy5yZXNvbHZlUm9ib3RzKCkgPz8gb2YoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGUgcmVzb2x2ZXMgdGhlIGNhbm9uaWNhbCBwYWdlIGZvciB0aGUgY29udGVudCBwYWdlLlxuICAgKi9cbiAgcmVzb2x2ZUNhbm9uaWNhbFVybCgpOiBPYnNlcnZhYmxlPHN0cmluZyB8IHVuZGVmaW5lZD4ge1xuICAgIHJldHVybiB0aGlzLmJhc2VQYWdlTWV0YVJlc29sdmVyPy5yZXNvbHZlQ2Fub25pY2FsVXJsKCkgPz8gb2YoKTtcbiAgfVxufVxuIl19