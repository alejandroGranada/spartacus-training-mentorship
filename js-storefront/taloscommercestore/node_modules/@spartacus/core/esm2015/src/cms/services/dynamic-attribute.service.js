import { Injectable } from '@angular/core';
import { shareReplay } from 'rxjs/operators';
import { UnifiedInjector } from '../../lazy-loading/unified-injector';
import { SmartEditService } from '../../smart-edit/services/smart-edit.service';
import { getLastValueSync } from '../../util/rxjs/get-last-value-sync';
import { ComponentDecorator } from '../decorators/component-decorator';
import { SlotDecorator } from '../decorators/slot-decorator';
import * as i0 from "@angular/core";
import * as i1 from "../../smart-edit/services/smart-edit.service";
import * as i2 from "../../lazy-loading/unified-injector";
/**
 * Service that used to add dynamic attributes to CMS component
 * and slot elements.
 */
export class DynamicAttributeService {
    constructor(
    // TODO: remove this SmartEditService in 4.0
    smartEditService, unifiedInjector) {
        this.smartEditService = smartEditService;
        this.unifiedInjector = unifiedInjector;
        this.componentDecorators$ = this.unifiedInjector
            .getMulti(ComponentDecorator)
            .pipe(shareReplay(1));
        this.slotDecorators$ = this.unifiedInjector
            .getMulti(SlotDecorator)
            .pipe(shareReplay(1));
    }
    /**
     * @deprecated since 3.2, use functions addAttributesToComponent and addAttributesToSlot instead
     *
     * Add dynamic attributes to DOM.
     * @param element: slot or cms component element
     * @param renderer
     * @param cmsRenderingContext: an object containing properties in each cms item response data
     */
    addDynamicAttributes(element, renderer, cmsRenderingContext) {
        var _a, _b;
        const properties = ((_a = cmsRenderingContext.componentData) === null || _a === void 0 ? void 0 : _a.properties) || ((_b = cmsRenderingContext.slotData) === null || _b === void 0 ? void 0 : _b.properties);
        if (properties && this.smartEditService.isLaunchedInSmartEdit()) {
            // check each group of properties, e.g. smartedit
            Object.keys(properties).forEach((group) => {
                const name = 'data-' + group + '-';
                const groupProps = properties[group];
                // check each property in the group
                Object.keys(groupProps).forEach((propName) => {
                    const propValue = groupProps[propName];
                    if (propName === 'classes') {
                        const classes = propValue.split(' ');
                        classes.forEach((classItem) => {
                            element.classList.add(classItem);
                        });
                    }
                    else {
                        renderer.setAttribute(element, name +
                            propName
                                .split(/(?=[A-Z])/)
                                .join('-')
                                .toLowerCase(), propValue);
                    }
                });
            });
        }
    }
    /**
     * Add dynamic attributes to CMS component element
     * @param element: CMS component element
     * @param renderer
     * @param componentData: component data
     */
    addAttributesToComponent(element, renderer, componentData) {
        if (this.smartEditService.isLaunchedInSmartEdit()) {
            this.addDynamicAttributes(element, renderer, { componentData });
            return;
        }
        (getLastValueSync(this.componentDecorators$) || []).forEach((decorator) => decorator.decorate(element, renderer, componentData));
    }
    /**
     * Add dynamic attributes to CMS slot element
     * @param element: CMS slot element
     * @param renderer
     * @param slotData: slot data
     */
    addAttributesToSlot(element, renderer, slotData) {
        if (this.smartEditService.isLaunchedInSmartEdit()) {
            this.addDynamicAttributes(element, renderer, { slotData });
            return;
        }
        (getLastValueSync(this.slotDecorators$) || []).forEach((decorator) => decorator.decorate(element, renderer, slotData));
    }
}
DynamicAttributeService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DynamicAttributeService_Factory() { return new DynamicAttributeService(i0.ɵɵinject(i1.SmartEditService), i0.ɵɵinject(i2.UnifiedInjector)); }, token: DynamicAttributeService, providedIn: "root" });
DynamicAttributeService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
DynamicAttributeService.ctorParameters = () => [
    { type: SmartEditService },
    { type: UnifiedInjector }
];
//# sourceMappingURL=data:application/json;base64,