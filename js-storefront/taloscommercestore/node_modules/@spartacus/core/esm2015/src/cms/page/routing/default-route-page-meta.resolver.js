import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import { TranslationService } from '../../../i18n/translation.service';
import * as i0 from "@angular/core";
import * as i1 from "../../../i18n/translation.service";
/**
 * Resolves the breadcrumb for the Angular ActivatedRouteSnapshot
 */
export class DefaultRoutePageMetaResolver {
    constructor(translation) {
        this.translation = translation;
    }
    /**
     * Resolves breadcrumb based on the given url and the breadcrumb config.
     *
     * - When breadcrumb config is empty, it returns an empty breadcrumb.
     * - When breadcrumb config is a string or object with `i18n` property,
     *    it translates it and use as a label of the returned breadcrumb.
     * - When breadcrumb config is an object with property `raw`, then
     *    it's used as a label of the returned breadcrumb.
     */
    resolveBreadcrumbs({ url, pageMetaConfig, }) {
        const breadcrumbConfig = pageMetaConfig === null || pageMetaConfig === void 0 ? void 0 : pageMetaConfig.breadcrumb;
        if (!breadcrumbConfig) {
            return of([]);
        }
        if (typeof breadcrumbConfig !== 'string' && breadcrumbConfig.raw) {
            return of([{ link: url, label: breadcrumbConfig.raw }]);
        }
        return this.translateBreadcrumbLabel(breadcrumbConfig).pipe(map((label) => [{ label, link: url }]));
    }
    /**
     * Translates the configured breadcrumb label
     */
    translateBreadcrumbLabel(breadcrumbConfig) {
        const i18nKey = typeof breadcrumbConfig === 'string'
            ? breadcrumbConfig
            : breadcrumbConfig.i18n;
        return this.getParams().pipe(switchMap((params) => this.translation.translate(i18nKey, params !== null && params !== void 0 ? params : {})));
    }
    /**
     * Resolves dynamic data for the whole resolver.
     */
    getParams() {
        return of({});
    }
}
DefaultRoutePageMetaResolver.ɵprov = i0.ɵɵdefineInjectable({ factory: function DefaultRoutePageMetaResolver_Factory() { return new DefaultRoutePageMetaResolver(i0.ɵɵinject(i1.TranslationService)); }, token: DefaultRoutePageMetaResolver, providedIn: "root" });
DefaultRoutePageMetaResolver.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
DefaultRoutePageMetaResolver.ctorParameters = () => [
    { type: TranslationService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1yb3V0ZS1wYWdlLW1ldGEucmVzb2x2ZXIuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvUGF0cnlrL0Rlc2t0b3Avc3BhcnRhY3VzL3Byb2plY3RzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY21zL3BhZ2Uvcm91dGluZy9kZWZhdWx0LXJvdXRlLXBhZ2UtbWV0YS5yZXNvbHZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQzs7O0FBUXZFOztHQUVHO0FBRUgsTUFBTSxPQUFnQiw0QkFBNEI7SUFFaEQsWUFBc0IsV0FBK0I7UUFBL0IsZ0JBQVcsR0FBWCxXQUFXLENBQW9CO0lBQUcsQ0FBQztJQUV6RDs7Ozs7Ozs7T0FRRztJQUNILGtCQUFrQixDQUFDLEVBQ2pCLEdBQUcsRUFDSCxjQUFjLEdBQ2dCO1FBQzlCLE1BQU0sZ0JBQWdCLEdBQUcsY0FBYyxhQUFkLGNBQWMsdUJBQWQsY0FBYyxDQUFFLFVBQVUsQ0FBQztRQUVwRCxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDckIsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDZjtRQUVELElBQUksT0FBTyxnQkFBZ0IsS0FBSyxRQUFRLElBQUksZ0JBQWdCLENBQUMsR0FBRyxFQUFFO1lBQ2hFLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDekQ7UUFFRCxPQUFPLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLElBQUksQ0FDekQsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQ3ZDLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDTyx3QkFBd0IsQ0FDaEMsZ0JBQWdEO1FBRWhELE1BQU0sT0FBTyxHQUNYLE9BQU8sZ0JBQWdCLEtBQUssUUFBUTtZQUNsQyxDQUFDLENBQUMsZ0JBQWdCO1lBQ2xCLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUM7UUFFNUIsT0FBTyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUMxQixTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxNQUFNLGFBQU4sTUFBTSxjQUFOLE1BQU0sR0FBSSxFQUFFLENBQUMsQ0FBQyxDQUN6RSxDQUFDO0lBQ0osQ0FBQztJQUVEOztPQUVHO0lBQ08sU0FBUztRQUNqQixPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNoQixDQUFDOzs7O1lBdERGLFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7OztZQVh6QixrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBUcmFuc2xhdGlvblNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9pMThuL3RyYW5zbGF0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgQnJlYWRjcnVtYk1ldGEgfSBmcm9tICcuLi8uLi9tb2RlbC9wYWdlLm1vZGVsJztcbmltcG9ydCB7XG4gIFJvdXRlQnJlYWRjcnVtYkNvbmZpZyxcbiAgUm91dGVCcmVhZGNydW1iUmVzb2x2ZXIsXG4gIFJvdXRlQnJlYWRjcnVtYlJlc29sdmVyUGFyYW1zLFxufSBmcm9tICcuL3JvdXRlLXBhZ2UtbWV0YS5tb2RlbCc7XG5cbi8qKlxuICogUmVzb2x2ZXMgdGhlIGJyZWFkY3J1bWIgZm9yIHRoZSBBbmd1bGFyIEFjdGl2YXRlZFJvdXRlU25hcHNob3RcbiAqL1xuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBEZWZhdWx0Um91dGVQYWdlTWV0YVJlc29sdmVyXG4gIGltcGxlbWVudHMgUm91dGVCcmVhZGNydW1iUmVzb2x2ZXIge1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgdHJhbnNsYXRpb246IFRyYW5zbGF0aW9uU2VydmljZSkge31cblxuICAvKipcbiAgICogUmVzb2x2ZXMgYnJlYWRjcnVtYiBiYXNlZCBvbiB0aGUgZ2l2ZW4gdXJsIGFuZCB0aGUgYnJlYWRjcnVtYiBjb25maWcuXG4gICAqXG4gICAqIC0gV2hlbiBicmVhZGNydW1iIGNvbmZpZyBpcyBlbXB0eSwgaXQgcmV0dXJucyBhbiBlbXB0eSBicmVhZGNydW1iLlxuICAgKiAtIFdoZW4gYnJlYWRjcnVtYiBjb25maWcgaXMgYSBzdHJpbmcgb3Igb2JqZWN0IHdpdGggYGkxOG5gIHByb3BlcnR5LFxuICAgKiAgICBpdCB0cmFuc2xhdGVzIGl0IGFuZCB1c2UgYXMgYSBsYWJlbCBvZiB0aGUgcmV0dXJuZWQgYnJlYWRjcnVtYi5cbiAgICogLSBXaGVuIGJyZWFkY3J1bWIgY29uZmlnIGlzIGFuIG9iamVjdCB3aXRoIHByb3BlcnR5IGByYXdgLCB0aGVuXG4gICAqICAgIGl0J3MgdXNlZCBhcyBhIGxhYmVsIG9mIHRoZSByZXR1cm5lZCBicmVhZGNydW1iLlxuICAgKi9cbiAgcmVzb2x2ZUJyZWFkY3J1bWJzKHtcbiAgICB1cmwsXG4gICAgcGFnZU1ldGFDb25maWcsXG4gIH06IFJvdXRlQnJlYWRjcnVtYlJlc29sdmVyUGFyYW1zKTogT2JzZXJ2YWJsZTxCcmVhZGNydW1iTWV0YVtdPiB7XG4gICAgY29uc3QgYnJlYWRjcnVtYkNvbmZpZyA9IHBhZ2VNZXRhQ29uZmlnPy5icmVhZGNydW1iO1xuXG4gICAgaWYgKCFicmVhZGNydW1iQ29uZmlnKSB7XG4gICAgICByZXR1cm4gb2YoW10pO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYnJlYWRjcnVtYkNvbmZpZyAhPT0gJ3N0cmluZycgJiYgYnJlYWRjcnVtYkNvbmZpZy5yYXcpIHtcbiAgICAgIHJldHVybiBvZihbeyBsaW5rOiB1cmwsIGxhYmVsOiBicmVhZGNydW1iQ29uZmlnLnJhdyB9XSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudHJhbnNsYXRlQnJlYWRjcnVtYkxhYmVsKGJyZWFkY3J1bWJDb25maWcpLnBpcGUoXG4gICAgICBtYXAoKGxhYmVsKSA9PiBbeyBsYWJlbCwgbGluazogdXJsIH1dKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogVHJhbnNsYXRlcyB0aGUgY29uZmlndXJlZCBicmVhZGNydW1iIGxhYmVsXG4gICAqL1xuICBwcm90ZWN0ZWQgdHJhbnNsYXRlQnJlYWRjcnVtYkxhYmVsKFxuICAgIGJyZWFkY3J1bWJDb25maWc6IHN0cmluZyB8IFJvdXRlQnJlYWRjcnVtYkNvbmZpZ1xuICApOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgIGNvbnN0IGkxOG5LZXkgPVxuICAgICAgdHlwZW9mIGJyZWFkY3J1bWJDb25maWcgPT09ICdzdHJpbmcnXG4gICAgICAgID8gYnJlYWRjcnVtYkNvbmZpZ1xuICAgICAgICA6IGJyZWFkY3J1bWJDb25maWcuaTE4bjtcblxuICAgIHJldHVybiB0aGlzLmdldFBhcmFtcygpLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKHBhcmFtcykgPT4gdGhpcy50cmFuc2xhdGlvbi50cmFuc2xhdGUoaTE4bktleSwgcGFyYW1zID8/IHt9KSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc29sdmVzIGR5bmFtaWMgZGF0YSBmb3IgdGhlIHdob2xlIHJlc29sdmVyLlxuICAgKi9cbiAgcHJvdGVjdGVkIGdldFBhcmFtcygpOiBPYnNlcnZhYmxlPHsgW186IHN0cmluZ106IGFueSB9PiB7XG4gICAgcmV0dXJuIG9mKHt9KTtcbiAgfVxufVxuIl19