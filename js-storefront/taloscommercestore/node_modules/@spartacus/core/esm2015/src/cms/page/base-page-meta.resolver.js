import { Injectable } from '@angular/core';
import { NavigationEnd, Router } from '@angular/router';
import { combineLatest, defer, of } from 'rxjs';
import { filter, map, shareReplay, startWith } from 'rxjs/operators';
import { TranslationService } from '../../i18n/translation.service';
import { CmsService } from '../facade/cms.service';
import { PageLinkService } from './routing/page-link.service';
import { RoutingPageMetaResolver } from './routing/routing-page-meta.resolver';
import * as i0 from "@angular/core";
import * as i1 from "../facade/cms.service";
import * as i2 from "../../i18n/translation.service";
import * as i3 from "./routing/routing-page-meta.resolver";
import * as i4 from "@angular/router";
import * as i5 from "./routing/page-link.service";
// TODO(#10467) make router and pageLinkService standard (non optional arguments)
export class BasePageMetaResolver {
    constructor(cmsService, translation, routingPageMetaResolver, router, pageLinkService) {
        this.cmsService = cmsService;
        this.translation = translation;
        this.routingPageMetaResolver = routingPageMetaResolver;
        this.router = router;
        this.pageLinkService = pageLinkService;
        /**
         * Helper to provide access to the current CMS page
         */
        this.page$ = defer(() => this.cmsService.getCurrentPage()).pipe(filter((p) => Boolean(p)));
        this.title$ = this.page$.pipe(map((p) => p.title));
        this.description$ = this.page$.pipe(map((p) => p.description));
        this.robots$ = this.page$.pipe(map((page) => page.robots || []));
        /**
         * Breadcrumb for the home page.
         */
        this.homeBreadcrumb$ = this.translation
            .translate('common.home')
            .pipe(map((label) => [{ label: label, link: '/' }]));
        /**
         * All the resolved breadcrumbs (including those from Angular child routes).
         */
        this.breadcrumb$ = combineLatest([
            this.homeBreadcrumb$,
            defer(() => { var _a; return (_a = this.routingPageMetaResolver) === null || _a === void 0 ? void 0 : _a.resolveBreadcrumbs(); }),
        ]).pipe(map((breadcrumbs) => breadcrumbs.flat()), shareReplay({ bufferSize: 1, refCount: true }));
    }
    resolveTitle() {
        return this.title$;
    }
    resolveDescription() {
        return this.description$;
    }
    resolveBreadcrumbs() {
        return this.breadcrumb$;
    }
    resolveRobots() {
        return this.robots$;
    }
    resolveCanonicalUrl(options) {
        return this.router && this.pageLinkService
            ? this.router.events.pipe(filter((ev) => ev instanceof NavigationEnd), startWith(null), 
            // TODO(#10467) the pageLinkService will no longer be optional
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            map(() => { var _a; return (_a = this.pageLinkService.getCanonicalUrl(options)) !== null && _a !== void 0 ? _a : ''; }))
            : of();
    }
}
BasePageMetaResolver.ɵprov = i0.ɵɵdefineInjectable({ factory: function BasePageMetaResolver_Factory() { return new BasePageMetaResolver(i0.ɵɵinject(i1.CmsService), i0.ɵɵinject(i2.TranslationService), i0.ɵɵinject(i3.RoutingPageMetaResolver), i0.ɵɵinject(i4.Router), i0.ɵɵinject(i5.PageLinkService)); }, token: BasePageMetaResolver, providedIn: "root" });
BasePageMetaResolver.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
BasePageMetaResolver.ctorParameters = () => [
    { type: CmsService },
    { type: TranslationService },
    { type: RoutingPageMetaResolver },
    { type: Router },
    { type: PageLinkService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1wYWdlLW1ldGEucmVzb2x2ZXIuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvUGF0cnlrL0Rlc2t0b3Avc3BhcnRhY3VzL3Byb2plY3RzL2NvcmUvIiwic291cmNlcyI6WyJzcmMvY21zL3BhZ2UvYmFzZS1wYWdlLW1ldGEucmVzb2x2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM1RCxPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDcEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBVW5ELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQzs7Ozs7OztBQU0vRSxpRkFBaUY7QUFDakYsTUFBTSxPQUFPLG9CQUFvQjtJQU8vQixZQUNZLFVBQXNCLEVBQ3RCLFdBQStCLEVBQy9CLHVCQUFnRCxFQUNoRCxNQUFlLEVBQ2YsZUFBaUM7UUFKakMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0QixnQkFBVyxHQUFYLFdBQVcsQ0FBb0I7UUFDL0IsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5QjtRQUNoRCxXQUFNLEdBQU4sTUFBTSxDQUFTO1FBQ2Ysb0JBQWUsR0FBZixlQUFlLENBQWtCO1FBRzdDOztXQUVHO1FBQ08sVUFBSyxHQUFxQixLQUFLLENBQUMsR0FBRyxFQUFFLENBQzdDLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLENBQ2pDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV4QixXQUFNLEdBQW1DLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUNoRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FDcEIsQ0FBQztRQUVRLGlCQUFZLEdBQW1DLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUN0RSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FDMUIsQ0FBQztRQUVRLFlBQU8sR0FBaUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQy9ELEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsQ0FDakMsQ0FBQztRQUVGOztXQUVHO1FBQ08sb0JBQWUsR0FFckIsSUFBSSxDQUFDLFdBQVc7YUFDakIsU0FBUyxDQUFDLGFBQWEsQ0FBQzthQUN4QixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQXFCLENBQUMsQ0FBQyxDQUFDO1FBRTNFOztXQUVHO1FBQ08sZ0JBQVcsR0FBaUMsYUFBYSxDQUFDO1lBQ2xFLElBQUksQ0FBQyxlQUFlO1lBQ3BCLEtBQUssQ0FBQyxHQUFHLEVBQUUsd0JBQUMsSUFBSSxDQUFDLHVCQUF1QiwwQ0FBRSxrQkFBa0IsS0FBRSxDQUFDO1NBQ2hFLENBQUMsQ0FBQyxJQUFJLENBQ0wsR0FBRyxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUMsRUFDeEMsV0FBVyxDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FDL0MsQ0FBQztJQXZDQyxDQUFDO0lBeUNKLFlBQVk7UUFDVixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUVELGtCQUFrQjtRQUNoQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDM0IsQ0FBQztJQUVELGtCQUFrQjtRQUNoQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQztJQUVELGFBQWE7UUFDWCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVELG1CQUFtQixDQUFDLE9BQTZCO1FBQy9DLE9BQU8sSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsZUFBZTtZQUN4QyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNyQixNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsWUFBWSxhQUFhLENBQUMsRUFDM0MsU0FBUyxDQUFDLElBQUksQ0FBQztZQUNmLDhEQUE4RDtZQUM5RCxvRUFBb0U7WUFDcEUsR0FBRyxDQUFDLEdBQUcsRUFBRSx3QkFBQyxJQUFJLENBQUMsZUFBZ0IsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLG1DQUFJLEVBQUUsR0FBQSxDQUFDLENBQ2hFO1lBQ0gsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBQ1gsQ0FBQzs7OztZQXJGRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7OztZQWZRLFVBQVU7WUFEVixrQkFBa0I7WUFZbEIsdUJBQXVCO1lBZlIsTUFBTTtZQWNyQixlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmF2aWdhdGlvbkVuZCwgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IGNvbWJpbmVMYXRlc3QsIGRlZmVyLCBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyLCBtYXAsIHNoYXJlUmVwbGF5LCBzdGFydFdpdGggfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBUcmFuc2xhdGlvblNlcnZpY2UgfSBmcm9tICcuLi8uLi9pMThuL3RyYW5zbGF0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ21zU2VydmljZSB9IGZyb20gJy4uL2ZhY2FkZS9jbXMuc2VydmljZSc7XG5pbXBvcnQgeyBCcmVhZGNydW1iTWV0YSwgUGFnZSwgUGFnZVJvYm90c01ldGEgfSBmcm9tICcuLi9tb2RlbC9wYWdlLm1vZGVsJztcbmltcG9ydCB7IENhbm9uaWNhbFVybE9wdGlvbnMgfSBmcm9tICcuL2NvbmZpZy9wYWdlLW1ldGEuY29uZmlnJztcbmltcG9ydCB7XG4gIENhbm9uaWNhbFBhZ2VSZXNvbHZlcixcbiAgUGFnZUJyZWFkY3J1bWJSZXNvbHZlcixcbiAgUGFnZURlc2NyaXB0aW9uUmVzb2x2ZXIsXG4gIFBhZ2VSb2JvdHNSZXNvbHZlcixcbiAgUGFnZVRpdGxlUmVzb2x2ZXIsXG59IGZyb20gJy4vcGFnZS5yZXNvbHZlcnMnO1xuaW1wb3J0IHsgUGFnZUxpbmtTZXJ2aWNlIH0gZnJvbSAnLi9yb3V0aW5nL3BhZ2UtbGluay5zZXJ2aWNlJztcbmltcG9ydCB7IFJvdXRpbmdQYWdlTWV0YVJlc29sdmVyIH0gZnJvbSAnLi9yb3V0aW5nL3JvdXRpbmctcGFnZS1tZXRhLnJlc29sdmVyJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuXG4vLyBUT0RPKCMxMDQ2NykgbWFrZSByb3V0ZXIgYW5kIHBhZ2VMaW5rU2VydmljZSBzdGFuZGFyZCAobm9uIG9wdGlvbmFsIGFyZ3VtZW50cylcbmV4cG9ydCBjbGFzcyBCYXNlUGFnZU1ldGFSZXNvbHZlclxuICBpbXBsZW1lbnRzXG4gICAgUGFnZVRpdGxlUmVzb2x2ZXIsXG4gICAgUGFnZURlc2NyaXB0aW9uUmVzb2x2ZXIsXG4gICAgUGFnZUJyZWFkY3J1bWJSZXNvbHZlcixcbiAgICBQYWdlUm9ib3RzUmVzb2x2ZXIsXG4gICAgQ2Fub25pY2FsUGFnZVJlc29sdmVyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGNtc1NlcnZpY2U6IENtc1NlcnZpY2UsXG4gICAgcHJvdGVjdGVkIHRyYW5zbGF0aW9uOiBUcmFuc2xhdGlvblNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIHJvdXRpbmdQYWdlTWV0YVJlc29sdmVyOiBSb3V0aW5nUGFnZU1ldGFSZXNvbHZlcixcbiAgICBwcm90ZWN0ZWQgcm91dGVyPzogUm91dGVyLFxuICAgIHByb3RlY3RlZCBwYWdlTGlua1NlcnZpY2U/OiBQYWdlTGlua1NlcnZpY2VcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBIZWxwZXIgdG8gcHJvdmlkZSBhY2Nlc3MgdG8gdGhlIGN1cnJlbnQgQ01TIHBhZ2VcbiAgICovXG4gIHByb3RlY3RlZCBwYWdlJDogT2JzZXJ2YWJsZTxQYWdlPiA9IGRlZmVyKCgpID0+XG4gICAgdGhpcy5jbXNTZXJ2aWNlLmdldEN1cnJlbnRQYWdlKClcbiAgKS5waXBlKGZpbHRlcigocCkgPT4gQm9vbGVhbihwKSkpO1xuXG4gIHByb3RlY3RlZCB0aXRsZSQ6IE9ic2VydmFibGU8c3RyaW5nIHwgdW5kZWZpbmVkPiA9IHRoaXMucGFnZSQucGlwZShcbiAgICBtYXAoKHApID0+IHAudGl0bGUpXG4gICk7XG5cbiAgcHJvdGVjdGVkIGRlc2NyaXB0aW9uJDogT2JzZXJ2YWJsZTxzdHJpbmcgfCB1bmRlZmluZWQ+ID0gdGhpcy5wYWdlJC5waXBlKFxuICAgIG1hcCgocCkgPT4gcC5kZXNjcmlwdGlvbilcbiAgKTtcblxuICBwcm90ZWN0ZWQgcm9ib3RzJDogT2JzZXJ2YWJsZTxQYWdlUm9ib3RzTWV0YVtdPiA9IHRoaXMucGFnZSQucGlwZShcbiAgICBtYXAoKHBhZ2UpID0+IHBhZ2Uucm9ib3RzIHx8IFtdKVxuICApO1xuXG4gIC8qKlxuICAgKiBCcmVhZGNydW1iIGZvciB0aGUgaG9tZSBwYWdlLlxuICAgKi9cbiAgcHJvdGVjdGVkIGhvbWVCcmVhZGNydW1iJDogT2JzZXJ2YWJsZTxcbiAgICBCcmVhZGNydW1iTWV0YVtdXG4gID4gPSB0aGlzLnRyYW5zbGF0aW9uXG4gICAgLnRyYW5zbGF0ZSgnY29tbW9uLmhvbWUnKVxuICAgIC5waXBlKG1hcCgobGFiZWwpID0+IFt7IGxhYmVsOiBsYWJlbCwgbGluazogJy8nIH1dIGFzIEJyZWFkY3J1bWJNZXRhW10pKTtcblxuICAvKipcbiAgICogQWxsIHRoZSByZXNvbHZlZCBicmVhZGNydW1icyAoaW5jbHVkaW5nIHRob3NlIGZyb20gQW5ndWxhciBjaGlsZCByb3V0ZXMpLlxuICAgKi9cbiAgcHJvdGVjdGVkIGJyZWFkY3J1bWIkOiBPYnNlcnZhYmxlPEJyZWFkY3J1bWJNZXRhW10+ID0gY29tYmluZUxhdGVzdChbXG4gICAgdGhpcy5ob21lQnJlYWRjcnVtYiQsXG4gICAgZGVmZXIoKCkgPT4gdGhpcy5yb3V0aW5nUGFnZU1ldGFSZXNvbHZlcj8ucmVzb2x2ZUJyZWFkY3J1bWJzKCkpLFxuICBdKS5waXBlKFxuICAgIG1hcCgoYnJlYWRjcnVtYnMpID0+IGJyZWFkY3J1bWJzLmZsYXQoKSksXG4gICAgc2hhcmVSZXBsYXkoeyBidWZmZXJTaXplOiAxLCByZWZDb3VudDogdHJ1ZSB9KVxuICApO1xuXG4gIHJlc29sdmVUaXRsZSgpOiBPYnNlcnZhYmxlPHN0cmluZyB8IHVuZGVmaW5lZD4ge1xuICAgIHJldHVybiB0aGlzLnRpdGxlJDtcbiAgfVxuXG4gIHJlc29sdmVEZXNjcmlwdGlvbigpOiBPYnNlcnZhYmxlPHN0cmluZyB8IHVuZGVmaW5lZD4ge1xuICAgIHJldHVybiB0aGlzLmRlc2NyaXB0aW9uJDtcbiAgfVxuXG4gIHJlc29sdmVCcmVhZGNydW1icygpOiBPYnNlcnZhYmxlPEJyZWFkY3J1bWJNZXRhW10gfCB1bmRlZmluZWQ+IHtcbiAgICByZXR1cm4gdGhpcy5icmVhZGNydW1iJDtcbiAgfVxuXG4gIHJlc29sdmVSb2JvdHMoKTogT2JzZXJ2YWJsZTxQYWdlUm9ib3RzTWV0YVtdPiB7XG4gICAgcmV0dXJuIHRoaXMucm9ib3RzJDtcbiAgfVxuXG4gIHJlc29sdmVDYW5vbmljYWxVcmwob3B0aW9ucz86IENhbm9uaWNhbFVybE9wdGlvbnMpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLnJvdXRlciAmJiB0aGlzLnBhZ2VMaW5rU2VydmljZVxuICAgICAgPyB0aGlzLnJvdXRlci5ldmVudHMucGlwZShcbiAgICAgICAgICBmaWx0ZXIoKGV2KSA9PiBldiBpbnN0YW5jZW9mIE5hdmlnYXRpb25FbmQpLFxuICAgICAgICAgIHN0YXJ0V2l0aChudWxsKSxcbiAgICAgICAgICAvLyBUT0RPKCMxMDQ2NykgdGhlIHBhZ2VMaW5rU2VydmljZSB3aWxsIG5vIGxvbmdlciBiZSBvcHRpb25hbFxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgbWFwKCgpID0+IHRoaXMucGFnZUxpbmtTZXJ2aWNlIS5nZXRDYW5vbmljYWxVcmwob3B0aW9ucykgPz8gJycpXG4gICAgICAgIClcbiAgICAgIDogb2YoKTtcbiAgfVxufVxuIl19