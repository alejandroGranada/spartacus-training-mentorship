import { isPlatformBrowser } from '@angular/common';
import { Inject, Injectable, isDevMode, PLATFORM_ID } from '@angular/core';
import { defer, of } from 'rxjs';
import { filter, map, shareReplay, switchMap } from 'rxjs/operators';
import { UnifiedInjector } from '../../lazy-loading/unified-injector';
import { resolveApplicable } from '../../util/applicable';
import { uniteLatest } from '../../util/rxjs/unite-latest';
import { PageMetaConfig } from '../page/config/page-meta.config';
import { PageMetaResolver } from '../page/page-meta.resolver';
import { CmsService } from './cms.service';
import * as i0 from "@angular/core";
import * as i1 from "./cms.service";
import * as i2 from "../../lazy-loading/unified-injector";
import * as i3 from "../page/config/page-meta.config";
/**
 * Service that collects the page meta data by using injected page resolvers.
 *
 * Deprecation note: with version 4.0, we'll make the optional constructor arguments mandatory.
 */
// TODO(#10467): Remove and deprecated note.
export class PageMetaService {
    // TODO(#10467): Drop optional constructor arguments.
    constructor(cms, unifiedInjector, pageMetaConfig, platformId) {
        this.cms = cms;
        this.unifiedInjector = unifiedInjector;
        this.pageMetaConfig = pageMetaConfig;
        this.platformId = platformId;
        this.resolvers$ = this.unifiedInjector
            ? this.unifiedInjector
                .getMulti(PageMetaResolver)
                .pipe(shareReplay({ bufferSize: 1, refCount: true }))
            : of();
        /**
         * The list of resolver interfaces will be evaluated for the pageResolvers.
         *
         * @deprecated since 3.1, use the configured resolvers instead from `PageMetaConfig.resolvers`.
         */
        // TODO(#10467): Remove and migrate property
        this.resolverMethods = {
            title: 'resolveTitle',
            heading: 'resolveHeading',
            description: 'resolveDescription',
            breadcrumbs: 'resolveBreadcrumbs',
            image: 'resolveImage',
            robots: 'resolveRobots',
        };
        this.meta$ = defer(() => this.cms.getCurrentPage()).pipe(filter((page) => Boolean(page)), switchMap((page) => this.getMetaResolver(page)), switchMap((metaResolver) => metaResolver ? this.resolve(metaResolver) : of(null)), shareReplay({ bufferSize: 1, refCount: true }));
    }
    /**
     * Returns the observed page meta data for the current page.
     *
     * The data is resolved by various PageResolvers, which are configurable.
     */
    getMeta() {
        return this.meta$;
    }
    /**
     * If a `PageResolver` has implemented a resolver interface, the resolved data
     * is merged into the `PageMeta` object.
     * @param metaResolver
     */
    resolve(metaResolver) {
        const resolverMethods = this.getResolverMethods();
        const resolvedData = Object.keys(resolverMethods)
            .filter((key) => metaResolver[resolverMethods[key]])
            .map((key) => {
            return metaResolver[resolverMethods[key]]().pipe(map((data) => ({ [key]: data })));
        });
        return uniteLatest(resolvedData).pipe(map((data) => Object.assign({}, ...data)));
    }
    /**
     * Returns an object with resolvers. The object properties represent the `PageMeta` property, i.e.:
     *
     * ```
     * {
     *   title: 'resolveTitle',
     *   robots: 'resolveRobots'
     * }
     * ```
     *
     * This list of resolvers is filtered for CSR vs SSR processing since not all resolvers are
     * relevant during browsing.
     */
    getResolverMethods() {
        var _a, _b;
        let resolverMethods = {};
        const configured = (_b = (_a = this.pageMetaConfig) === null || _a === void 0 ? void 0 : _a.pageMeta) === null || _b === void 0 ? void 0 : _b.resolvers;
        if (configured) {
            configured
                // filter the resolvers to avoid unnecessary processing in CSR
                .filter((resolver) => {
                var _a, _b, _c;
                return (
                // always resolve in SSR
                !isPlatformBrowser((_a = this.platformId) !== null && _a !== void 0 ? _a : '') ||
                    // resolve in CSR when it's not disabled
                    !resolver.disabledInCsr ||
                    // resolve in CSR when resolver is enabled in devMode
                    (isDevMode() && ((_c = (_b = this.pageMetaConfig) === null || _b === void 0 ? void 0 : _b.pageMeta) === null || _c === void 0 ? void 0 : _c.enableInDevMode)));
            })
                .forEach((resolver) => (resolverMethods[resolver.property] = resolver.method));
        }
        else {
            resolverMethods = this.resolverMethods;
        }
        return resolverMethods;
    }
    /**
     * Return the resolver with the best match, based on a score
     * generated by the resolver.
     *
     * Resolvers match by default on `PageType` and `page.template`.
     */
    getMetaResolver(page) {
        return this.resolvers$.pipe(map((resolvers) => resolveApplicable(resolvers, [page], [page])));
    }
}
PageMetaService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PageMetaService_Factory() { return new PageMetaService(i0.ɵɵinject(i1.CmsService), i0.ɵɵinject(i2.UnifiedInjector), i0.ɵɵinject(i3.PageMetaConfig), i0.ɵɵinject(i0.PLATFORM_ID)); }, token: PageMetaService, providedIn: "root" });
PageMetaService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
PageMetaService.ctorParameters = () => [
    { type: CmsService },
    { type: UnifiedInjector },
    { type: PageMetaConfig },
    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
//# sourceMappingURL=data:application/json;base64,