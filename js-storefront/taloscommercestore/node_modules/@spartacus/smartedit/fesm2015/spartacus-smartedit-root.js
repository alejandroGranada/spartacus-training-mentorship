import { ɵɵdefineInjectable, ɵɵinject, Injectable, NgModule, APP_INITIALIZER } from '@angular/core';
import { Config, FeatureModulesService, provideDefaultConfig } from '@spartacus/core';
import { Location } from '@angular/common';
import { HTTP_INTERCEPTORS } from '@angular/common/http';

class SmartEditConfig {
}
SmartEditConfig.ɵprov = ɵɵdefineInjectable({ factory: function SmartEditConfig_Factory() { return ɵɵinject(Config); }, token: SmartEditConfig, providedIn: "root" });
SmartEditConfig.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
                useExisting: Config,
            },] }
];

const SMART_EDIT_FEATURE = 'smartEdit';

/**
 * The SmartEditLauncherService is used to check whether Spartacus is launched inside Smart Edit;
 * it also gets cmsTicketId sent from Smart Edit.
 */
class SmartEditLauncherService {
    constructor(config, location, featureModules) {
        this.config = config;
        this.location = location;
        this.featureModules = featureModules;
    }
    get cmsTicketId() {
        return this._cmsTicketId;
    }
    /**
     * Lazy loads modules when Spartacus launced inside Smart Edit
     */
    load() {
        if (this.isLaunchedInSmartEdit() &&
            this.featureModules.isConfigured('smartEdit')) {
            this.featureModules.resolveFeature('smartEdit').subscribe();
        }
    }
    /**
     * Indicates whether Spartacus is launched in SmartEdit
     */
    isLaunchedInSmartEdit() {
        const path = this.location.path().split('?')[0];
        const params = this.location.path().split('?')[1];
        const cmsToken = params === null || params === void 0 ? void 0 : params.split('&').find((param) => param.startsWith('cmsTicketId='));
        this._cmsTicketId = cmsToken === null || cmsToken === void 0 ? void 0 : cmsToken.split('=')[1];
        return (path.split('/').pop() === this.config.smartEdit.storefrontPreviewRoute &&
            !!this._cmsTicketId);
    }
}
SmartEditLauncherService.ɵprov = ɵɵdefineInjectable({ factory: function SmartEditLauncherService_Factory() { return new SmartEditLauncherService(ɵɵinject(SmartEditConfig), ɵɵinject(Location), ɵɵinject(FeatureModulesService)); }, token: SmartEditLauncherService, providedIn: "root" });
SmartEditLauncherService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
SmartEditLauncherService.ctorParameters = () => [
    { type: SmartEditConfig },
    { type: Location },
    { type: FeatureModulesService }
];

const defaultSmartEditConfig = {
    smartEdit: {
        storefrontPreviewRoute: 'cx-preview',
        allowOrigin: 'localhost:9002',
    },
};

class CmsTicketInterceptor {
    constructor(service) {
        this.service = service;
    }
    intercept(request, next) {
        if (this.service.cmsTicketId && request.url.includes('/cms/')) {
            request = request.clone({
                setParams: {
                    cmsTicketId: this.service.cmsTicketId,
                },
            });
        }
        return next.handle(request);
    }
}
CmsTicketInterceptor.ɵprov = ɵɵdefineInjectable({ factory: function CmsTicketInterceptor_Factory() { return new CmsTicketInterceptor(ɵɵinject(SmartEditLauncherService)); }, token: CmsTicketInterceptor, providedIn: "root" });
CmsTicketInterceptor.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
CmsTicketInterceptor.ctorParameters = () => [
    { type: SmartEditLauncherService }
];

const interceptors = [
    {
        provide: HTTP_INTERCEPTORS,
        useExisting: CmsTicketInterceptor,
        multi: true,
    },
];

function smartEditFactory(smartEditLauncherService) {
    const isReady = () => {
        smartEditLauncherService.load();
    };
    return isReady;
}
class SmartEditRootModule {
}
SmartEditRootModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    ...interceptors,
                    provideDefaultConfig(defaultSmartEditConfig),
                    {
                        provide: APP_INITIALIZER,
                        useFactory: smartEditFactory,
                        deps: [SmartEditLauncherService],
                        multi: true,
                    },
                ],
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { SMART_EDIT_FEATURE, SmartEditConfig, SmartEditLauncherService, SmartEditRootModule, smartEditFactory, interceptors as ɵa, CmsTicketInterceptor as ɵb, defaultSmartEditConfig as ɵc };
//# sourceMappingURL=spartacus-smartedit-root.js.map
