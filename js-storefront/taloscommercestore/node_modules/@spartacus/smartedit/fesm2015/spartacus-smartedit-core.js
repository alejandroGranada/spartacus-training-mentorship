import { ɵɵdefineInjectable, ɵɵinject, NgZone, RendererFactory2, Injectable, NgModule } from '@angular/core';
import { PageType, CmsService, RoutingService, BaseSiteService, WindowRef, ScriptLoader, ComponentDecorator, SlotDecorator } from '@spartacus/core';
import { SmartEditConfig } from '@spartacus/smartedit/root';
import { filter, take } from 'rxjs/operators';

class SmartEditService {
    constructor(cmsService, routingService, baseSiteService, zone, winRef, rendererFactory, config, scriptLoader) {
        this.cmsService = cmsService;
        this.routingService = routingService;
        this.baseSiteService = baseSiteService;
        this.zone = zone;
        this.winRef = winRef;
        this.rendererFactory = rendererFactory;
        this.config = config;
        this.scriptLoader = scriptLoader;
        this.isPreviewPage = false;
        // load webApplicationInjector.js first
        this.loadScript();
        if (winRef.nativeWindow) {
            const window = winRef.nativeWindow;
            // rerender components and slots after editing
            window.smartedit = window.smartedit || {};
            window.smartedit.renderComponent = (componentId, componentType, parentId) => {
                return this.renderComponent(componentId, componentType, parentId);
            };
            // reprocess page
            window.smartedit.reprocessPage = this.reprocessPage;
        }
    }
    processCmsPage() {
        this.baseSiteService
            .get()
            .pipe(filter((site) => Boolean(site)), take(1))
            .subscribe((site) => {
            this.defaultPreviewCategoryCode = site.defaultPreviewCategoryCode;
            this.defaultPreviewProductCode = site.defaultPreviewProductCode;
            this.cmsService
                .getCurrentPage()
                .pipe(filter(Boolean))
                .subscribe((cmsPage) => {
                this._currentPageId = cmsPage.pageId;
                // before adding contract to page, we need redirect to that page
                this.goToPreviewPage(cmsPage);
                this.addPageContract(cmsPage);
            });
        });
    }
    /**
     * load webApplicationInjector.js
     */
    loadScript() {
        this.scriptLoader.embedScript({
            src: 'assets/webApplicationInjector.js',
            params: undefined,
            attributes: {
                id: 'text/smartedit-injector',
                'data-smartedit-allow-origin': this.config.smartEdit.allowOrigin,
            },
        });
    }
    /**
     * add CSS classes in a body tag
     */
    addPageContract(cmsPage) {
        const renderer = this.rendererFactory.createRenderer('body', null);
        const element = this.winRef.document.body;
        // remove old page contract
        const previousContract = [];
        Array.from(element.classList).forEach((attr) => previousContract.push(attr));
        previousContract.forEach((attr) => renderer.removeClass(element, attr));
        // add new page contract
        this.addSmartEditContract(element, renderer, cmsPage.properties);
    }
    /**
     * go to the default preview page
     */
    goToPreviewPage(cmsPage) {
        // only the first page is the smartedit preview page
        if (!this.isPreviewPage) {
            this.isPreviewPage = true;
            if (cmsPage.type === PageType.PRODUCT_PAGE &&
                this.defaultPreviewProductCode) {
                this.routingService.go({
                    cxRoute: 'product',
                    params: { code: this.defaultPreviewProductCode, name: '' },
                });
            }
            else if (cmsPage.type === PageType.CATEGORY_PAGE &&
                this.defaultPreviewCategoryCode) {
                this.routingService.go({
                    cxRoute: 'category',
                    params: { code: this.defaultPreviewCategoryCode },
                });
            }
        }
    }
    /**
     * re-render CMS components and slots
     */
    renderComponent(componentId, componentType, parentId) {
        if (componentId) {
            this.zone.run(() => {
                // without parentId, it is slot
                if (!parentId) {
                    if (this._currentPageId) {
                        this.cmsService.refreshPageById(this._currentPageId);
                    }
                    else {
                        this.cmsService.refreshLatestPage();
                    }
                }
                else if (componentType) {
                    this.cmsService.refreshComponent(componentId);
                }
            });
        }
        return true;
    }
    reprocessPage() {
        // TODO: reprocess page API
    }
    /**
     * add smartedit HTML markup contract
     */
    addSmartEditContract(element, renderer, properties) {
        if (properties) {
            // check each group of properties, e.g. smartedit
            Object.keys(properties).forEach((group) => {
                const name = 'data-' + group + '-';
                const groupProps = properties[group];
                // check each property in the group
                Object.keys(groupProps).forEach((propName) => {
                    const propValue = groupProps[propName];
                    if (propName === 'classes') {
                        const classes = propValue.split(' ');
                        classes.forEach((classItem) => {
                            renderer.addClass(element, classItem);
                        });
                    }
                    else {
                        renderer.setAttribute(element, name +
                            propName
                                .split(/(?=[A-Z])/)
                                .join('-')
                                .toLowerCase(), propValue);
                    }
                });
            });
        }
    }
}
SmartEditService.ɵprov = ɵɵdefineInjectable({ factory: function SmartEditService_Factory() { return new SmartEditService(ɵɵinject(CmsService), ɵɵinject(RoutingService), ɵɵinject(BaseSiteService), ɵɵinject(NgZone), ɵɵinject(WindowRef), ɵɵinject(RendererFactory2), ɵɵinject(SmartEditConfig), ɵɵinject(ScriptLoader)); }, token: SmartEditService, providedIn: "root" });
SmartEditService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
SmartEditService.ctorParameters = () => [
    { type: CmsService },
    { type: RoutingService },
    { type: BaseSiteService },
    { type: NgZone },
    { type: WindowRef },
    { type: RendererFactory2 },
    { type: SmartEditConfig },
    { type: ScriptLoader }
];

class SmartEditComponentDecorator extends ComponentDecorator {
    constructor(smartEditService) {
        super();
        this.smartEditService = smartEditService;
    }
    decorate(element, renderer, component) {
        if (component) {
            this.smartEditService.addSmartEditContract(element, renderer, component.properties);
        }
    }
}
SmartEditComponentDecorator.ɵprov = ɵɵdefineInjectable({ factory: function SmartEditComponentDecorator_Factory() { return new SmartEditComponentDecorator(ɵɵinject(SmartEditService)); }, token: SmartEditComponentDecorator, providedIn: "root" });
SmartEditComponentDecorator.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
SmartEditComponentDecorator.ctorParameters = () => [
    { type: SmartEditService }
];

class SmartEditSlotDecorator extends SlotDecorator {
    constructor(smartEditService) {
        super();
        this.smartEditService = smartEditService;
    }
    decorate(element, renderer, slot) {
        if (slot) {
            this.smartEditService.addSmartEditContract(element, renderer, slot.properties);
        }
    }
}
SmartEditSlotDecorator.ɵprov = ɵɵdefineInjectable({ factory: function SmartEditSlotDecorator_Factory() { return new SmartEditSlotDecorator(ɵɵinject(SmartEditService)); }, token: SmartEditSlotDecorator, providedIn: "root" });
SmartEditSlotDecorator.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
SmartEditSlotDecorator.ctorParameters = () => [
    { type: SmartEditService }
];

const smartEditDecorators = [
    {
        provide: ComponentDecorator,
        useExisting: SmartEditComponentDecorator,
        multi: true,
    },
    {
        provide: SlotDecorator,
        useExisting: SmartEditSlotDecorator,
        multi: true,
    },
];

class SmartEditCoreModule {
    constructor(smartEditService) {
        this.smartEditService = smartEditService;
        this.smartEditService.processCmsPage();
    }
}
SmartEditCoreModule.decorators = [
    { type: NgModule, args: [{
                providers: [...smartEditDecorators],
            },] }
];
SmartEditCoreModule.ctorParameters = () => [
    { type: SmartEditService }
];

/**
 * Generated bundle index. Do not edit.
 */

export { SmartEditCoreModule, SmartEditService, smartEditDecorators as ɵa, SmartEditComponentDecorator as ɵb, SmartEditSlotDecorator as ɵc };
//# sourceMappingURL=spartacus-smartedit-core.js.map
