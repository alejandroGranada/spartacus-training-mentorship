(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/router'), require('@spartacus/core'), require('@spartacus/storefront'), require('rxjs'), require('rxjs/operators'), require('@spartacus/user/profile/root'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('@spartacus/user/profile/components', ['exports', '@angular/common', '@angular/core', '@angular/router', '@spartacus/core', '@spartacus/storefront', 'rxjs', 'rxjs/operators', '@spartacus/user/profile/root', '@angular/forms'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.spartacus = global.spartacus || {}, global.spartacus.user = global.spartacus.user || {}, global.spartacus.user.profile = global.spartacus.user.profile || {}, global.spartacus.user.profile.components = {}), global.ng.common, global.ng.core, global.ng.router, global.core, global.storefront, global.rxjs, global.rxjs.operators, global.spartacus.user.profile.root, global.ng.forms));
}(this, (function (exports, common, core$1, router, core, storefront, rxjs, operators, root, forms) { 'use strict';

    var CloseAccountModalComponent = /** @class */ (function () {
        function CloseAccountModalComponent(modalService, authService, globalMessageService, routingService, translationService, userProfile) {
            this.modalService = modalService;
            this.authService = authService;
            this.globalMessageService = globalMessageService;
            this.routingService = routingService;
            this.translationService = translationService;
            this.userProfile = userProfile;
            this.iconTypes = storefront.ICON_TYPE;
            this.isLoading$ = new rxjs.BehaviorSubject(false);
        }
        CloseAccountModalComponent.prototype.ngOnInit = function () {
            this.isLoggedIn$ = this.authService.isUserLoggedIn();
        };
        CloseAccountModalComponent.prototype.onSuccess = function () {
            var _this = this;
            this.dismissModal();
            this.translationService
                .translate('closeAccount.accountClosedSuccessfully')
                .pipe(operators.first())
                .subscribe(function (text) {
                _this.globalMessageService.add(text, core.GlobalMessageType.MSG_TYPE_CONFIRMATION);
            });
            this.routingService.go({ cxRoute: 'home' });
        };
        CloseAccountModalComponent.prototype.onError = function () {
            var _this = this;
            this.dismissModal();
            this.translationService
                .translate('closeAccount.accountClosedFailure')
                .pipe(operators.first())
                .subscribe(function (text) {
                _this.globalMessageService.add(text, core.GlobalMessageType.MSG_TYPE_ERROR);
            });
        };
        CloseAccountModalComponent.prototype.dismissModal = function (reason) {
            this.modalService.dismissActiveModal(reason);
        };
        CloseAccountModalComponent.prototype.closeAccount = function () {
            var _this = this;
            this.isLoading$.next(true);
            this.userProfile.close().subscribe({
                next: function () {
                    _this.onSuccess();
                    _this.isLoading$.next(false);
                },
                error: function () {
                    _this.onError();
                    _this.isLoading$.next(false);
                },
            });
        };
        return CloseAccountModalComponent;
    }());
    CloseAccountModalComponent.decorators = [
        { type: core$1.Component, args: [{
                    selector: 'cx-close-account-modal',
                    template: "<ng-container *ngIf=\"isLoggedIn$ | async\">\n  <div class=\"modal-header cx-dialog-header\">\n    <h3 class=\"modal-title\">\n      {{ 'closeAccount.confirmAccountClosure' | cxTranslate }}\n    </h3>\n    <button\n      type=\"button\"\n      class=\"close\"\n      aria-label=\"Close\"\n      (click)=\"dismissModal()\"\n    >\n      <span aria-hidden=\"true\">\n        <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\n      </span>\n    </button>\n  </div>\n\n  <div *ngIf=\"isLoading$ | async; else loaded\">\n    <div class=\"cx-spinner\">\n      <cx-spinner> </cx-spinner>\n    </div>\n  </div>\n\n  <ng-template #loaded>\n    <div class=\"modal-body\">\n      <div class=\"cx-row\">\n        <p class=\"cx-confirmation\">\n          {{ 'closeAccount.confirmAccountClosureMessage' | cxTranslate }}\n        </p>\n      </div>\n      <div class=\"cx-row\">\n        <div class=\"cx-btn-group\">\n          <button class=\"btn btn-primary\" (click)=\"closeAccount()\">\n            {{ 'closeAccount.closeMyAccount' | cxTranslate }}\n          </button>\n          <button (click)=\"dismissModal()\" class=\"btn btn-block btn-secondary\">\n            {{ 'common.cancel' | cxTranslate }}\n          </button>\n        </div>\n      </div>\n    </div>\n  </ng-template>\n</ng-container>\n",
                    changeDetection: core$1.ChangeDetectionStrategy.OnPush
                },] }
    ];
    CloseAccountModalComponent.ctorParameters = function () { return [
        { type: storefront.ModalService },
        { type: core.AuthService },
        { type: core.GlobalMessageService },
        { type: core.RoutingService },
        { type: core.TranslationService },
        { type: root.UserProfileFacade }
    ]; };

    var CloseAccountComponent = /** @class */ (function () {
        function CloseAccountComponent(modalService) {
            this.modalService = modalService;
        }
        CloseAccountComponent.prototype.openModal = function () {
            this.modal = this.modalService.open(CloseAccountModalComponent, {
                centered: true,
            }).componentInstance;
        };
        return CloseAccountComponent;
    }());
    CloseAccountComponent.decorators = [
        { type: core$1.Component, args: [{
                    selector: 'cx-close-account',
                    template: "<div class=\"col-lg-8 col-md-9\">\n  <div class=\"row cx-btn-group\">\n    <div class=\"col-sm-3\">\n      <a\n        [routerLink]=\"{ cxRoute: 'home' } | cxUrl\"\n        class=\"btn btn-block btn-secondary\"\n        >{{ 'common.cancel' | cxTranslate }}</a\n      >\n    </div>\n    <div class=\"col-sm-6\">\n      <button class=\"btn btn-primary\" (click)=\"openModal()\">\n        {{ 'closeAccount.closeMyAccount' | cxTranslate }}\n      </button>\n    </div>\n  </div>\n</div>\n",
                    changeDetection: core$1.ChangeDetectionStrategy.OnPush
                },] }
    ];
    CloseAccountComponent.ctorParameters = function () { return [
        { type: storefront.ModalService }
    ]; };

    var CloseAccountModule = /** @class */ (function () {
        function CloseAccountModule() {
        }
        return CloseAccountModule;
    }());
    CloseAccountModule.decorators = [
        { type: core$1.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        router.RouterModule,
                        core.UrlModule,
                        core.I18nModule,
                        storefront.IconModule,
                        storefront.SpinnerModule,
                    ],
                    providers: [
                        core.provideDefaultConfig({
                            cmsComponents: {
                                CloseAccountComponent: {
                                    component: CloseAccountComponent,
                                    guards: [core.AuthGuard],
                                },
                            },
                        }),
                    ],
                    declarations: [CloseAccountComponent, CloseAccountModalComponent],
                },] }
    ];

    var ForgotPasswordComponentService = /** @class */ (function () {
        function ForgotPasswordComponentService(userPasswordService, routingService, authConfigService, globalMessage) {
            var _this = this;
            this.userPasswordService = userPasswordService;
            this.routingService = routingService;
            this.authConfigService = authConfigService;
            this.globalMessage = globalMessage;
            this.busy$ = new rxjs.BehaviorSubject(false);
            this.isUpdating$ = this.busy$.pipe(operators.tap(function (state) { return (state === true ? _this.form.disable() : _this.form.enable()); }));
            this.form = new forms.FormGroup({
                userEmail: new forms.FormControl('', [
                    forms.Validators.required,
                    storefront.CustomFormValidators.emailValidator,
                ]),
            });
        }
        /**
         * Sends an email to the user to reset the password.
         *
         * When the `ResourceOwnerPasswordFlow` is used, the user is routed
         * to the login page.
         */
        ForgotPasswordComponentService.prototype.requestEmail = function () {
            var _this = this;
            if (!this.form.valid) {
                this.form.markAllAsTouched();
                return;
            }
            this.busy$.next(true);
            this.userPasswordService
                .requestForgotPasswordEmail(this.form.value.userEmail)
                .subscribe({
                next: function () { return _this.onSuccess(); },
                error: function (error) { return _this.onError(error); },
            });
        };
        ForgotPasswordComponentService.prototype.onSuccess = function () {
            this.globalMessage.add({ key: 'forgottenPassword.passwordResetEmailSent' }, core.GlobalMessageType.MSG_TYPE_CONFIRMATION);
            this.busy$.next(false);
            this.form.reset();
            this.redirect();
        };
        ForgotPasswordComponentService.prototype.onError = function (_error) {
            this.busy$.next(false);
        };
        /**
         * Redirects the user back to the login page.
         *
         * This only happens in case of the `ResourceOwnerPasswordFlow` OAuth flow.
         */
        ForgotPasswordComponentService.prototype.redirect = function () {
            if (this.authConfigService.getOAuthFlow() ===
                core.OAuthFlow.ResourceOwnerPasswordFlow) {
                this.routingService.go({ cxRoute: 'login' });
            }
        };
        return ForgotPasswordComponentService;
    }());
    ForgotPasswordComponentService.decorators = [
        { type: core$1.Injectable }
    ];
    ForgotPasswordComponentService.ctorParameters = function () { return [
        { type: root.UserPasswordFacade },
        { type: core.RoutingService },
        { type: core.AuthConfigService },
        { type: core.GlobalMessageService }
    ]; };

    var ForgotPasswordComponent = /** @class */ (function () {
        function ForgotPasswordComponent(service) {
            this.service = service;
            this.form = this.service.form;
            this.isUpdating$ = this.service.isUpdating$;
        }
        ForgotPasswordComponent.prototype.onSubmit = function () {
            this.service.requestEmail();
        };
        return ForgotPasswordComponent;
    }());
    ForgotPasswordComponent.decorators = [
        { type: core$1.Component, args: [{
                    selector: 'cx-forgot-password',
                    template: "<cx-spinner class=\"overlay\" *ngIf=\"isUpdating$ | async\"> </cx-spinner>\n\n<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\n  <label>\n    <span class=\"label-content\">{{\n      'forgottenPassword.emailAddress.label' | cxTranslate\n    }}</span>\n    <input\n      type=\"email\"\n      class=\"form-control\"\n      placeholder=\"{{\n        'forgottenPassword.emailAddress.placeholder' | cxTranslate\n      }}\"\n      formControlName=\"userEmail\"\n    />\n    <cx-form-errors [control]=\"form.get('userEmail')\"></cx-form-errors>\n  </label>\n\n  <a\n    class=\"btn btn-block btn-secondary\"\n    [routerLink]=\"{ cxRoute: 'login' } | cxUrl\"\n    >{{ 'common.cancel' | cxTranslate }}</a\n  >\n  <button class=\"btn btn-block btn-primary\" [disabled]=\"form.disabled\">\n    {{ 'common.submit' | cxTranslate }}\n  </button>\n</form>\n",
                    changeDetection: core$1.ChangeDetectionStrategy.OnPush
                },] }
    ];
    ForgotPasswordComponent.ctorParameters = function () { return [
        { type: ForgotPasswordComponentService }
    ]; };

    var ForgotPasswordModule = /** @class */ (function () {
        function ForgotPasswordModule() {
        }
        return ForgotPasswordModule;
    }());
    ForgotPasswordModule.decorators = [
        { type: core$1.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.ReactiveFormsModule,
                        router.RouterModule,
                        core.UrlModule,
                        core.I18nModule,
                        storefront.FormErrorsModule,
                        storefront.SpinnerModule,
                    ],
                    providers: [
                        core.provideDefaultConfig({
                            cmsComponents: {
                                ForgotPasswordComponent: {
                                    component: ForgotPasswordComponent,
                                    guards: [core.NotAuthGuard],
                                    providers: [
                                        {
                                            provide: ForgotPasswordComponentService,
                                            useClass: ForgotPasswordComponentService,
                                            deps: [
                                                root.UserPasswordFacade,
                                                core.RoutingService,
                                                core.AuthConfigService,
                                                core.GlobalMessageService,
                                            ],
                                        },
                                    ],
                                },
                            },
                        }),
                    ],
                    declarations: [ForgotPasswordComponent],
                },] }
    ];

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, exports) {
        for (var p in m)
            if (p !== "default" && !exports.hasOwnProperty(p))
                __createBinding(exports, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (Object.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var RegisterComponent = /** @class */ (function () {
        function RegisterComponent(userRegister, globalMessageService, fb, router, anonymousConsentsService, anonymousConsentsConfig, authConfigService) {
            this.userRegister = userRegister;
            this.globalMessageService = globalMessageService;
            this.fb = fb;
            this.router = router;
            this.anonymousConsentsService = anonymousConsentsService;
            this.anonymousConsentsConfig = anonymousConsentsConfig;
            this.authConfigService = authConfigService;
            this.isLoading$ = new rxjs.BehaviorSubject(false);
            this.subscription = new rxjs.Subscription();
            this.registerForm = this.fb.group({
                titleCode: [''],
                firstName: ['', forms.Validators.required],
                lastName: ['', forms.Validators.required],
                email: ['', [forms.Validators.required, storefront.CustomFormValidators.emailValidator]],
                password: [
                    '',
                    [forms.Validators.required, storefront.CustomFormValidators.passwordValidator],
                ],
                passwordconf: ['', forms.Validators.required],
                newsletter: new forms.FormControl({
                    value: false,
                    disabled: this.isConsentRequired(),
                }),
                termsandconditions: [false, forms.Validators.requiredTrue],
            }, {
                validators: storefront.CustomFormValidators.passwordsMustMatch('password', 'passwordconf'),
            });
        }
        RegisterComponent.prototype.ngOnInit = function () {
            var _this = this;
            var _a, _b, _c;
            this.titles$ = this.userRegister.getTitles().pipe(operators.map(function (titles) {
                return titles.sort(storefront.sortTitles);
            }));
            // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)
            this.subscription.add(this.globalMessageService
                .get()
                .pipe(operators.filter(function (messages) { return !!Object.keys(messages).length; }))
                .subscribe(function (globalMessageEntities) {
                var messages = globalMessageEntities &&
                    globalMessageEntities[core.GlobalMessageType.MSG_TYPE_ERROR];
                if (messages &&
                    messages.some(function (message) { return message === 'This field is required.'; })) {
                    _this.globalMessageService.remove(core.GlobalMessageType.MSG_TYPE_ERROR);
                    _this.globalMessageService.add({ key: 'register.titleRequired' }, core.GlobalMessageType.MSG_TYPE_ERROR);
                }
            }));
            var registerConsent = (_c = (_b = (_a = this.anonymousConsentsConfig) === null || _a === void 0 ? void 0 : _a.anonymousConsents) === null || _b === void 0 ? void 0 : _b.registerConsent) !== null && _c !== void 0 ? _c : '';
            this.anonymousConsent$ = rxjs.combineLatest([
                this.anonymousConsentsService.getConsent(registerConsent),
                this.anonymousConsentsService.getTemplate(registerConsent),
            ]).pipe(operators.map(function (_e) {
                var _f = __read(_e, 2), consent = _f[0], template = _f[1];
                return {
                    consent: consent,
                    template: (template === null || template === void 0 ? void 0 : template.description) ? template.description : '',
                };
            }));
            this.subscription.add(
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            this.registerForm.get('newsletter').valueChanges.subscribe(function () {
                _this.toggleAnonymousConsent();
            }));
        };
        RegisterComponent.prototype.submitForm = function () {
            if (this.registerForm.valid) {
                this.registerUser();
            }
            else {
                this.registerForm.markAllAsTouched();
            }
        };
        RegisterComponent.prototype.registerUser = function () {
            var _this = this;
            this.isLoading$.next(true);
            this.userRegister
                .register(this.collectDataFromRegisterForm(this.registerForm.value))
                .subscribe({
                next: function () { return _this.onRegisterUserSuccess(); },
                complete: function () { return _this.isLoading$.next(false); },
            });
        };
        RegisterComponent.prototype.titleSelected = function (title) {
            this.registerForm['controls'].titleCode.setValue(title.code);
        };
        RegisterComponent.prototype.collectDataFromRegisterForm = function (formData) {
            var firstName = formData.firstName, lastName = formData.lastName, email = formData.email, password = formData.password, titleCode = formData.titleCode;
            return {
                firstName: firstName,
                lastName: lastName,
                uid: email.toLowerCase(),
                password: password,
                titleCode: titleCode,
            };
        };
        RegisterComponent.prototype.isConsentGiven = function (consent) {
            return this.anonymousConsentsService.isConsentGiven(consent);
        };
        RegisterComponent.prototype.isConsentRequired = function () {
            var _a, _b, _c, _d;
            var requiredConsents = (_b = (_a = this.anonymousConsentsConfig) === null || _a === void 0 ? void 0 : _a.anonymousConsents) === null || _b === void 0 ? void 0 : _b.requiredConsents;
            var registerConsent = (_d = (_c = this.anonymousConsentsConfig) === null || _c === void 0 ? void 0 : _c.anonymousConsents) === null || _d === void 0 ? void 0 : _d.registerConsent;
            if (requiredConsents && registerConsent) {
                return requiredConsents.includes(registerConsent);
            }
            return false;
        };
        RegisterComponent.prototype.onRegisterUserSuccess = function () {
            if (this.authConfigService.getOAuthFlow() ===
                core.OAuthFlow.ResourceOwnerPasswordFlow) {
                this.router.go('login');
            }
            this.globalMessageService.add({ key: 'register.postRegisterMessage' }, core.GlobalMessageType.MSG_TYPE_CONFIRMATION);
        };
        RegisterComponent.prototype.toggleAnonymousConsent = function () {
            var _a, _b;
            var registerConsent = (_b = (_a = this.anonymousConsentsConfig) === null || _a === void 0 ? void 0 : _a.anonymousConsents) === null || _b === void 0 ? void 0 : _b.registerConsent;
            if (registerConsent) {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                if (Boolean(this.registerForm.get('newsletter').value)) {
                    this.anonymousConsentsService.giveConsent(registerConsent);
                }
                else {
                    this.anonymousConsentsService.withdrawConsent(registerConsent);
                }
            }
        };
        RegisterComponent.prototype.ngOnDestroy = function () {
            this.subscription.unsubscribe();
        };
        return RegisterComponent;
    }());
    RegisterComponent.decorators = [
        { type: core$1.Component, args: [{
                    selector: 'cx-register',
                    template: "<section\n  class=\"cx-page-section container\"\n  *ngIf=\"!(isLoading$ | async); else loading\"\n>\n  <div class=\"row justify-content-center\">\n    <div class=\"col-md-6\">\n      <div class=\"cx-section\">\n        <form (ngSubmit)=\"submitForm()\" [formGroup]=\"registerForm\">\n          <div class=\"form-group\">\n            <label>\n              <span class=\"label-content\">{{\n                'register.title' | cxTranslate\n              }}</span>\n              <select formControlName=\"titleCode\" class=\"form-control\">\n                <option selected value=\"\" disabled>\n                  {{ 'register.selectTitle' | cxTranslate }}\n                </option>\n                <option\n                  *ngFor=\"let title of titles$ | async\"\n                  [value]=\"title.code\"\n                >\n                  {{ title.name }}\n                </option>\n              </select>\n            </label>\n          </div>\n\n          <div class=\"form-group\">\n            <label>\n              <span class=\"label-content\">{{\n                'register.firstName.label' | cxTranslate\n              }}</span>\n              <input\n                class=\"form-control\"\n                type=\"text\"\n                name=\"firstname\"\n                placeholder=\"{{\n                  'register.firstName.placeholder' | cxTranslate\n                }}\"\n                formControlName=\"firstName\"\n              />\n              <cx-form-errors\n                [control]=\"registerForm.get('firstName')\"\n              ></cx-form-errors>\n            </label>\n          </div>\n\n          <div class=\"form-group\">\n            <label>\n              <span class=\"label-content\">{{\n                'register.lastName.label' | cxTranslate\n              }}</span>\n              <input\n                class=\"form-control\"\n                type=\"text\"\n                name=\"lastname\"\n                placeholder=\"{{\n                  'register.lastName.placeholder' | cxTranslate\n                }}\"\n                formControlName=\"lastName\"\n              />\n              <cx-form-errors\n                [control]=\"registerForm.get('lastName')\"\n              ></cx-form-errors>\n            </label>\n          </div>\n\n          <div class=\"form-group\">\n            <label>\n              <span class=\"label-content\">{{\n                'register.emailAddress.label' | cxTranslate\n              }}</span>\n              <input\n                class=\"form-control\"\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"{{\n                  'register.emailAddress.placeholder' | cxTranslate\n                }}\"\n                formControlName=\"email\"\n              />\n              <cx-form-errors\n                [control]=\"registerForm.get('email')\"\n              ></cx-form-errors>\n            </label>\n          </div>\n\n          <div class=\"form-group\">\n            <label>\n              <span class=\"label-content\">{{\n                'register.password.label' | cxTranslate\n              }}</span>\n              <input\n                class=\"form-control\"\n                type=\"password\"\n                name=\"password\"\n                placeholder=\"{{\n                  'register.password.placeholder' | cxTranslate\n                }}\"\n                formControlName=\"password\"\n              />\n              <cx-form-errors\n                [control]=\"registerForm.get('password')\"\n              ></cx-form-errors>\n            </label>\n          </div>\n\n          <div class=\"form-group\">\n            <label>\n              <span class=\"label-content\">{{\n                'register.confirmPassword.label' | cxTranslate\n              }}</span>\n              <input\n                class=\"form-control\"\n                type=\"password\"\n                name=\"confirmpassword\"\n                placeholder=\"{{\n                  'register.confirmPassword.placeholder' | cxTranslate\n                }}\"\n                formControlName=\"passwordconf\"\n              />\n              <cx-form-errors\n                [control]=\"registerForm.get('passwordconf')\"\n              ></cx-form-errors>\n            </label>\n          </div>\n\n          <div class=\"form-group\">\n            <div class=\"form-check\">\n              <label *ngIf=\"anonymousConsent$ | async as anonymousConsent\">\n                <input\n                  type=\"checkbox\"\n                  name=\"newsletter\"\n                  class=\"form-check-input\"\n                  formControlName=\"newsletter\"\n                  [checked]=\"isConsentGiven(anonymousConsent.consent)\"\n                />\n                <span class=\"form-check-label\">\n                  {{ anonymousConsent.template }}\n                </span>\n              </label>\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <div class=\"form-check\">\n              <label>\n                <input\n                  type=\"checkbox\"\n                  name=\"termsandconditions\"\n                  formControlName=\"termsandconditions\"\n                />\n                <span class=\"form-check-label\">\n                  {{ 'register.confirmThatRead' | cxTranslate }}\n                  <a\n                    [routerLink]=\"{ cxRoute: 'termsAndConditions' } | cxUrl\"\n                    target=\"_blank\"\n                  >\n                    {{ 'register.termsAndConditions' | cxTranslate }}\n                  </a>\n                </span>\n                <cx-form-errors\n                  [control]=\"registerForm.get('termsandconditions')\"\n                ></cx-form-errors>\n              </label>\n            </div>\n          </div>\n          <button type=\"submit\" class=\"btn btn-block btn-primary\">\n            {{ 'register.register' | cxTranslate }}\n          </button>\n          <a\n            class=\"cx-login-link btn-link\"\n            [routerLink]=\"{ cxRoute: 'login' } | cxUrl\"\n            >{{ 'register.signIn' | cxTranslate }}</a\n          >\n        </form>\n      </div>\n    </div>\n  </div>\n</section>\n\n<ng-template #loading>\n  <div class=\"cx-spinner\"><cx-spinner></cx-spinner></div>\n</ng-template>\n"
                },] }
    ];
    RegisterComponent.ctorParameters = function () { return [
        { type: root.UserRegisterFacade },
        { type: core.GlobalMessageService },
        { type: forms.FormBuilder },
        { type: core.RoutingService },
        { type: core.AnonymousConsentsService },
        { type: core.AnonymousConsentsConfig },
        { type: core.AuthConfigService }
    ]; };

    var RegisterComponentModule = /** @class */ (function () {
        function RegisterComponentModule() {
        }
        return RegisterComponentModule;
    }());
    RegisterComponentModule.decorators = [
        { type: core$1.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.ReactiveFormsModule,
                        router.RouterModule,
                        core.UrlModule,
                        core.I18nModule,
                        storefront.SpinnerModule,
                        storefront.FormErrorsModule,
                    ],
                    providers: [
                        core.provideDefaultConfig({
                            cmsComponents: {
                                RegisterCustomerComponent: {
                                    component: RegisterComponent,
                                    guards: [core.NotAuthGuard],
                                },
                            },
                        }),
                    ],
                    declarations: [RegisterComponent],
                },] }
    ];

    var ResetPasswordComponentService = /** @class */ (function () {
        function ResetPasswordComponentService(userPasswordService, routingService, globalMessage) {
            var _this = this;
            this.userPasswordService = userPasswordService;
            this.routingService = routingService;
            this.globalMessage = globalMessage;
            this.busy$ = new rxjs.BehaviorSubject(false);
            this.isUpdating$ = this.busy$.pipe(operators.tap(function (state) { return (state === true ? _this.form.disable() : _this.form.enable()); }));
            this.resetToken$ = this.routingService
                .getRouterState()
                .pipe(operators.map(function (routerState) { return routerState.state.queryParams['token']; }));
            this.form = new forms.FormGroup({
                password: new forms.FormControl('', [
                    forms.Validators.required,
                    storefront.CustomFormValidators.passwordValidator,
                ]),
                passwordConfirm: new forms.FormControl('', forms.Validators.required),
            }, {
                validators: storefront.CustomFormValidators.passwordsMustMatch('password', 'passwordConfirm'),
            });
        }
        /**
         * Resets the password by the given token.
         *
         * The token has been provided during the request password flow.
         * The token is not validated on the client.
         */
        ResetPasswordComponentService.prototype.resetPassword = function (token) {
            var _this = this;
            if (!this.form.valid) {
                this.form.markAllAsTouched();
                return;
            }
            this.busy$.next(true);
            var password = this.form.get('password').value;
            this.userPasswordService.reset(token, password).subscribe({
                next: function () { return _this.onSuccess(); },
                error: function (error) { return _this.onError(error); },
            });
        };
        ResetPasswordComponentService.prototype.onSuccess = function () {
            this.globalMessage.add({ key: 'forgottenPassword.passwordResetSuccess' }, core.GlobalMessageType.MSG_TYPE_CONFIRMATION);
            this.busy$.next(false);
            this.form.reset();
            this.redirect();
        };
        ResetPasswordComponentService.prototype.onError = function (error) {
            var _this = this;
            var _a, _b;
            this.busy$.next(false);
            ((_b = (_a = error) === null || _a === void 0 ? void 0 : _a.details) !== null && _b !== void 0 ? _b : []).forEach(function (err) {
                if (err.message) {
                    _this.globalMessage.add({ raw: err.message }, core.GlobalMessageType.MSG_TYPE_ERROR);
                }
            });
        };
        /**
         * Redirects the user to the login page.
         */
        ResetPasswordComponentService.prototype.redirect = function () {
            this.routingService.go({ cxRoute: 'login' });
        };
        return ResetPasswordComponentService;
    }());
    ResetPasswordComponentService.decorators = [
        { type: core$1.Injectable }
    ];
    ResetPasswordComponentService.ctorParameters = function () { return [
        { type: root.UserPasswordFacade },
        { type: core.RoutingService },
        { type: core.GlobalMessageService }
    ]; };

    var ResetPasswordComponent = /** @class */ (function () {
        function ResetPasswordComponent(service) {
            this.service = service;
            this.form = this.service.form;
            this.isUpdating$ = this.service.isUpdating$;
            this.token$ = this.service.resetToken$;
        }
        ResetPasswordComponent.prototype.onSubmit = function (token) {
            this.service.resetPassword(token);
        };
        return ResetPasswordComponent;
    }());
    ResetPasswordComponent.decorators = [
        { type: core$1.Component, args: [{
                    selector: 'cx-reset-password',
                    template: "<cx-spinner class=\"overlay\" *ngIf=\"isUpdating$ | async\"> </cx-spinner>\n\n<form\n  *ngIf=\"token$ | async as token\"\n  (ngSubmit)=\"onSubmit(token)\"\n  [formGroup]=\"form\"\n>\n  <label>\n    <span class=\"label-content\">{{\n      'register.newPassword' | cxTranslate\n    }}</span>\n    <input\n      class=\"form-control\"\n      type=\"password\"\n      placeholder=\"{{ 'register.password.placeholder' | cxTranslate }}\"\n      formControlName=\"password\"\n    />\n    <cx-form-errors [control]=\"form.get('password')\"></cx-form-errors>\n  </label>\n\n  <label>\n    <span class=\"label-content\">{{\n      'register.passwordMinRequirements' | cxTranslate\n    }}</span>\n    <input\n      class=\"form-control\"\n      type=\"password\"\n      placeholder=\"{{ 'register.confirmPassword.placeholder' | cxTranslate }}\"\n      formControlName=\"passwordConfirm\"\n    />\n    <cx-form-errors [control]=\"form.get('passwordConfirm')\"></cx-form-errors>\n  </label>\n\n  <button class=\"btn btn-block btn-primary\" [disabled]=\"form.disabled\">\n    {{ 'register.resetPassword' | cxTranslate }}\n  </button>\n</form>\n",
                    changeDetection: core$1.ChangeDetectionStrategy.OnPush,
                    host: { class: 'user-form' }
                },] }
    ];
    ResetPasswordComponent.ctorParameters = function () { return [
        { type: ResetPasswordComponentService }
    ]; };

    var ResetPasswordModule = /** @class */ (function () {
        function ResetPasswordModule() {
        }
        return ResetPasswordModule;
    }());
    ResetPasswordModule.decorators = [
        { type: core$1.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        router.RouterModule,
                        core.I18nModule,
                        storefront.FormErrorsModule,
                        storefront.SpinnerModule,
                    ],
                    providers: [
                        core.provideDefaultConfig({
                            cmsComponents: {
                                ResetPasswordComponent: {
                                    component: ResetPasswordComponent,
                                    guards: [core.NotAuthGuard],
                                    providers: [
                                        {
                                            provide: ResetPasswordComponentService,
                                            useClass: ResetPasswordComponentService,
                                            deps: [root.UserPasswordFacade, core.RoutingService, core.GlobalMessageService],
                                        },
                                    ],
                                },
                            },
                        }),
                    ],
                    declarations: [ResetPasswordComponent],
                },] }
    ];

    var UpdateEmailComponentService = /** @class */ (function () {
        function UpdateEmailComponentService(userEmail, routingService, globalMessageService, authService) {
            var _this = this;
            this.userEmail = userEmail;
            this.routingService = routingService;
            this.globalMessageService = globalMessageService;
            this.authService = authService;
            this.busy$ = new rxjs.BehaviorSubject(false);
            this.isUpdating$ = this.busy$.pipe(operators.tap(function (state) { return (state === true ? _this.form.disable() : _this.form.enable()); }));
            this.form = new forms.FormGroup({
                email: new forms.FormControl('', [
                    forms.Validators.required,
                    storefront.CustomFormValidators.emailValidator,
                ]),
                confirmEmail: new forms.FormControl('', [forms.Validators.required]),
                password: new forms.FormControl('', [forms.Validators.required]),
            }, {
                validators: storefront.CustomFormValidators.emailsMustMatch('email', 'confirmEmail'),
            });
        }
        UpdateEmailComponentService.prototype.save = function () {
            var _this = this;
            var _a, _b;
            if (!this.form.valid) {
                this.form.markAllAsTouched();
                return;
            }
            this.busy$.next(true);
            var newEmail = (_a = this.form.get('confirmEmail')) === null || _a === void 0 ? void 0 : _a.value;
            var password = (_b = this.form.get('password')) === null || _b === void 0 ? void 0 : _b.value;
            this.userEmail.update(password, newEmail).subscribe({
                next: function () { return _this.onSuccess(newEmail); },
                error: function (error) { return _this.onError(error); },
            });
        };
        /**
         * Handles successful updating of the user email.
         */
        UpdateEmailComponentService.prototype.onSuccess = function (newUid) {
            var _this = this;
            this.globalMessageService.add({
                key: 'updateEmailForm.emailUpdateSuccess',
                params: { newUid: newUid },
            }, core.GlobalMessageType.MSG_TYPE_CONFIRMATION);
            this.busy$.next(false);
            this.form.reset();
            // TODO(#9638): Use logout route when it will support passing redirect url
            this.authService.coreLogout().then(function () {
                _this.routingService.go({ cxRoute: 'login' }, undefined, {
                    state: {
                        newUid: newUid,
                    },
                });
            });
        };
        UpdateEmailComponentService.prototype.onError = function (_error) {
            this.busy$.next(false);
        };
        return UpdateEmailComponentService;
    }());
    UpdateEmailComponentService.decorators = [
        { type: core$1.Injectable }
    ];
    UpdateEmailComponentService.ctorParameters = function () { return [
        { type: root.UserEmailFacade },
        { type: core.RoutingService },
        { type: core.GlobalMessageService },
        { type: core.AuthService }
    ]; };

    var UpdateEmailComponent = /** @class */ (function () {
        function UpdateEmailComponent(service) {
            this.service = service;
            this.form = this.service.form;
            this.isUpdating$ = this.service.isUpdating$;
        }
        UpdateEmailComponent.prototype.onSubmit = function () {
            this.service.save();
        };
        return UpdateEmailComponent;
    }());
    UpdateEmailComponent.decorators = [
        { type: core$1.Component, args: [{
                    selector: 'cx-update-email',
                    template: "<cx-spinner class=\"overlay\" *ngIf=\"isUpdating$ | async\"> </cx-spinner>\n\n<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\n  <label>\n    <span class=\"label-content\">{{\n      'updateEmailForm.newEmailAddress.label' | cxTranslate\n    }}</span>\n    <input\n      type=\"email\"\n      name=\"email\"\n      formControlName=\"email\"\n      placeholder=\"{{\n        'updateEmailForm.newEmailAddress.placeholder' | cxTranslate\n      }}\"\n      class=\"form-control\"\n    />\n    <cx-form-errors [control]=\"form.get('email')\"></cx-form-errors>\n  </label>\n\n  <label>\n    <span class=\"label-content\">{{\n      'updateEmailForm.confirmNewEmailAddress.label' | cxTranslate\n    }}</span>\n    <input\n      type=\"email\"\n      name=\"confirmEmail\"\n      formControlName=\"confirmEmail\"\n      placeholder=\"{{\n        'updateEmailForm.confirmNewEmailAddress.placeholder' | cxTranslate\n      }}\"\n      class=\"form-control\"\n    />\n    <cx-form-errors [control]=\"form.get('confirmEmail')\"></cx-form-errors>\n  </label>\n\n  <label>\n    <span class=\"label-content\">{{\n      'updateEmailForm.password.label' | cxTranslate\n    }}</span>\n    <input\n      type=\"password\"\n      name=\"password\"\n      formControlName=\"password\"\n      placeholder=\"{{ 'updateEmailForm.password.placeholder' | cxTranslate }}\"\n      class=\"form-control\"\n      autocomplete=\"new-password\"\n    />\n    <cx-form-errors [control]=\"form.get('password')\"></cx-form-errors>\n  </label>\n\n  <a\n    class=\"btn btn-block btn-secondary\"\n    [routerLink]=\"{ cxRoute: 'home' } | cxUrl\"\n  >\n    {{ 'common.cancel' | cxTranslate }}\n  </a>\n\n  <button class=\"btn btn-block btn-primary\" [disabled]=\"form.disabled\">\n    {{ 'common.save' | cxTranslate }}\n  </button>\n</form>\n",
                    changeDetection: core$1.ChangeDetectionStrategy.OnPush,
                    host: { class: 'user-form' }
                },] }
    ];
    UpdateEmailComponent.ctorParameters = function () { return [
        { type: UpdateEmailComponentService }
    ]; };

    var UpdateEmailModule = /** @class */ (function () {
        function UpdateEmailModule() {
        }
        return UpdateEmailModule;
    }());
    UpdateEmailModule.decorators = [
        { type: core$1.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        storefront.SpinnerModule,
                        core.UrlModule,
                        router.RouterModule,
                        core.I18nModule,
                        storefront.FormErrorsModule,
                    ],
                    providers: [
                        core.provideDefaultConfig({
                            cmsComponents: {
                                UpdateEmailComponent: {
                                    component: UpdateEmailComponent,
                                    guards: [core.AuthGuard],
                                    providers: [
                                        {
                                            provide: UpdateEmailComponentService,
                                            useClass: UpdateEmailComponentService,
                                            deps: [
                                                root.UserEmailFacade,
                                                core.RoutingService,
                                                core.GlobalMessageService,
                                                core.AuthService,
                                            ],
                                        },
                                    ],
                                },
                            },
                        }),
                    ],
                    declarations: [UpdateEmailComponent],
                },] }
    ];

    var UpdatePasswordComponentService = /** @class */ (function () {
        function UpdatePasswordComponentService(userPasswordService, routingService, globalMessageService) {
            var _this = this;
            this.userPasswordService = userPasswordService;
            this.routingService = routingService;
            this.globalMessageService = globalMessageService;
            this.busy$ = new rxjs.BehaviorSubject(false);
            this.isUpdating$ = this.busy$.pipe(operators.tap(function (state) { return (state === true ? _this.form.disable() : _this.form.enable()); }));
            this.form = new forms.FormGroup({
                oldPassword: new forms.FormControl('', forms.Validators.required),
                newPassword: new forms.FormControl('', [
                    forms.Validators.required,
                    storefront.CustomFormValidators.passwordValidator,
                ]),
                newPasswordConfirm: new forms.FormControl('', forms.Validators.required),
            }, {
                validators: storefront.CustomFormValidators.passwordsMustMatch('newPassword', 'newPasswordConfirm'),
            });
        }
        /**
         * Updates the password for the user.
         */
        UpdatePasswordComponentService.prototype.updatePassword = function () {
            var _this = this;
            var _a, _b;
            if (!this.form.valid) {
                this.form.markAllAsTouched();
                return;
            }
            this.busy$.next(true);
            var oldPassword = (_a = this.form.get('oldPassword')) === null || _a === void 0 ? void 0 : _a.value;
            var newPassword = (_b = this.form.get('newPassword')) === null || _b === void 0 ? void 0 : _b.value;
            this.userPasswordService.update(oldPassword, newPassword).subscribe({
                next: function () { return _this.onSuccess(); },
                error: function (error) { return _this.onError(error); },
            });
        };
        UpdatePasswordComponentService.prototype.onSuccess = function () {
            this.globalMessageService.add({ key: 'updatePasswordForm.passwordUpdateSuccess' }, core.GlobalMessageType.MSG_TYPE_CONFIRMATION);
            this.busy$.next(false);
            this.form.reset();
            this.routingService.go({ cxRoute: 'home' });
        };
        UpdatePasswordComponentService.prototype.onError = function (_error) {
            this.busy$.next(false);
            this.form.reset();
        };
        return UpdatePasswordComponentService;
    }());
    UpdatePasswordComponentService.decorators = [
        { type: core$1.Injectable }
    ];
    UpdatePasswordComponentService.ctorParameters = function () { return [
        { type: root.UserPasswordFacade },
        { type: core.RoutingService },
        { type: core.GlobalMessageService }
    ]; };

    var UpdatePasswordComponent = /** @class */ (function () {
        function UpdatePasswordComponent(service) {
            this.service = service;
            this.form = this.service.form;
            this.isUpdating$ = this.service.isUpdating$;
        }
        UpdatePasswordComponent.prototype.onSubmit = function () {
            this.service.updatePassword();
        };
        return UpdatePasswordComponent;
    }());
    UpdatePasswordComponent.decorators = [
        { type: core$1.Component, args: [{
                    selector: 'cx-update-password',
                    template: "<cx-spinner class=\"overlay\" *ngIf=\"isUpdating$ | async\"> </cx-spinner>\n\n<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\n  <label>\n    <span class=\"label-content\">{{\n      'updatePasswordForm.oldPassword.label' | cxTranslate\n    }}</span>\n    <input\n      class=\"form-control\"\n      type=\"password\"\n      name=\"oldPassword\"\n      placeholder=\"{{\n        'updatePasswordForm.oldPassword.placeholder' | cxTranslate\n      }}\"\n      formControlName=\"oldPassword\"\n    />\n    <cx-form-errors [control]=\"form.get('oldPassword')\"></cx-form-errors>\n  </label>\n\n  <label>\n    <span class=\"label-content\">{{\n      'updatePasswordForm.newPassword.label' | cxTranslate\n    }}</span>\n    <input\n      class=\"form-control\"\n      type=\"password\"\n      name=\"newPassword\"\n      placeholder=\"{{\n        'updatePasswordForm.newPassword.placeholder' | cxTranslate\n      }}\"\n      formControlName=\"newPassword\"\n    />\n    <cx-form-errors [control]=\"form.get('newPassword')\"></cx-form-errors>\n  </label>\n\n  <label>\n    <span class=\"label-content\">{{\n      'updatePasswordForm.confirmPassword.label' | cxTranslate\n    }}</span>\n    <input\n      class=\"form-control\"\n      type=\"password\"\n      name=\"newPasswordConfirm\"\n      placeholder=\"{{\n        'updatePasswordForm.confirmPassword.placeholder' | cxTranslate\n      }}\"\n      formControlName=\"newPasswordConfirm\"\n    />\n    <cx-form-errors [control]=\"form.get('newPasswordConfirm')\"></cx-form-errors>\n  </label>\n\n  <a\n    class=\"btn btn-block btn-secondary\"\n    [routerLink]=\"{ cxRoute: 'home' } | cxUrl\"\n  >\n    {{ 'common.cancel' | cxTranslate }}\n  </a>\n\n  <button class=\"btn btn-block btn-primary\" [disabled]=\"form.disabled\">\n    {{ 'common.save' | cxTranslate }}\n  </button>\n</form>\n",
                    changeDetection: core$1.ChangeDetectionStrategy.OnPush,
                    host: { class: 'user-form' }
                },] }
    ];
    UpdatePasswordComponent.ctorParameters = function () { return [
        { type: UpdatePasswordComponentService }
    ]; };

    var UpdatePasswordModule = /** @class */ (function () {
        function UpdatePasswordModule() {
        }
        return UpdatePasswordModule;
    }());
    UpdatePasswordModule.decorators = [
        { type: core$1.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        storefront.SpinnerModule,
                        core.I18nModule,
                        storefront.FormErrorsModule,
                        core.UrlModule,
                        router.RouterModule,
                    ],
                    providers: [
                        core.provideDefaultConfig({
                            cmsComponents: {
                                UpdatePasswordComponent: {
                                    component: UpdatePasswordComponent,
                                    guards: [core.AuthGuard],
                                    providers: [
                                        {
                                            provide: UpdatePasswordComponentService,
                                            useClass: UpdatePasswordComponentService,
                                            deps: [root.UserPasswordFacade, core.RoutingService, core.GlobalMessageService],
                                        },
                                    ],
                                },
                            },
                        }),
                    ],
                    declarations: [UpdatePasswordComponent],
                },] }
    ];

    var UpdateProfileComponentService = /** @class */ (function () {
        function UpdateProfileComponentService(userProfile, globalMessageService) {
            var _this = this;
            this.userProfile = userProfile;
            this.globalMessageService = globalMessageService;
            this.user$ = this.userProfile
                .get()
                .pipe(operators.filter(function (user) { return Boolean(user); }));
            this.busy$ = new rxjs.BehaviorSubject(false);
            this.isUpdating$ = this.user$.pipe(operators.tap(function (user) { return _this.form.patchValue(user); }), operators.switchMap(function (_user) { return _this.busy$; }), operators.tap(function (state) { return (state === true ? _this.form.disable() : _this.form.enable()); }));
            this.titles$ = this.userProfile.getTitles();
            this.form = new forms.FormGroup({
                customerId: new forms.FormControl(''),
                titleCode: new forms.FormControl(''),
                firstName: new forms.FormControl('', forms.Validators.required),
                lastName: new forms.FormControl('', forms.Validators.required),
            });
        }
        /**
         * Updates the user's details and handles the UI.
         */
        UpdateProfileComponentService.prototype.updateProfile = function () {
            var _this = this;
            if (!this.form.valid) {
                this.form.markAllAsTouched();
                return;
            }
            this.busy$.next(true);
            this.userProfile.update(this.form.value).subscribe({
                next: function () { return _this.onSuccess(); },
                error: function (error) { return _this.onError(error); },
            });
        };
        UpdateProfileComponentService.prototype.onSuccess = function () {
            this.globalMessageService.add({
                key: 'updateProfileForm.profileUpdateSuccess',
            }, core.GlobalMessageType.MSG_TYPE_CONFIRMATION);
            this.busy$.next(false);
            this.form.reset();
        };
        UpdateProfileComponentService.prototype.onError = function (_error) {
            this.busy$.next(false);
        };
        return UpdateProfileComponentService;
    }());
    UpdateProfileComponentService.decorators = [
        { type: core$1.Injectable }
    ];
    UpdateProfileComponentService.ctorParameters = function () { return [
        { type: root.UserProfileFacade },
        { type: core.GlobalMessageService }
    ]; };

    var UpdateProfileComponent = /** @class */ (function () {
        function UpdateProfileComponent(service) {
            this.service = service;
            this.form = this.service.form;
            this.isUpdating$ = this.service.isUpdating$;
            this.titles$ = this.service.titles$;
        }
        UpdateProfileComponent.prototype.onSubmit = function () {
            this.service.updateProfile();
        };
        return UpdateProfileComponent;
    }());
    UpdateProfileComponent.decorators = [
        { type: core$1.Component, args: [{
                    selector: 'cx-update-profile',
                    template: "<cx-spinner class=\"overlay\" *ngIf=\"isUpdating$ | async\"> </cx-spinner>\n\n<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\n  <label>\n    <span class=\"label-content\">{{\n      'updateProfileForm.title' | cxTranslate\n    }}</span>\n    <select formControlName=\"titleCode\" class=\"form-control\">\n      <option value=\"\">{{ 'updateProfileForm.none' | cxTranslate }}</option>\n      <option *ngFor=\"let title of titles$ | async\" [value]=\"title.code\">\n        {{ title.name }}\n      </option>\n    </select>\n  </label>\n  <label>\n    <span class=\"label-content\">{{\n      'updateProfileForm.firstName.label' | cxTranslate\n    }}</span>\n    <input\n      type=\"text\"\n      class=\"form-control\"\n      name=\"firstName\"\n      placeholder=\"{{\n        'updateProfileForm.firstName.placeholder' | cxTranslate\n      }}\"\n      formControlName=\"firstName\"\n    />\n    <cx-form-errors [control]=\"form.get('firstName')\"></cx-form-errors>\n  </label>\n\n  <label>\n    <span class=\"label-content\">{{\n      'updateProfileForm.lastName.label' | cxTranslate\n    }}</span>\n    <input\n      type=\"text\"\n      class=\"form-control\"\n      name=\"lastName\"\n      placeholder=\"{{ 'updateProfileForm.lastName.placeholder' | cxTranslate }}\"\n      formControlName=\"lastName\"\n    />\n    <cx-form-errors [control]=\"form.get('lastName')\"></cx-form-errors>\n  </label>\n\n  <label>\n    <span class=\"label-content\">{{\n      'updateProfileForm.customerId' | cxTranslate\n    }}</span>\n    <input\n      type=\"text\"\n      class=\"form-control\"\n      name=\"customerId\"\n      formControlName=\"customerId\"\n      readonly\n    />\n    <cx-form-errors [control]=\"form.get('lastName')\"></cx-form-errors>\n  </label>\n\n  <a\n    class=\"btn btn-block btn-secondary\"\n    [routerLink]=\"{ cxRoute: 'home' } | cxUrl\"\n  >\n    {{ 'common.cancel' | cxTranslate }}\n  </a>\n\n  <button class=\"btn btn-block btn-primary\" [disabled]=\"form.disabled\">\n    {{ 'common.save' | cxTranslate }}\n  </button>\n</form>\n",
                    changeDetection: core$1.ChangeDetectionStrategy.OnPush,
                    host: { class: 'user-form' }
                },] }
    ];
    UpdateProfileComponent.ctorParameters = function () { return [
        { type: UpdateProfileComponentService }
    ]; };

    var UpdateProfileModule = /** @class */ (function () {
        function UpdateProfileModule() {
        }
        return UpdateProfileModule;
    }());
    UpdateProfileModule.decorators = [
        { type: core$1.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        storefront.SpinnerModule,
                        core.I18nModule,
                        storefront.FormErrorsModule,
                        router.RouterModule,
                        core.UrlModule,
                    ],
                    providers: [
                        core.provideDefaultConfig({
                            cmsComponents: {
                                UpdateProfileComponent: {
                                    component: UpdateProfileComponent,
                                    guards: [core.AuthGuard],
                                    providers: [
                                        {
                                            provide: UpdateProfileComponentService,
                                            useClass: UpdateProfileComponentService,
                                            deps: [root.UserProfileFacade, core.GlobalMessageService],
                                        },
                                    ],
                                },
                            },
                        }),
                    ],
                    declarations: [UpdateProfileComponent],
                },] }
    ];

    var UserProfileComponentsModule = /** @class */ (function () {
        function UserProfileComponentsModule() {
        }
        return UserProfileComponentsModule;
    }());
    UserProfileComponentsModule.decorators = [
        { type: core$1.NgModule, args: [{
                    imports: [
                        RegisterComponentModule,
                        UpdateProfileModule,
                        UpdateEmailModule,
                        UpdatePasswordModule,
                        ForgotPasswordModule,
                        ResetPasswordModule,
                        CloseAccountModule,
                    ],
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.CloseAccountComponent = CloseAccountComponent;
    exports.CloseAccountModalComponent = CloseAccountModalComponent;
    exports.CloseAccountModule = CloseAccountModule;
    exports.ForgotPasswordComponent = ForgotPasswordComponent;
    exports.ForgotPasswordComponentService = ForgotPasswordComponentService;
    exports.ForgotPasswordModule = ForgotPasswordModule;
    exports.RegisterComponent = RegisterComponent;
    exports.RegisterComponentModule = RegisterComponentModule;
    exports.ResetPasswordComponent = ResetPasswordComponent;
    exports.ResetPasswordComponentService = ResetPasswordComponentService;
    exports.ResetPasswordModule = ResetPasswordModule;
    exports.UpdateEmailComponent = UpdateEmailComponent;
    exports.UpdateEmailComponentService = UpdateEmailComponentService;
    exports.UpdateEmailModule = UpdateEmailModule;
    exports.UpdatePasswordComponent = UpdatePasswordComponent;
    exports.UpdatePasswordComponentService = UpdatePasswordComponentService;
    exports.UpdatePasswordModule = UpdatePasswordModule;
    exports.UpdateProfileComponent = UpdateProfileComponent;
    exports.UpdateProfileComponentService = UpdateProfileComponentService;
    exports.UpdateProfileModule = UpdateProfileModule;
    exports.UserProfileComponentsModule = UserProfileComponentsModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=spartacus-user-profile-components.umd.js.map
