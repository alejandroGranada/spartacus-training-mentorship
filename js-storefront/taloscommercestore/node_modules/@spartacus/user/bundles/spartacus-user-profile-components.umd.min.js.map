{"version":3,"sources":["../../../feature-libs/user/profile/components/close-account/components/close-account-modal/close-account-modal.component.ts","../../../feature-libs/user/profile/components/close-account/components/close-account/close-account.component.ts","../../../feature-libs/user/profile/components/close-account/close-account.module.ts","../../../feature-libs/user/profile/components/forgot-password/forgot-password-component.service.ts","../../../feature-libs/user/profile/components/forgot-password/forgot-password.component.ts","../../../feature-libs/user/profile/components/forgot-password/forgot-password.module.ts","../../../node_modules/tslib/tslib.es6.js","../../../feature-libs/user/profile/components/register/register.component.ts","../../../feature-libs/user/profile/components/register/register.module.ts","../../../feature-libs/user/profile/components/reset-password/reset-password-component.service.ts","../../../feature-libs/user/profile/components/reset-password/reset-password.component.ts","../../../feature-libs/user/profile/components/reset-password/reset-password.module.ts","../../../feature-libs/user/profile/components/update-email/update-email-component.service.ts","../../../feature-libs/user/profile/components/update-email/update-email.component.ts","../../../feature-libs/user/profile/components/update-email/update-email.module.ts","../../../feature-libs/user/profile/components/update-password/update-password-component.service.ts","../../../feature-libs/user/profile/components/update-password/update-password.component.ts","../../../feature-libs/user/profile/components/update-password/update-password.module.ts","../../../feature-libs/user/profile/components/update-profile/update-profile-component.service.ts","../../../feature-libs/user/profile/components/update-profile/update-profile.component.ts","../../../feature-libs/user/profile/components/update-profile/update-profile.module.ts","../../../feature-libs/user/profile/components/user-profile-components.module.ts"],"names":["CloseAccountModalComponent","modalService","authService","globalMessageService","routingService","translationService","userProfile","this","iconTypes","ICON_TYPE","isLoading$","BehaviorSubject","prototype","ngOnInit","isLoggedIn$","isUserLoggedIn","onSuccess","_this","dismissModal","translate","pipe","first","subscribe","text","add","GlobalMessageType","MSG_TYPE_CONFIRMATION","go","cxRoute","onError","MSG_TYPE_ERROR","reason","dismissActiveModal","closeAccount","next","close","error","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","ModalService","AuthService","GlobalMessageService","RoutingService","TranslationService","UserProfileFacade","CloseAccountComponent","openModal","modal","open","centered","componentInstance","NgModule","imports","CommonModule","RouterModule","UrlModule","I18nModule","IconModule","SpinnerModule","providers","provideDefaultConfig","cmsComponents","component","guards","AuthGuard","declarations","ForgotPasswordComponentService","userPasswordService","authConfigService","globalMessage","busy$","isUpdating$","tap","state","form","disable","enable","FormGroup","userEmail","FormControl","Validators","required","CustomFormValidators","emailValidator","requestEmail","valid","requestForgotPasswordEmail","value","markAllAsTouched","key","reset","redirect","_error","getOAuthFlow","OAuthFlow","ResourceOwnerPasswordFlow","Injectable","UserPasswordFacade","AuthConfigService","ForgotPasswordComponent","service","onSubmit","ReactiveFormsModule","FormErrorsModule","NotAuthGuard","provide","useClass","deps","Object","create","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","done","push","RegisterComponent","userRegister","fb","router","anonymousConsentsService","anonymousConsentsConfig","subscription","Subscription","registerForm","group","titleCode","firstName","lastName","email","password","passwordValidator","passwordconf","newsletter","disabled","isConsentRequired","termsandconditions","requiredTrue","validators","passwordsMustMatch","titles$","getTitles","map","titles","sort","sortTitles","get","filter","messages","keys","length","globalMessageEntities","some","message","remove","registerConsent","_c","_b","_a","anonymousConsents","anonymousConsent$","combineLatest","getConsent","getTemplate","_e","_f","consent","description","valueChanges","toggleAnonymousConsent","submitForm","registerUser","register","collectDataFromRegisterForm","onRegisterUserSuccess","complete","titleSelected","title","setValue","code","formData","uid","toLowerCase","isConsentGiven","requiredConsents","_d","includes","Boolean","giveConsent","withdrawConsent","ngOnDestroy","unsubscribe","UserRegisterFacade","FormBuilder","AnonymousConsentsService","AnonymousConsentsConfig","RegisterCustomerComponent","ResetPasswordComponentService","resetToken$","getRouterState","routerState","queryParams","passwordConfirm","resetPassword","token","details","forEach","err","raw","ResetPasswordComponent","token$","host","class","FormsModule","UpdateEmailComponentService","confirmEmail","emailsMustMatch","save","newEmail","update","newUid","params","coreLogout","then","undefined","UserEmailFacade","UpdateEmailComponent","UpdatePasswordComponentService","oldPassword","newPassword","newPasswordConfirm","updatePassword","UpdatePasswordComponent","UpdateProfileComponentService","user$","user","patchValue","switchMap","_user","customerId","updateProfile","UpdateProfileComponent","RegisterComponentModule","UpdateProfileModule","UpdateEmailModule","UpdatePasswordModule","ForgotPasswordModule","ResetPasswordModule","CloseAccountModule"],"mappings":"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","sourcesContent":["import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { ICON_TYPE, ModalService } from '@spartacus/storefront';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { UserProfileFacade } from '@spartacus/user/profile/root';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  isLoggedIn$: Observable<boolean>;\n  isLoading$ = new BehaviorSubject(false);\n\n  constructor(\n    protected modalService: ModalService,\n    protected authService: AuthService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected userProfile: UserProfileFacade\n  ) {}\n\n  ngOnInit() {\n    this.isLoggedIn$ = this.authService.isUserLoggedIn();\n  }\n\n  onSuccess(): void {\n    this.dismissModal();\n    this.translationService\n      .translate('closeAccount.accountClosedSuccessfully')\n      .pipe(first())\n      .subscribe((text) => {\n        this.globalMessageService.add(\n          text,\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n      });\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onError(): void {\n    this.dismissModal();\n    this.translationService\n      .translate('closeAccount.accountClosedFailure')\n      .pipe(first())\n      .subscribe((text) => {\n        this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n      });\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.isLoading$.next(true);\n\n    this.userProfile.close().subscribe({\n      next: () => {\n        this.onSuccess();\n        this.isLoading$.next(false);\n      },\n      error: () => {\n        this.onError();\n        this.isLoading$.next(false);\n      },\n    });\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ModalService } from '@spartacus/storefront';\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(protected modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule, SpinnerModule } from '@spartacus/storefront';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport {\n  AuthConfigService,\n  GlobalMessageService,\n  GlobalMessageType,\n  OAuthFlow,\n  RoutingService,\n} from '@spartacus/core';\nimport { CustomFormValidators } from '@spartacus/storefront';\nimport { UserPasswordFacade } from '@spartacus/user/profile/root';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class ForgotPasswordComponentService {\n  constructor(\n    protected userPasswordService: UserPasswordFacade,\n    protected routingService: RoutingService,\n    protected authConfigService: AuthConfigService,\n    protected globalMessage: GlobalMessageService\n  ) {}\n\n  protected busy$ = new BehaviorSubject(false);\n\n  isUpdating$ = this.busy$.pipe(\n    tap((state) => (state === true ? this.form.disable() : this.form.enable()))\n  );\n\n  form: FormGroup = new FormGroup({\n    userEmail: new FormControl('', [\n      Validators.required,\n      CustomFormValidators.emailValidator,\n    ]),\n  });\n\n  /**\n   * Sends an email to the user to reset the password.\n   *\n   * When the `ResourceOwnerPasswordFlow` is used, the user is routed\n   * to the login page.\n   */\n  requestEmail() {\n    if (!this.form.valid) {\n      this.form.markAllAsTouched();\n      return;\n    }\n\n    this.busy$.next(true);\n\n    this.userPasswordService\n      .requestForgotPasswordEmail(this.form.value.userEmail)\n      .subscribe({\n        next: () => this.onSuccess(),\n        error: (error: Error) => this.onError(error),\n      });\n  }\n\n  protected onSuccess(): void {\n    this.globalMessage.add(\n      { key: 'forgottenPassword.passwordResetEmailSent' },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.busy$.next(false);\n    this.form.reset();\n    this.redirect();\n  }\n\n  protected onError(_error: Error): void {\n    this.busy$.next(false);\n  }\n\n  /**\n   * Redirects the user back to the login page.\n   *\n   * This only happens in case of the `ResourceOwnerPasswordFlow` OAuth flow.\n   */\n  protected redirect() {\n    if (\n      this.authConfigService.getOAuthFlow() ===\n      OAuthFlow.ResourceOwnerPasswordFlow\n    ) {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ForgotPasswordComponentService } from './forgot-password-component.service';\n\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ForgotPasswordComponent {\n  constructor(protected service: ForgotPasswordComponentService) {}\n\n  form: FormGroup = this.service.form;\n  isUpdating$ = this.service.isUpdating$;\n\n  onSubmit(): void {\n    this.service.requestEmail();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthConfigService,\n  CmsConfig,\n  GlobalMessageService,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  RoutingService,\n  UrlModule,\n} from '@spartacus/core';\nimport { FormErrorsModule, SpinnerModule } from '@spartacus/storefront';\nimport { UserPasswordFacade } from '@spartacus/user/profile/root';\nimport { ForgotPasswordComponentService } from './forgot-password-component.service';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n          providers: [\n            {\n              provide: ForgotPasswordComponentService,\n              useClass: ForgotPasswordComponentService,\n              deps: [\n                UserPasswordFacade,\n                RoutingService,\n                AuthConfigService,\n                GlobalMessageService,\n              ],\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  AuthConfigService,\n  ConsentTemplate,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  OAuthFlow,\n  RoutingService,\n} from '@spartacus/core';\nimport { CustomFormValidators, sortTitles } from '@spartacus/storefront';\nimport {\n  Title,\n  UserRegisterFacade,\n  UserSignUp,\n} from '@spartacus/user/profile/root';\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n\n  isLoading$ = new BehaviorSubject(false);\n\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  registerForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isConsentRequired(),\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userRegister: UserRegisterFacade,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router: RoutingService,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig,\n    protected authConfigService: AuthConfigService\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userRegister.getTitles().pipe(\n      map((titles: Title[]) => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter((messages) => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some((message) => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    const registerConsent =\n      this.anonymousConsentsConfig?.anonymousConsents?.registerConsent ?? '';\n\n    this.anonymousConsent$ = combineLatest([\n      this.anonymousConsentsService.getConsent(registerConsent),\n      this.anonymousConsentsService.getTemplate(registerConsent),\n    ]).pipe(\n      map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n        return {\n          consent,\n          template: template?.description ? template.description : '',\n        };\n      })\n    );\n\n    this.subscription.add(\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      this.registerForm.get('newsletter')!.valueChanges.subscribe(() => {\n        this.toggleAnonymousConsent();\n      })\n    );\n  }\n\n  submitForm(): void {\n    if (this.registerForm.valid) {\n      this.registerUser();\n    } else {\n      this.registerForm.markAllAsTouched();\n    }\n  }\n\n  registerUser(): void {\n    this.isLoading$.next(true);\n    this.userRegister\n      .register(this.collectDataFromRegisterForm(this.registerForm.value))\n      .subscribe({\n        next: () => this.onRegisterUserSuccess(),\n        complete: () => this.isLoading$.next(false),\n      });\n  }\n\n  titleSelected(title: Title): void {\n    this.registerForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    const requiredConsents = this.anonymousConsentsConfig?.anonymousConsents\n      ?.requiredConsents;\n    const registerConsent = this.anonymousConsentsConfig?.anonymousConsents\n      ?.registerConsent;\n\n    if (requiredConsents && registerConsent) {\n      return requiredConsents.includes(registerConsent);\n    }\n\n    return false;\n  }\n\n  private onRegisterUserSuccess(): void {\n    if (\n      this.authConfigService.getOAuthFlow() ===\n      OAuthFlow.ResourceOwnerPasswordFlow\n    ) {\n      this.router.go('login');\n    }\n    this.globalMessageService.add(\n      { key: 'register.postRegisterMessage' },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n  }\n\n  toggleAnonymousConsent(): void {\n    const registerConsent = this.anonymousConsentsConfig?.anonymousConsents\n      ?.registerConsent;\n\n    if (registerConsent) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      if (Boolean(this.registerForm.get('newsletter')!.value)) {\n        this.anonymousConsentsService.giveConsent(registerConsent);\n      } else {\n        this.anonymousConsentsService.withdrawConsent(registerConsent);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { FormErrorsModule, SpinnerModule } from '@spartacus/storefront';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport {\n  ErrorModel,\n  GlobalMessageService,\n  GlobalMessageType,\n  HttpErrorModel,\n  RouterState,\n  RoutingService,\n} from '@spartacus/core';\nimport { CustomFormValidators } from '@spartacus/storefront';\nimport { UserPasswordFacade } from '@spartacus/user/profile/root';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class ResetPasswordComponentService {\n  constructor(\n    protected userPasswordService: UserPasswordFacade,\n    protected routingService: RoutingService,\n    protected globalMessage: GlobalMessageService\n  ) {}\n\n  protected busy$ = new BehaviorSubject(false);\n\n  isUpdating$ = this.busy$.pipe(\n    tap((state) => (state === true ? this.form.disable() : this.form.enable()))\n  );\n\n  resetToken$: Observable<string> = this.routingService\n    .getRouterState()\n    .pipe(\n      map((routerState: RouterState) => routerState.state.queryParams['token'])\n    );\n\n  form: FormGroup = new FormGroup(\n    {\n      password: new FormControl('', [\n        Validators.required,\n        CustomFormValidators.passwordValidator,\n      ]),\n      passwordConfirm: new FormControl('', Validators.required),\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordConfirm'\n      ),\n    }\n  );\n\n  /**\n   * Resets the password by the given token.\n   *\n   * The token has been provided during the request password flow.\n   * The token is not validated on the client.\n   */\n  resetPassword(token: string): void {\n    if (!this.form.valid) {\n      this.form.markAllAsTouched();\n      return;\n    }\n\n    this.busy$.next(true);\n\n    const password = (this.form.get('password') as FormControl).value;\n\n    this.userPasswordService.reset(token, password).subscribe({\n      next: () => this.onSuccess(),\n      error: (error: Error) => this.onError(error),\n    });\n  }\n\n  protected onSuccess(): void {\n    this.globalMessage.add(\n      { key: 'forgottenPassword.passwordResetSuccess' },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.busy$.next(false);\n    this.form.reset();\n    this.redirect();\n  }\n\n  protected onError(error: Error): void {\n    this.busy$.next(false);\n    ((error as HttpErrorModel)?.details ?? []).forEach((err: ErrorModel) => {\n      if (err.message) {\n        this.globalMessage.add(\n          { raw: err.message },\n          GlobalMessageType.MSG_TYPE_ERROR\n        );\n      }\n    });\n  }\n\n  /**\n   * Redirects the user to the login page.\n   */\n  protected redirect() {\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { ResetPasswordComponentService } from './reset-password-component.service';\n\n@Component({\n  selector: 'cx-reset-password',\n  templateUrl: './reset-password.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: { class: 'user-form' },\n})\nexport class ResetPasswordComponent {\n  form: FormGroup = this.service.form;\n  isUpdating$ = this.service.isUpdating$;\n\n  token$: Observable<string> = this.service.resetToken$;\n\n  constructor(protected service: ResetPasswordComponentService) {}\n\n  onSubmit(token: string) {\n    this.service.resetPassword(token);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  GlobalMessageService,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  RoutingService,\n} from '@spartacus/core';\nimport { FormErrorsModule, SpinnerModule } from '@spartacus/storefront';\nimport { UserPasswordFacade } from '@spartacus/user/profile/root';\nimport { ResetPasswordComponentService } from './reset-password-component.service';\nimport { ResetPasswordComponent } from './reset-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n    FormErrorsModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordComponent,\n          guards: [NotAuthGuard],\n          providers: [\n            {\n              provide: ResetPasswordComponentService,\n              useClass: ResetPasswordComponentService,\n              deps: [UserPasswordFacade, RoutingService, GlobalMessageService],\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ResetPasswordComponent],\n})\nexport class ResetPasswordModule {}\n","import { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n} from '@spartacus/core';\nimport { CustomFormValidators } from '@spartacus/storefront';\nimport { UserEmailFacade } from '@spartacus/user/profile/root';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class UpdateEmailComponentService {\n  constructor(\n    protected userEmail: UserEmailFacade,\n    protected routingService: RoutingService,\n    protected globalMessageService: GlobalMessageService,\n    protected authService: AuthService\n  ) {}\n\n  protected busy$ = new BehaviorSubject(false);\n\n  isUpdating$ = this.busy$.pipe(\n    tap((state) => (state === true ? this.form.disable() : this.form.enable()))\n  );\n\n  form: FormGroup = new FormGroup(\n    {\n      email: new FormControl('', [\n        Validators.required,\n        CustomFormValidators.emailValidator,\n      ]),\n      confirmEmail: new FormControl('', [Validators.required]),\n      password: new FormControl('', [Validators.required]),\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch('email', 'confirmEmail'),\n    }\n  );\n\n  save(): void {\n    if (!this.form.valid) {\n      this.form.markAllAsTouched();\n      return;\n    }\n\n    this.busy$.next(true);\n\n    const newEmail = this.form.get('confirmEmail')?.value;\n    const password = this.form.get('password')?.value;\n\n    this.userEmail.update(password, newEmail).subscribe({\n      next: () => this.onSuccess(newEmail),\n      error: (error: Error) => this.onError(error),\n    });\n  }\n\n  /**\n   * Handles successful updating of the user email.\n   */\n  protected onSuccess(newUid: string): void {\n    this.globalMessageService.add(\n      {\n        key: 'updateEmailForm.emailUpdateSuccess',\n        params: { newUid },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.busy$.next(false);\n    this.form.reset();\n    // TODO(#9638): Use logout route when it will support passing redirect url\n    this.authService.coreLogout().then(() => {\n      this.routingService.go({ cxRoute: 'login' }, undefined, {\n        state: {\n          newUid,\n        },\n      });\n    });\n  }\n\n  protected onError(_error: Error): void {\n    this.busy$.next(false);\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { UpdateEmailComponentService } from './update-email-component.service';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: { class: 'user-form' },\n})\nexport class UpdateEmailComponent {\n  constructor(protected service: UpdateEmailComponentService) {}\n\n  form: FormGroup = this.service.form;\n  isUpdating$ = this.service.isUpdating$;\n\n  onSubmit(): void {\n    this.service.save();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  AuthService,\n  CmsConfig,\n  GlobalMessageService,\n  I18nModule,\n  provideDefaultConfig,\n  RoutingService,\n  UrlModule,\n} from '@spartacus/core';\nimport { FormErrorsModule, SpinnerModule } from '@spartacus/storefront';\nimport { UserEmailFacade } from '@spartacus/user/profile/root';\nimport { UpdateEmailComponentService } from './update-email-component.service';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    UrlModule,\n    RouterModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: UpdateEmailComponentService,\n              useClass: UpdateEmailComponentService,\n              deps: [\n                UserEmailFacade,\n                RoutingService,\n                GlobalMessageService,\n                AuthService,\n              ],\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n} from '@spartacus/core';\nimport { CustomFormValidators } from '@spartacus/storefront';\nimport { UserPasswordFacade } from '@spartacus/user/profile/root';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class UpdatePasswordComponentService {\n  constructor(\n    protected userPasswordService: UserPasswordFacade,\n    protected routingService: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  protected busy$ = new BehaviorSubject(false);\n\n  isUpdating$ = this.busy$.pipe(\n    tap((state) => (state === true ? this.form.disable() : this.form.enable()))\n  );\n\n  form: FormGroup = new FormGroup(\n    {\n      oldPassword: new FormControl('', Validators.required),\n      newPassword: new FormControl('', [\n        Validators.required,\n        CustomFormValidators.passwordValidator,\n      ]),\n      newPasswordConfirm: new FormControl('', Validators.required),\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'newPassword',\n        'newPasswordConfirm'\n      ),\n    }\n  );\n\n  /**\n   * Updates the password for the user.\n   */\n  updatePassword(): void {\n    if (!this.form.valid) {\n      this.form.markAllAsTouched();\n      return;\n    }\n\n    this.busy$.next(true);\n\n    const oldPassword = this.form.get('oldPassword')?.value;\n    const newPassword = this.form.get('newPassword')?.value;\n\n    this.userPasswordService.update(oldPassword, newPassword).subscribe({\n      next: () => this.onSuccess(),\n      error: (error: Error) => this.onError(error),\n    });\n  }\n\n  protected onSuccess(): void {\n    this.globalMessageService.add(\n      { key: 'updatePasswordForm.passwordUpdateSuccess' },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.busy$.next(false);\n    this.form.reset();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  protected onError(_error: Error): void {\n    this.busy$.next(false);\n    this.form.reset();\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { UpdatePasswordComponentService } from './update-password-component.service';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: { class: 'user-form' },\n})\nexport class UpdatePasswordComponent {\n  constructor(protected service: UpdatePasswordComponentService) {}\n\n  form: FormGroup = this.service.form;\n  isUpdating$ = this.service.isUpdating$;\n\n  onSubmit(): void {\n    this.service.updatePassword();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  GlobalMessageService,\n  I18nModule,\n  provideDefaultConfig,\n  RoutingService,\n  UrlModule,\n} from '@spartacus/core';\nimport { FormErrorsModule, SpinnerModule } from '@spartacus/storefront';\nimport { UserPasswordFacade } from '@spartacus/user/profile/root';\nimport { UpdatePasswordComponentService } from './update-password-component.service';\nimport { UpdatePasswordComponent } from './update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n    UrlModule,\n    RouterModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: UpdatePasswordComponentService,\n              useClass: UpdatePasswordComponentService,\n              deps: [UserPasswordFacade, RoutingService, GlobalMessageService],\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { GlobalMessageService, GlobalMessageType } from '@spartacus/core';\nimport { User } from '@spartacus/user/account/root';\nimport { Title, UserProfileFacade } from '@spartacus/user/profile/root';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { filter, switchMap, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class UpdateProfileComponentService {\n  constructor(\n    protected userProfile: UserProfileFacade,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  protected user$ = this.userProfile\n    .get()\n    .pipe(filter((user): user is User => Boolean(user)));\n\n  protected busy$ = new BehaviorSubject(false);\n\n  isUpdating$: Observable<boolean> = this.user$.pipe(\n    tap((user) => this.form.patchValue(user)),\n    switchMap((_user: User) => this.busy$),\n    tap((state) => (state === true ? this.form.disable() : this.form.enable()))\n  );\n\n  titles$: Observable<Title[]> = this.userProfile.getTitles();\n\n  form: FormGroup = new FormGroup({\n    customerId: new FormControl(''),\n    titleCode: new FormControl(''),\n    firstName: new FormControl('', Validators.required),\n    lastName: new FormControl('', Validators.required),\n  });\n\n  /**\n   * Updates the user's details and handles the UI.\n   */\n  updateProfile(): void {\n    if (!this.form.valid) {\n      this.form.markAllAsTouched();\n      return;\n    }\n\n    this.busy$.next(true);\n\n    this.userProfile.update(this.form.value).subscribe({\n      next: () => this.onSuccess(),\n      error: (error: Error) => this.onError(error),\n    });\n  }\n\n  protected onSuccess(): void {\n    this.globalMessageService.add(\n      {\n        key: 'updateProfileForm.profileUpdateSuccess',\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n\n    this.busy$.next(false);\n    this.form.reset();\n  }\n\n  protected onError(_error: Error): void {\n    this.busy$.next(false);\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Title } from '@spartacus/user/profile/root';\nimport { Observable } from 'rxjs';\nimport { UpdateProfileComponentService } from './update-profile-component.service';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: { class: 'user-form' },\n})\nexport class UpdateProfileComponent {\n  constructor(protected service: UpdateProfileComponentService) {}\n\n  form: FormGroup = this.service.form;\n  isUpdating$ = this.service.isUpdating$;\n  titles$: Observable<Title[]> = this.service.titles$;\n\n  onSubmit(): void {\n    this.service.updateProfile();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  GlobalMessageService,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { FormErrorsModule, SpinnerModule } from '@spartacus/storefront';\nimport { UserProfileFacade } from '@spartacus/user/profile/root';\nimport { UpdateProfileComponentService } from './update-profile-component.service';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n    RouterModule,\n    UrlModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: UpdateProfileComponentService,\n              useClass: UpdateProfileComponentService,\n              deps: [UserProfileFacade, GlobalMessageService],\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { NgModule } from '@angular/core';\nimport { CloseAccountModule } from './close-account/close-account.module';\nimport { ForgotPasswordModule } from './forgot-password/forgot-password.module';\nimport { RegisterComponentModule } from './register/register.module';\nimport { ResetPasswordModule } from './reset-password/reset-password.module';\nimport { UpdateEmailModule } from './update-email/update-email.module';\nimport { UpdatePasswordModule } from './update-password/update-password.module';\nimport { UpdateProfileModule } from './update-profile/update-profile.module';\n\n@NgModule({\n  imports: [\n    RegisterComponentModule,\n    UpdateProfileModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    CloseAccountModule,\n  ],\n})\nexport class UserProfileComponentsModule {}\n"]}