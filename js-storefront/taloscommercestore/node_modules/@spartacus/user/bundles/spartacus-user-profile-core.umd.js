(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@spartacus/core'), require('rxjs/operators'), require('@spartacus/user/account/root'), require('@ngrx/store'), require('@spartacus/user/profile/root')) :
    typeof define === 'function' && define.amd ? define('@spartacus/user/profile/core', ['exports', '@angular/core', '@spartacus/core', 'rxjs/operators', '@spartacus/user/account/root', '@ngrx/store', '@spartacus/user/profile/root'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.spartacus = global.spartacus || {}, global.spartacus.user = global.spartacus.user || {}, global.spartacus.user.profile = global.spartacus.user.profile || {}, global.spartacus.user.profile.core = {}), global.ng.core, global.core, global.rxjs.operators, global.spartacus.user.account.root, global.store, global.spartacus.user.profile.root));
}(this, (function (exports, core, core$1, operators, root, store, root$1) { 'use strict';

    var USER_PROFILE_NORMALIZER = new core.InjectionToken('UserProfileNormalizer');
    var USER_PROFILE_SERIALIZER = new core.InjectionToken('UserProfileSerializer');
    var USER_SERIALIZER = new core.InjectionToken('UserSerializer');
    var USER_SIGN_UP_SERIALIZER = new core.InjectionToken('UserSignUpSerializer');
    var TITLE_NORMALIZER = new core.InjectionToken('TitleNormalizer');

    var UserProfileAdapter = /** @class */ (function () {
        function UserProfileAdapter() {
        }
        return UserProfileAdapter;
    }());

    var UserProfileConnector = /** @class */ (function () {
        function UserProfileConnector(userProfileAdapter) {
            this.userProfileAdapter = userProfileAdapter;
        }
        UserProfileConnector.prototype.update = function (username, user) {
            return this.userProfileAdapter.update(username, user);
        };
        UserProfileConnector.prototype.register = function (user) {
            return this.userProfileAdapter.register(user);
        };
        UserProfileConnector.prototype.registerGuest = function (guid, password) {
            return this.userProfileAdapter.registerGuest(guid, password);
        };
        UserProfileConnector.prototype.requestForgotPasswordEmail = function (userEmailAddress) {
            return this.userProfileAdapter.requestForgotPasswordEmail(userEmailAddress);
        };
        UserProfileConnector.prototype.resetPassword = function (token, newPassword) {
            return this.userProfileAdapter.resetPassword(token, newPassword);
        };
        UserProfileConnector.prototype.updateEmail = function (userId, currentPassword, newUserId) {
            return this.userProfileAdapter.updateEmail(userId, currentPassword, newUserId);
        };
        UserProfileConnector.prototype.updatePassword = function (userId, oldPassword, newPassword) {
            return this.userProfileAdapter.updatePassword(userId, oldPassword, newPassword);
        };
        UserProfileConnector.prototype.remove = function (userId) {
            return this.userProfileAdapter.close(userId);
        };
        UserProfileConnector.prototype.getTitles = function () {
            return this.userProfileAdapter.loadTitles();
        };
        return UserProfileConnector;
    }());
    UserProfileConnector.decorators = [
        { type: core.Injectable }
    ];
    UserProfileConnector.ctorParameters = function () { return [
        { type: UserProfileAdapter }
    ]; };

    var UserEmailService = /** @class */ (function () {
        function UserEmailService(userIdService, userProfileConnector, command) {
            var _this = this;
            this.userIdService = userIdService;
            this.userProfileConnector = userProfileConnector;
            this.command = command;
            this.updateCommand = this.command.create(function (payload) { return _this.userIdService
                .takeUserId(true)
                .pipe(operators.switchMap(function (uid) { return _this.userProfileConnector.updateEmail(uid, payload.password, payload.newUid); })); }, {
                strategy: core$1.CommandStrategy.Queue,
            });
        }
        /**
         * Updates the user's email.
         *
         * @param password to users password to confirm the users
         * @param newUid the new proposed email address.
         */
        UserEmailService.prototype.update = function (password, newUid) {
            return this.updateCommand.execute({ password: password, newUid: newUid });
        };
        return UserEmailService;
    }());
    UserEmailService.decorators = [
        { type: core.Injectable }
    ];
    UserEmailService.ctorParameters = function () { return [
        { type: core$1.UserIdService },
        { type: UserProfileConnector },
        { type: core$1.CommandService }
    ]; };

    var UserPasswordService = /** @class */ (function () {
        function UserPasswordService(userProfileConnector, userIdService, command) {
            var _this = this;
            this.userProfileConnector = userProfileConnector;
            this.userIdService = userIdService;
            this.command = command;
            this.updateCommand = this.command.create(function (payload) { return _this.userIdService.takeUserId(true).pipe(operators.take(1), operators.switchMap(function (uid) { return _this.userProfileConnector.updatePassword(uid, payload.oldPassword, payload.newPassword); })); });
            this.resetCommand = this.command.create(function (payload) { return _this.userProfileConnector.resetPassword(payload.token, payload.password); });
            this.requestForgotPasswordEmailCommand = this.command.create(function (payload) { return _this.userProfileConnector.requestForgotPasswordEmail(payload.email); });
        }
        /**
         * Updates the password for the user
         *
         * The method returns an observable with `LoaderState` information, including the
         * actual user data.
         *
         * @param oldPassword the current password that will be changed
         * @param newPassword the new password
         */
        UserPasswordService.prototype.update = function (oldPassword, newPassword) {
            return this.updateCommand.execute({ oldPassword: oldPassword, newPassword: newPassword });
        };
        /**
         * Reset new password. Part of the forgot password flow.
         *
         * @param token
         * @param password
         */
        UserPasswordService.prototype.reset = function (token, password) {
            return this.resetCommand.execute({ token: token, password: password });
        };
        /*
         * Request an email to reset a forgotten password.
         */
        UserPasswordService.prototype.requestForgotPasswordEmail = function (email) {
            return this.requestForgotPasswordEmailCommand.execute({ email: email });
        };
        return UserPasswordService;
    }());
    UserPasswordService.decorators = [
        { type: core.Injectable }
    ];
    UserPasswordService.ctorParameters = function () { return [
        { type: UserProfileConnector },
        { type: core$1.UserIdService },
        { type: core$1.CommandService }
    ]; };

    var UserProfileService = /** @class */ (function () {
        function UserProfileService(userAccountService, authService, userProfileConnector, eventService, userIdService, query, command) {
            var _this = this;
            this.userAccountService = userAccountService;
            this.authService = authService;
            this.userProfileConnector = userProfileConnector;
            this.eventService = eventService;
            this.userIdService = userIdService;
            this.query = query;
            this.command = command;
            this.updateCommand = this.command.create(function (payload) { return _this.userIdService.takeUserId(true).pipe(operators.switchMap(function (uid) { return _this.userProfileConnector.update(uid, payload.details).pipe(operators.tap(function () {
                _this.eventService.dispatch({ user: payload.details }, root.UserAccountChangedEvent);
            })); })); }, {
                strategy: core$1.CommandStrategy.Queue,
            });
            this.closeCommand = this.command.create(function () { return _this.userIdService
                .takeUserId(true)
                .pipe(operators.switchMap(function (uid) { return _this.userProfileConnector
                .remove(uid)
                .pipe(operators.tap(function () { return _this.authService.logout(); })); })); });
            this.titleQuery = this.query.create(function () { return _this.userProfileConnector.getTitles(); }, {
                reloadOn: [core$1.LanguageSetEvent],
            });
        }
        UserProfileService.prototype.get = function () {
            return this.userAccountService.get();
        };
        /**
         * Updates the user's details.
         *
         * @param details User details to be updated.
         */
        UserProfileService.prototype.update = function (details) {
            return this.updateCommand.execute({ details: details });
        };
        /**
         * Closes the user account.
         */
        UserProfileService.prototype.close = function () {
            return this.closeCommand.execute(undefined);
        };
        /**
         * Returns titles that can be used for the user profiles.
         */
        UserProfileService.prototype.getTitles = function () {
            return this.titleQuery.get().pipe(operators.map(function (titles) { return titles !== null && titles !== void 0 ? titles : []; }));
        };
        return UserProfileService;
    }());
    UserProfileService.decorators = [
        { type: core.Injectable }
    ];
    UserProfileService.ctorParameters = function () { return [
        { type: root.UserAccountFacade },
        { type: core$1.AuthService },
        { type: UserProfileConnector },
        { type: core$1.EventService },
        { type: core$1.UserIdService },
        { type: core$1.QueryService },
        { type: core$1.CommandService }
    ]; };

    var UserRegisterService = /** @class */ (function () {
        function UserRegisterService(userProfile, userConnector, authService, command, store) {
            var _this = this;
            this.userProfile = userProfile;
            this.userConnector = userConnector;
            this.authService = authService;
            this.command = command;
            this.store = store;
            this.registerCommand = this.command.create(function (_a) {
                var user = _a.user;
                return _this.userConnector.register(user).pipe(operators.tap(function () {
                    // this is a compatibility mechanism only, to make anonymous consents
                    // management work properly in transitional period (when we move logic
                    // to separate libraries)
                    _this.store.dispatch(new core$1.UserActions.RegisterUserSuccess());
                }));
            });
            this.registerGuestCommand = this.command.create(function (payload) { return _this.userConnector.registerGuest(payload.guid, payload.password).pipe(operators.tap(function (user) {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                _this.authService.loginWithCredentials(user.uid, payload.password);
            })); });
        }
        /**
         * Register a new user.
         *
         * @param submitFormData as UserRegisterFormData
         */
        UserRegisterService.prototype.register = function (user) {
            return this.registerCommand.execute({ user: user });
        };
        /**
         * Register a new user from guest.
         *
         * @param guid
         * @param password
         */
        UserRegisterService.prototype.registerGuest = function (guid, password) {
            return this.registerGuestCommand.execute({ guid: guid, password: password });
        };
        /**
         * Returns titles that can be used for the user profiles.
         */
        UserRegisterService.prototype.getTitles = function () {
            return this.userProfile.getTitles();
        };
        return UserRegisterService;
    }());
    UserRegisterService.decorators = [
        { type: core.Injectable }
    ];
    UserRegisterService.ctorParameters = function () { return [
        { type: UserProfileService },
        { type: UserProfileConnector },
        { type: core$1.AuthService },
        { type: core$1.CommandService },
        { type: store.Store }
    ]; };

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, exports) {
        for (var p in m)
            if (p !== "default" && !exports.hasOwnProperty(p))
                __createBinding(exports, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (Object.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var facadeProviders = [
        UserEmailService,
        UserPasswordService,
        UserProfileService,
        UserRegisterService,
        {
            provide: root$1.UserEmailFacade,
            useExisting: UserEmailService,
        },
        {
            provide: root$1.UserPasswordFacade,
            useExisting: UserPasswordService,
        },
        {
            provide: root$1.UserProfileFacade,
            useExisting: UserProfileService,
        },
        {
            provide: root$1.UserRegisterFacade,
            useExisting: UserRegisterService,
        },
    ];

    var UserProfileCoreModule = /** @class */ (function () {
        function UserProfileCoreModule() {
        }
        return UserProfileCoreModule;
    }());
    UserProfileCoreModule.decorators = [
        { type: core.NgModule, args: [{
                    providers: __spread([UserProfileConnector], facadeProviders),
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.TITLE_NORMALIZER = TITLE_NORMALIZER;
    exports.USER_PROFILE_NORMALIZER = USER_PROFILE_NORMALIZER;
    exports.USER_PROFILE_SERIALIZER = USER_PROFILE_SERIALIZER;
    exports.USER_SERIALIZER = USER_SERIALIZER;
    exports.USER_SIGN_UP_SERIALIZER = USER_SIGN_UP_SERIALIZER;
    exports.UserEmailService = UserEmailService;
    exports.UserPasswordService = UserPasswordService;
    exports.UserProfileAdapter = UserProfileAdapter;
    exports.UserProfileConnector = UserProfileConnector;
    exports.UserProfileCoreModule = UserProfileCoreModule;
    exports.UserProfileService = UserProfileService;
    exports.UserRegisterService = UserRegisterService;
    exports.ɵa = facadeProviders;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=spartacus-user-profile-core.umd.js.map
