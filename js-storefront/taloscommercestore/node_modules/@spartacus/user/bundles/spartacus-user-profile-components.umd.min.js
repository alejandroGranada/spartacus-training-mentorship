!function(e,o){"object"==typeof exports&&"undefined"!=typeof module?o(exports,require("@angular/common"),require("@angular/core"),require("@angular/router"),require("@spartacus/core"),require("@spartacus/storefront"),require("rxjs"),require("rxjs/operators"),require("@spartacus/user/profile/root"),require("@angular/forms")):"function"==typeof define&&define.amd?define("@spartacus/user/profile/components",["exports","@angular/common","@angular/core","@angular/router","@spartacus/core","@spartacus/storefront","rxjs","rxjs/operators","@spartacus/user/profile/root","@angular/forms"],o):o(((e="undefined"!=typeof globalThis?globalThis:e||self).spartacus=e.spartacus||{},e.spartacus.user=e.spartacus.user||{},e.spartacus.user.profile=e.spartacus.user.profile||{},e.spartacus.user.profile.components={}),e.ng.common,e.ng.core,e.ng.router,e.core,e.storefront,e.rxjs,e.rxjs.operators,e.spartacus.user.profile.root,e.ng.forms)}(this,(function(e,o,n,r,t,s,a,i,l,c){"use strict";var u=function(){function e(e,o,n,r,t,i){this.modalService=e,this.authService=o,this.globalMessageService=n,this.routingService=r,this.translationService=t,this.userProfile=i,this.iconTypes=s.ICON_TYPE,this.isLoading$=new a.BehaviorSubject(!1)}return e.prototype.ngOnInit=function(){this.isLoggedIn$=this.authService.isUserLoggedIn()},e.prototype.onSuccess=function(){var e=this;this.dismissModal(),this.translationService.translate("closeAccount.accountClosedSuccessfully").pipe(i.first()).subscribe((function(o){e.globalMessageService.add(o,t.GlobalMessageType.MSG_TYPE_CONFIRMATION)})),this.routingService.go({cxRoute:"home"})},e.prototype.onError=function(){var e=this;this.dismissModal(),this.translationService.translate("closeAccount.accountClosedFailure").pipe(i.first()).subscribe((function(o){e.globalMessageService.add(o,t.GlobalMessageType.MSG_TYPE_ERROR)}))},e.prototype.dismissModal=function(e){this.modalService.dismissActiveModal(e)},e.prototype.closeAccount=function(){var e=this;this.isLoading$.next(!0),this.userProfile.close().subscribe({next:function(){e.onSuccess(),e.isLoading$.next(!1)},error:function(){e.onError(),e.isLoading$.next(!1)}})},e}();u.decorators=[{type:n.Component,args:[{selector:"cx-close-account-modal",template:'<ng-container *ngIf="isLoggedIn$ | async">\n  <div class="modal-header cx-dialog-header">\n    <h3 class="modal-title">\n      {{ \'closeAccount.confirmAccountClosure\' | cxTranslate }}\n    </h3>\n    <button\n      type="button"\n      class="close"\n      aria-label="Close"\n      (click)="dismissModal()"\n    >\n      <span aria-hidden="true">\n        <cx-icon [type]="iconTypes.CLOSE"></cx-icon>\n      </span>\n    </button>\n  </div>\n\n  <div *ngIf="isLoading$ | async; else loaded">\n    <div class="cx-spinner">\n      <cx-spinner> </cx-spinner>\n    </div>\n  </div>\n\n  <ng-template #loaded>\n    <div class="modal-body">\n      <div class="cx-row">\n        <p class="cx-confirmation">\n          {{ \'closeAccount.confirmAccountClosureMessage\' | cxTranslate }}\n        </p>\n      </div>\n      <div class="cx-row">\n        <div class="cx-btn-group">\n          <button class="btn btn-primary" (click)="closeAccount()">\n            {{ \'closeAccount.closeMyAccount\' | cxTranslate }}\n          </button>\n          <button (click)="dismissModal()" class="btn btn-block btn-secondary">\n            {{ \'common.cancel\' | cxTranslate }}\n          </button>\n        </div>\n      </div>\n    </div>\n  </ng-template>\n</ng-container>\n',changeDetection:n.ChangeDetectionStrategy.OnPush}]}],u.ctorParameters=function(){return[{type:s.ModalService},{type:t.AuthService},{type:t.GlobalMessageService},{type:t.RoutingService},{type:t.TranslationService},{type:l.UserProfileFacade}]};var d=function(){function e(e){this.modalService=e}return e.prototype.openModal=function(){this.modal=this.modalService.open(u,{centered:!0}).componentInstance},e}();d.decorators=[{type:n.Component,args:[{selector:"cx-close-account",template:'<div class="col-lg-8 col-md-9">\n  <div class="row cx-btn-group">\n    <div class="col-sm-3">\n      <a\n        [routerLink]="{ cxRoute: \'home\' } | cxUrl"\n        class="btn btn-block btn-secondary"\n        >{{ \'common.cancel\' | cxTranslate }}</a\n      >\n    </div>\n    <div class="col-sm-6">\n      <button class="btn btn-primary" (click)="openModal()">\n        {{ \'closeAccount.closeMyAccount\' | cxTranslate }}\n      </button>\n    </div>\n  </div>\n</div>\n',changeDetection:n.ChangeDetectionStrategy.OnPush}]}],d.ctorParameters=function(){return[{type:s.ModalService}]};var m=function(){};m.decorators=[{type:n.NgModule,args:[{imports:[o.CommonModule,r.RouterModule,t.UrlModule,t.I18nModule,s.IconModule,s.SpinnerModule],providers:[t.provideDefaultConfig({cmsComponents:{CloseAccountComponent:{component:d,guards:[t.AuthGuard]}}})],declarations:[d,u]}]}];var p=function(){function e(e,o,n,r){var t=this;this.userPasswordService=e,this.routingService=o,this.authConfigService=n,this.globalMessage=r,this.busy$=new a.BehaviorSubject(!1),this.isUpdating$=this.busy$.pipe(i.tap((function(e){return!0===e?t.form.disable():t.form.enable()}))),this.form=new c.FormGroup({userEmail:new c.FormControl("",[c.Validators.required,s.CustomFormValidators.emailValidator])})}return e.prototype.requestEmail=function(){var e=this;this.form.valid?(this.busy$.next(!0),this.userPasswordService.requestForgotPasswordEmail(this.form.value.userEmail).subscribe({next:function(){return e.onSuccess()},error:function(o){return e.onError(o)}})):this.form.markAllAsTouched()},e.prototype.onSuccess=function(){this.globalMessage.add({key:"forgottenPassword.passwordResetEmailSent"},t.GlobalMessageType.MSG_TYPE_CONFIRMATION),this.busy$.next(!1),this.form.reset(),this.redirect()},e.prototype.onError=function(e){this.busy$.next(!1)},e.prototype.redirect=function(){this.authConfigService.getOAuthFlow()===t.OAuthFlow.ResourceOwnerPasswordFlow&&this.routingService.go({cxRoute:"login"})},e}();p.decorators=[{type:n.Injectable}],p.ctorParameters=function(){return[{type:l.UserPasswordFacade},{type:t.RoutingService},{type:t.AuthConfigService},{type:t.GlobalMessageService}]};var f=function(){function e(e){this.service=e,this.form=this.service.form,this.isUpdating$=this.service.isUpdating$}return e.prototype.onSubmit=function(){this.service.requestEmail()},e}();f.decorators=[{type:n.Component,args:[{selector:"cx-forgot-password",template:'<cx-spinner class="overlay" *ngIf="isUpdating$ | async"> </cx-spinner>\n\n<form (ngSubmit)="onSubmit()" [formGroup]="form">\n  <label>\n    <span class="label-content">{{\n      \'forgottenPassword.emailAddress.label\' | cxTranslate\n    }}</span>\n    <input\n      type="email"\n      class="form-control"\n      placeholder="{{\n        \'forgottenPassword.emailAddress.placeholder\' | cxTranslate\n      }}"\n      formControlName="userEmail"\n    />\n    <cx-form-errors [control]="form.get(\'userEmail\')"></cx-form-errors>\n  </label>\n\n  <a\n    class="btn btn-block btn-secondary"\n    [routerLink]="{ cxRoute: \'login\' } | cxUrl"\n    >{{ \'common.cancel\' | cxTranslate }}</a\n  >\n  <button class="btn btn-block btn-primary" [disabled]="form.disabled">\n    {{ \'common.submit\' | cxTranslate }}\n  </button>\n</form>\n',changeDetection:n.ChangeDetectionStrategy.OnPush}]}],f.ctorParameters=function(){return[{type:p}]};var g=function(){};g.decorators=[{type:n.NgModule,args:[{imports:[o.CommonModule,c.ReactiveFormsModule,r.RouterModule,t.UrlModule,t.I18nModule,s.FormErrorsModule,s.SpinnerModule],providers:[t.provideDefaultConfig({cmsComponents:{ForgotPasswordComponent:{component:f,guards:[t.NotAuthGuard],providers:[{provide:p,useClass:p,deps:[l.UserPasswordFacade,t.RoutingService,t.AuthConfigService,t.GlobalMessageService]}]}}})],declarations:[f]}]}];Object.create;function h(e,o){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,t,s=n.call(e),a=[];try{for(;(void 0===o||o-- >0)&&!(r=s.next()).done;)a.push(r.value)}catch(e){t={error:e}}finally{try{r&&!r.done&&(n=s.return)&&n.call(s)}finally{if(t)throw t.error}}return a}Object.create;var b=function(){function e(e,o,n,r,t,i,l){this.userRegister=e,this.globalMessageService=o,this.fb=n,this.router=r,this.anonymousConsentsService=t,this.anonymousConsentsConfig=i,this.authConfigService=l,this.isLoading$=new a.BehaviorSubject(!1),this.subscription=new a.Subscription,this.registerForm=this.fb.group({titleCode:[""],firstName:["",c.Validators.required],lastName:["",c.Validators.required],email:["",[c.Validators.required,s.CustomFormValidators.emailValidator]],password:["",[c.Validators.required,s.CustomFormValidators.passwordValidator]],passwordconf:["",c.Validators.required],newsletter:new c.FormControl({value:!1,disabled:this.isConsentRequired()}),termsandconditions:[!1,c.Validators.requiredTrue]},{validators:s.CustomFormValidators.passwordsMustMatch("password","passwordconf")})}return e.prototype.ngOnInit=function(){var e,o,n,r=this;this.titles$=this.userRegister.getTitles().pipe(i.map((function(e){return e.sort(s.sortTitles)}))),this.subscription.add(this.globalMessageService.get().pipe(i.filter((function(e){return!!Object.keys(e).length}))).subscribe((function(e){var o=e&&e[t.GlobalMessageType.MSG_TYPE_ERROR];o&&o.some((function(e){return"This field is required."===e}))&&(r.globalMessageService.remove(t.GlobalMessageType.MSG_TYPE_ERROR),r.globalMessageService.add({key:"register.titleRequired"},t.GlobalMessageType.MSG_TYPE_ERROR))})));var l=null!==(n=null===(o=null===(e=this.anonymousConsentsConfig)||void 0===e?void 0:e.anonymousConsents)||void 0===o?void 0:o.registerConsent)&&void 0!==n?n:"";this.anonymousConsent$=a.combineLatest([this.anonymousConsentsService.getConsent(l),this.anonymousConsentsService.getTemplate(l)]).pipe(i.map((function(e){var o=h(e,2),n=o[0],r=o[1];return{consent:n,template:(null==r?void 0:r.description)?r.description:""}}))),this.subscription.add(this.registerForm.get("newsletter").valueChanges.subscribe((function(){r.toggleAnonymousConsent()})))},e.prototype.submitForm=function(){this.registerForm.valid?this.registerUser():this.registerForm.markAllAsTouched()},e.prototype.registerUser=function(){var e=this;this.isLoading$.next(!0),this.userRegister.register(this.collectDataFromRegisterForm(this.registerForm.value)).subscribe({next:function(){return e.onRegisterUserSuccess()},complete:function(){return e.isLoading$.next(!1)}})},e.prototype.titleSelected=function(e){this.registerForm.controls.titleCode.setValue(e.code)},e.prototype.collectDataFromRegisterForm=function(e){var o=e.firstName,n=e.lastName,r=e.email,t=e.password,s=e.titleCode;return{firstName:o,lastName:n,uid:r.toLowerCase(),password:t,titleCode:s}},e.prototype.isConsentGiven=function(e){return this.anonymousConsentsService.isConsentGiven(e)},e.prototype.isConsentRequired=function(){var e,o,n,r,t=null===(o=null===(e=this.anonymousConsentsConfig)||void 0===e?void 0:e.anonymousConsents)||void 0===o?void 0:o.requiredConsents,s=null===(r=null===(n=this.anonymousConsentsConfig)||void 0===n?void 0:n.anonymousConsents)||void 0===r?void 0:r.registerConsent;return!(!t||!s)&&t.includes(s)},e.prototype.onRegisterUserSuccess=function(){this.authConfigService.getOAuthFlow()===t.OAuthFlow.ResourceOwnerPasswordFlow&&this.router.go("login"),this.globalMessageService.add({key:"register.postRegisterMessage"},t.GlobalMessageType.MSG_TYPE_CONFIRMATION)},e.prototype.toggleAnonymousConsent=function(){var e,o,n=null===(o=null===(e=this.anonymousConsentsConfig)||void 0===e?void 0:e.anonymousConsents)||void 0===o?void 0:o.registerConsent;n&&(Boolean(this.registerForm.get("newsletter").value)?this.anonymousConsentsService.giveConsent(n):this.anonymousConsentsService.withdrawConsent(n))},e.prototype.ngOnDestroy=function(){this.subscription.unsubscribe()},e}();b.decorators=[{type:n.Component,args:[{selector:"cx-register",template:'<section\n  class="cx-page-section container"\n  *ngIf="!(isLoading$ | async); else loading"\n>\n  <div class="row justify-content-center">\n    <div class="col-md-6">\n      <div class="cx-section">\n        <form (ngSubmit)="submitForm()" [formGroup]="registerForm">\n          <div class="form-group">\n            <label>\n              <span class="label-content">{{\n                \'register.title\' | cxTranslate\n              }}</span>\n              <select formControlName="titleCode" class="form-control">\n                <option selected value="" disabled>\n                  {{ \'register.selectTitle\' | cxTranslate }}\n                </option>\n                <option\n                  *ngFor="let title of titles$ | async"\n                  [value]="title.code"\n                >\n                  {{ title.name }}\n                </option>\n              </select>\n            </label>\n          </div>\n\n          <div class="form-group">\n            <label>\n              <span class="label-content">{{\n                \'register.firstName.label\' | cxTranslate\n              }}</span>\n              <input\n                class="form-control"\n                type="text"\n                name="firstname"\n                placeholder="{{\n                  \'register.firstName.placeholder\' | cxTranslate\n                }}"\n                formControlName="firstName"\n              />\n              <cx-form-errors\n                [control]="registerForm.get(\'firstName\')"\n              ></cx-form-errors>\n            </label>\n          </div>\n\n          <div class="form-group">\n            <label>\n              <span class="label-content">{{\n                \'register.lastName.label\' | cxTranslate\n              }}</span>\n              <input\n                class="form-control"\n                type="text"\n                name="lastname"\n                placeholder="{{\n                  \'register.lastName.placeholder\' | cxTranslate\n                }}"\n                formControlName="lastName"\n              />\n              <cx-form-errors\n                [control]="registerForm.get(\'lastName\')"\n              ></cx-form-errors>\n            </label>\n          </div>\n\n          <div class="form-group">\n            <label>\n              <span class="label-content">{{\n                \'register.emailAddress.label\' | cxTranslate\n              }}</span>\n              <input\n                class="form-control"\n                type="email"\n                name="email"\n                placeholder="{{\n                  \'register.emailAddress.placeholder\' | cxTranslate\n                }}"\n                formControlName="email"\n              />\n              <cx-form-errors\n                [control]="registerForm.get(\'email\')"\n              ></cx-form-errors>\n            </label>\n          </div>\n\n          <div class="form-group">\n            <label>\n              <span class="label-content">{{\n                \'register.password.label\' | cxTranslate\n              }}</span>\n              <input\n                class="form-control"\n                type="password"\n                name="password"\n                placeholder="{{\n                  \'register.password.placeholder\' | cxTranslate\n                }}"\n                formControlName="password"\n              />\n              <cx-form-errors\n                [control]="registerForm.get(\'password\')"\n              ></cx-form-errors>\n            </label>\n          </div>\n\n          <div class="form-group">\n            <label>\n              <span class="label-content">{{\n                \'register.confirmPassword.label\' | cxTranslate\n              }}</span>\n              <input\n                class="form-control"\n                type="password"\n                name="confirmpassword"\n                placeholder="{{\n                  \'register.confirmPassword.placeholder\' | cxTranslate\n                }}"\n                formControlName="passwordconf"\n              />\n              <cx-form-errors\n                [control]="registerForm.get(\'passwordconf\')"\n              ></cx-form-errors>\n            </label>\n          </div>\n\n          <div class="form-group">\n            <div class="form-check">\n              <label *ngIf="anonymousConsent$ | async as anonymousConsent">\n                <input\n                  type="checkbox"\n                  name="newsletter"\n                  class="form-check-input"\n                  formControlName="newsletter"\n                  [checked]="isConsentGiven(anonymousConsent.consent)"\n                />\n                <span class="form-check-label">\n                  {{ anonymousConsent.template }}\n                </span>\n              </label>\n            </div>\n          </div>\n\n          <div class="form-group">\n            <div class="form-check">\n              <label>\n                <input\n                  type="checkbox"\n                  name="termsandconditions"\n                  formControlName="termsandconditions"\n                />\n                <span class="form-check-label">\n                  {{ \'register.confirmThatRead\' | cxTranslate }}\n                  <a\n                    [routerLink]="{ cxRoute: \'termsAndConditions\' } | cxUrl"\n                    target="_blank"\n                  >\n                    {{ \'register.termsAndConditions\' | cxTranslate }}\n                  </a>\n                </span>\n                <cx-form-errors\n                  [control]="registerForm.get(\'termsandconditions\')"\n                ></cx-form-errors>\n              </label>\n            </div>\n          </div>\n          <button type="submit" class="btn btn-block btn-primary">\n            {{ \'register.register\' | cxTranslate }}\n          </button>\n          <a\n            class="cx-login-link btn-link"\n            [routerLink]="{ cxRoute: \'login\' } | cxUrl"\n            >{{ \'register.signIn\' | cxTranslate }}</a\n          >\n        </form>\n      </div>\n    </div>\n  </div>\n</section>\n\n<ng-template #loading>\n  <div class="cx-spinner"><cx-spinner></cx-spinner></div>\n</ng-template>\n'}]}],b.ctorParameters=function(){return[{type:l.UserRegisterFacade},{type:t.GlobalMessageService},{type:c.FormBuilder},{type:t.RoutingService},{type:t.AnonymousConsentsService},{type:t.AnonymousConsentsConfig},{type:t.AuthConfigService}]};var v=function(){};v.decorators=[{type:n.NgModule,args:[{imports:[o.CommonModule,c.ReactiveFormsModule,r.RouterModule,t.UrlModule,t.I18nModule,s.SpinnerModule,s.FormErrorsModule],providers:[t.provideDefaultConfig({cmsComponents:{RegisterCustomerComponent:{component:b,guards:[t.NotAuthGuard]}}})],declarations:[b]}]}];var y=function(){function e(e,o,n){var r=this;this.userPasswordService=e,this.routingService=o,this.globalMessage=n,this.busy$=new a.BehaviorSubject(!1),this.isUpdating$=this.busy$.pipe(i.tap((function(e){return!0===e?r.form.disable():r.form.enable()}))),this.resetToken$=this.routingService.getRouterState().pipe(i.map((function(e){return e.state.queryParams.token}))),this.form=new c.FormGroup({password:new c.FormControl("",[c.Validators.required,s.CustomFormValidators.passwordValidator]),passwordConfirm:new c.FormControl("",c.Validators.required)},{validators:s.CustomFormValidators.passwordsMustMatch("password","passwordConfirm")})}return e.prototype.resetPassword=function(e){var o=this;if(this.form.valid){this.busy$.next(!0);var n=this.form.get("password").value;this.userPasswordService.reset(e,n).subscribe({next:function(){return o.onSuccess()},error:function(e){return o.onError(e)}})}else this.form.markAllAsTouched()},e.prototype.onSuccess=function(){this.globalMessage.add({key:"forgottenPassword.passwordResetSuccess"},t.GlobalMessageType.MSG_TYPE_CONFIRMATION),this.busy$.next(!1),this.form.reset(),this.redirect()},e.prototype.onError=function(e){var o,n,r=this;this.busy$.next(!1),(null!==(n=null===(o=e)||void 0===o?void 0:o.details)&&void 0!==n?n:[]).forEach((function(e){e.message&&r.globalMessage.add({raw:e.message},t.GlobalMessageType.MSG_TYPE_ERROR)}))},e.prototype.redirect=function(){this.routingService.go({cxRoute:"login"})},e}();y.decorators=[{type:n.Injectable}],y.ctorParameters=function(){return[{type:l.UserPasswordFacade},{type:t.RoutingService},{type:t.GlobalMessageService}]};var C=function(){function e(e){this.service=e,this.form=this.service.form,this.isUpdating$=this.service.isUpdating$,this.token$=this.service.resetToken$}return e.prototype.onSubmit=function(e){this.service.resetPassword(e)},e}();C.decorators=[{type:n.Component,args:[{selector:"cx-reset-password",template:'<cx-spinner class="overlay" *ngIf="isUpdating$ | async"> </cx-spinner>\n\n<form\n  *ngIf="token$ | async as token"\n  (ngSubmit)="onSubmit(token)"\n  [formGroup]="form"\n>\n  <label>\n    <span class="label-content">{{\n      \'register.newPassword\' | cxTranslate\n    }}</span>\n    <input\n      class="form-control"\n      type="password"\n      placeholder="{{ \'register.password.placeholder\' | cxTranslate }}"\n      formControlName="password"\n    />\n    <cx-form-errors [control]="form.get(\'password\')"></cx-form-errors>\n  </label>\n\n  <label>\n    <span class="label-content">{{\n      \'register.passwordMinRequirements\' | cxTranslate\n    }}</span>\n    <input\n      class="form-control"\n      type="password"\n      placeholder="{{ \'register.confirmPassword.placeholder\' | cxTranslate }}"\n      formControlName="passwordConfirm"\n    />\n    <cx-form-errors [control]="form.get(\'passwordConfirm\')"></cx-form-errors>\n  </label>\n\n  <button class="btn btn-block btn-primary" [disabled]="form.disabled">\n    {{ \'register.resetPassword\' | cxTranslate }}\n  </button>\n</form>\n',changeDetection:n.ChangeDetectionStrategy.OnPush,host:{class:"user-form"}}]}],C.ctorParameters=function(){return[{type:y}]};var w=function(){};w.decorators=[{type:n.NgModule,args:[{imports:[o.CommonModule,c.FormsModule,c.ReactiveFormsModule,r.RouterModule,t.I18nModule,s.FormErrorsModule,s.SpinnerModule],providers:[t.provideDefaultConfig({cmsComponents:{ResetPasswordComponent:{component:C,guards:[t.NotAuthGuard],providers:[{provide:y,useClass:y,deps:[l.UserPasswordFacade,t.RoutingService,t.GlobalMessageService]}]}}})],declarations:[C]}]}];var x=function(){function e(e,o,n,r){var t=this;this.userEmail=e,this.routingService=o,this.globalMessageService=n,this.authService=r,this.busy$=new a.BehaviorSubject(!1),this.isUpdating$=this.busy$.pipe(i.tap((function(e){return!0===e?t.form.disable():t.form.enable()}))),this.form=new c.FormGroup({email:new c.FormControl("",[c.Validators.required,s.CustomFormValidators.emailValidator]),confirmEmail:new c.FormControl("",[c.Validators.required]),password:new c.FormControl("",[c.Validators.required])},{validators:s.CustomFormValidators.emailsMustMatch("email","confirmEmail")})}return e.prototype.save=function(){var e,o,n=this;if(this.form.valid){this.busy$.next(!0);var r=null===(e=this.form.get("confirmEmail"))||void 0===e?void 0:e.value,t=null===(o=this.form.get("password"))||void 0===o?void 0:o.value;this.userEmail.update(t,r).subscribe({next:function(){return n.onSuccess(r)},error:function(e){return n.onError(e)}})}else this.form.markAllAsTouched()},e.prototype.onSuccess=function(e){var o=this;this.globalMessageService.add({key:"updateEmailForm.emailUpdateSuccess",params:{newUid:e}},t.GlobalMessageType.MSG_TYPE_CONFIRMATION),this.busy$.next(!1),this.form.reset(),this.authService.coreLogout().then((function(){o.routingService.go({cxRoute:"login"},void 0,{state:{newUid:e}})}))},e.prototype.onError=function(e){this.busy$.next(!1)},e}();x.decorators=[{type:n.Injectable}],x.ctorParameters=function(){return[{type:l.UserEmailFacade},{type:t.RoutingService},{type:t.GlobalMessageService},{type:t.AuthService}]};var S=function(){function e(e){this.service=e,this.form=this.service.form,this.isUpdating$=this.service.isUpdating$}return e.prototype.onSubmit=function(){this.service.save()},e}();S.decorators=[{type:n.Component,args:[{selector:"cx-update-email",template:'<cx-spinner class="overlay" *ngIf="isUpdating$ | async"> </cx-spinner>\n\n<form (ngSubmit)="onSubmit()" [formGroup]="form">\n  <label>\n    <span class="label-content">{{\n      \'updateEmailForm.newEmailAddress.label\' | cxTranslate\n    }}</span>\n    <input\n      type="email"\n      name="email"\n      formControlName="email"\n      placeholder="{{\n        \'updateEmailForm.newEmailAddress.placeholder\' | cxTranslate\n      }}"\n      class="form-control"\n    />\n    <cx-form-errors [control]="form.get(\'email\')"></cx-form-errors>\n  </label>\n\n  <label>\n    <span class="label-content">{{\n      \'updateEmailForm.confirmNewEmailAddress.label\' | cxTranslate\n    }}</span>\n    <input\n      type="email"\n      name="confirmEmail"\n      formControlName="confirmEmail"\n      placeholder="{{\n        \'updateEmailForm.confirmNewEmailAddress.placeholder\' | cxTranslate\n      }}"\n      class="form-control"\n    />\n    <cx-form-errors [control]="form.get(\'confirmEmail\')"></cx-form-errors>\n  </label>\n\n  <label>\n    <span class="label-content">{{\n      \'updateEmailForm.password.label\' | cxTranslate\n    }}</span>\n    <input\n      type="password"\n      name="password"\n      formControlName="password"\n      placeholder="{{ \'updateEmailForm.password.placeholder\' | cxTranslate }}"\n      class="form-control"\n      autocomplete="new-password"\n    />\n    <cx-form-errors [control]="form.get(\'password\')"></cx-form-errors>\n  </label>\n\n  <a\n    class="btn btn-block btn-secondary"\n    [routerLink]="{ cxRoute: \'home\' } | cxUrl"\n  >\n    {{ \'common.cancel\' | cxTranslate }}\n  </a>\n\n  <button class="btn btn-block btn-primary" [disabled]="form.disabled">\n    {{ \'common.save\' | cxTranslate }}\n  </button>\n</form>\n',changeDetection:n.ChangeDetectionStrategy.OnPush,host:{class:"user-form"}}]}],S.ctorParameters=function(){return[{type:x}]};var M=function(){};M.decorators=[{type:n.NgModule,args:[{imports:[o.CommonModule,c.FormsModule,c.ReactiveFormsModule,s.SpinnerModule,t.UrlModule,r.RouterModule,t.I18nModule,s.FormErrorsModule],providers:[t.provideDefaultConfig({cmsComponents:{UpdateEmailComponent:{component:S,guards:[t.AuthGuard],providers:[{provide:x,useClass:x,deps:[l.UserEmailFacade,t.RoutingService,t.GlobalMessageService,t.AuthService]}]}}})],declarations:[S]}]}];var P=function(){function e(e,o,n){var r=this;this.userPasswordService=e,this.routingService=o,this.globalMessageService=n,this.busy$=new a.BehaviorSubject(!1),this.isUpdating$=this.busy$.pipe(i.tap((function(e){return!0===e?r.form.disable():r.form.enable()}))),this.form=new c.FormGroup({oldPassword:new c.FormControl("",c.Validators.required),newPassword:new c.FormControl("",[c.Validators.required,s.CustomFormValidators.passwordValidator]),newPasswordConfirm:new c.FormControl("",c.Validators.required)},{validators:s.CustomFormValidators.passwordsMustMatch("newPassword","newPasswordConfirm")})}return e.prototype.updatePassword=function(){var e,o,n=this;if(this.form.valid){this.busy$.next(!0);var r=null===(e=this.form.get("oldPassword"))||void 0===e?void 0:e.value,t=null===(o=this.form.get("newPassword"))||void 0===o?void 0:o.value;this.userPasswordService.update(r,t).subscribe({next:function(){return n.onSuccess()},error:function(e){return n.onError(e)}})}else this.form.markAllAsTouched()},e.prototype.onSuccess=function(){this.globalMessageService.add({key:"updatePasswordForm.passwordUpdateSuccess"},t.GlobalMessageType.MSG_TYPE_CONFIRMATION),this.busy$.next(!1),this.form.reset(),this.routingService.go({cxRoute:"home"})},e.prototype.onError=function(e){this.busy$.next(!1),this.form.reset()},e}();P.decorators=[{type:n.Injectable}],P.ctorParameters=function(){return[{type:l.UserPasswordFacade},{type:t.RoutingService},{type:t.GlobalMessageService}]};var F=function(){function e(e){this.service=e,this.form=this.service.form,this.isUpdating$=this.service.isUpdating$}return e.prototype.onSubmit=function(){this.service.updatePassword()},e}();F.decorators=[{type:n.Component,args:[{selector:"cx-update-password",template:'<cx-spinner class="overlay" *ngIf="isUpdating$ | async"> </cx-spinner>\n\n<form (ngSubmit)="onSubmit()" [formGroup]="form">\n  <label>\n    <span class="label-content">{{\n      \'updatePasswordForm.oldPassword.label\' | cxTranslate\n    }}</span>\n    <input\n      class="form-control"\n      type="password"\n      name="oldPassword"\n      placeholder="{{\n        \'updatePasswordForm.oldPassword.placeholder\' | cxTranslate\n      }}"\n      formControlName="oldPassword"\n    />\n    <cx-form-errors [control]="form.get(\'oldPassword\')"></cx-form-errors>\n  </label>\n\n  <label>\n    <span class="label-content">{{\n      \'updatePasswordForm.newPassword.label\' | cxTranslate\n    }}</span>\n    <input\n      class="form-control"\n      type="password"\n      name="newPassword"\n      placeholder="{{\n        \'updatePasswordForm.newPassword.placeholder\' | cxTranslate\n      }}"\n      formControlName="newPassword"\n    />\n    <cx-form-errors [control]="form.get(\'newPassword\')"></cx-form-errors>\n  </label>\n\n  <label>\n    <span class="label-content">{{\n      \'updatePasswordForm.confirmPassword.label\' | cxTranslate\n    }}</span>\n    <input\n      class="form-control"\n      type="password"\n      name="newPasswordConfirm"\n      placeholder="{{\n        \'updatePasswordForm.confirmPassword.placeholder\' | cxTranslate\n      }}"\n      formControlName="newPasswordConfirm"\n    />\n    <cx-form-errors [control]="form.get(\'newPasswordConfirm\')"></cx-form-errors>\n  </label>\n\n  <a\n    class="btn btn-block btn-secondary"\n    [routerLink]="{ cxRoute: \'home\' } | cxUrl"\n  >\n    {{ \'common.cancel\' | cxTranslate }}\n  </a>\n\n  <button class="btn btn-block btn-primary" [disabled]="form.disabled">\n    {{ \'common.save\' | cxTranslate }}\n  </button>\n</form>\n',changeDetection:n.ChangeDetectionStrategy.OnPush,host:{class:"user-form"}}]}],F.ctorParameters=function(){return[{type:P}]};var T=function(){};T.decorators=[{type:n.NgModule,args:[{imports:[o.CommonModule,c.FormsModule,c.ReactiveFormsModule,s.SpinnerModule,t.I18nModule,s.FormErrorsModule,t.UrlModule,r.RouterModule],providers:[t.provideDefaultConfig({cmsComponents:{UpdatePasswordComponent:{component:F,guards:[t.AuthGuard],providers:[{provide:P,useClass:P,deps:[l.UserPasswordFacade,t.RoutingService,t.GlobalMessageService]}]}}})],declarations:[F]}]}];var R=function(){function e(e,o){var n=this;this.userProfile=e,this.globalMessageService=o,this.user$=this.userProfile.get().pipe(i.filter((function(e){return Boolean(e)}))),this.busy$=new a.BehaviorSubject(!1),this.isUpdating$=this.user$.pipe(i.tap((function(e){return n.form.patchValue(e)})),i.switchMap((function(e){return n.busy$})),i.tap((function(e){return!0===e?n.form.disable():n.form.enable()}))),this.titles$=this.userProfile.getTitles(),this.form=new c.FormGroup({customerId:new c.FormControl(""),titleCode:new c.FormControl(""),firstName:new c.FormControl("",c.Validators.required),lastName:new c.FormControl("",c.Validators.required)})}return e.prototype.updateProfile=function(){var e=this;this.form.valid?(this.busy$.next(!0),this.userProfile.update(this.form.value).subscribe({next:function(){return e.onSuccess()},error:function(o){return e.onError(o)}})):this.form.markAllAsTouched()},e.prototype.onSuccess=function(){this.globalMessageService.add({key:"updateProfileForm.profileUpdateSuccess"},t.GlobalMessageType.MSG_TYPE_CONFIRMATION),this.busy$.next(!1),this.form.reset()},e.prototype.onError=function(e){this.busy$.next(!1)},e}();R.decorators=[{type:n.Injectable}],R.ctorParameters=function(){return[{type:l.UserProfileFacade},{type:t.GlobalMessageService}]};var N=function(){function e(e){this.service=e,this.form=this.service.form,this.isUpdating$=this.service.isUpdating$,this.titles$=this.service.titles$}return e.prototype.onSubmit=function(){this.service.updateProfile()},e}();N.decorators=[{type:n.Component,args:[{selector:"cx-update-profile",template:'<cx-spinner class="overlay" *ngIf="isUpdating$ | async"> </cx-spinner>\n\n<form (ngSubmit)="onSubmit()" [formGroup]="form">\n  <label>\n    <span class="label-content">{{\n      \'updateProfileForm.title\' | cxTranslate\n    }}</span>\n    <select formControlName="titleCode" class="form-control">\n      <option value="">{{ \'updateProfileForm.none\' | cxTranslate }}</option>\n      <option *ngFor="let title of titles$ | async" [value]="title.code">\n        {{ title.name }}\n      </option>\n    </select>\n  </label>\n  <label>\n    <span class="label-content">{{\n      \'updateProfileForm.firstName.label\' | cxTranslate\n    }}</span>\n    <input\n      type="text"\n      class="form-control"\n      name="firstName"\n      placeholder="{{\n        \'updateProfileForm.firstName.placeholder\' | cxTranslate\n      }}"\n      formControlName="firstName"\n    />\n    <cx-form-errors [control]="form.get(\'firstName\')"></cx-form-errors>\n  </label>\n\n  <label>\n    <span class="label-content">{{\n      \'updateProfileForm.lastName.label\' | cxTranslate\n    }}</span>\n    <input\n      type="text"\n      class="form-control"\n      name="lastName"\n      placeholder="{{ \'updateProfileForm.lastName.placeholder\' | cxTranslate }}"\n      formControlName="lastName"\n    />\n    <cx-form-errors [control]="form.get(\'lastName\')"></cx-form-errors>\n  </label>\n\n  <label>\n    <span class="label-content">{{\n      \'updateProfileForm.customerId\' | cxTranslate\n    }}</span>\n    <input\n      type="text"\n      class="form-control"\n      name="customerId"\n      formControlName="customerId"\n      readonly\n    />\n    <cx-form-errors [control]="form.get(\'lastName\')"></cx-form-errors>\n  </label>\n\n  <a\n    class="btn btn-block btn-secondary"\n    [routerLink]="{ cxRoute: \'home\' } | cxUrl"\n  >\n    {{ \'common.cancel\' | cxTranslate }}\n  </a>\n\n  <button class="btn btn-block btn-primary" [disabled]="form.disabled">\n    {{ \'common.save\' | cxTranslate }}\n  </button>\n</form>\n',changeDetection:n.ChangeDetectionStrategy.OnPush,host:{class:"user-form"}}]}],N.ctorParameters=function(){return[{type:R}]};var E=function(){};E.decorators=[{type:n.NgModule,args:[{imports:[o.CommonModule,c.FormsModule,c.ReactiveFormsModule,s.SpinnerModule,t.I18nModule,s.FormErrorsModule,r.RouterModule,t.UrlModule],providers:[t.provideDefaultConfig({cmsComponents:{UpdateProfileComponent:{component:N,guards:[t.AuthGuard],providers:[{provide:R,useClass:R,deps:[l.UserProfileFacade,t.GlobalMessageService]}]}}})],declarations:[N]}]}];var $=function(){};$.decorators=[{type:n.NgModule,args:[{imports:[v,E,M,T,g,w,m]}]}],e.CloseAccountComponent=d,e.CloseAccountModalComponent=u,e.CloseAccountModule=m,e.ForgotPasswordComponent=f,e.ForgotPasswordComponentService=p,e.ForgotPasswordModule=g,e.RegisterComponent=b,e.RegisterComponentModule=v,e.ResetPasswordComponent=C,e.ResetPasswordComponentService=y,e.ResetPasswordModule=w,e.UpdateEmailComponent=S,e.UpdateEmailComponentService=x,e.UpdateEmailModule=M,e.UpdatePasswordComponent=F,e.UpdatePasswordComponentService=P,e.UpdatePasswordModule=T,e.UpdateProfileComponent=N,e.UpdateProfileComponentService=R,e.UpdateProfileModule=E,e.UserProfileComponentsModule=$,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=spartacus-user-profile-components.umd.min.js.map