{"version":3,"sources":["../../../feature-libs/user/profile/occ/adapters/config/default-occ-user-profile-endpoint.config.ts","../../../feature-libs/user/profile/occ/adapters/occ-user-profile.adapter.ts","../../../feature-libs/user/profile/occ/user-profile-occ.module.ts"],"names":["defaultOccUserProfileConfig","backend","occ","endpoints","userRegister","userForgotPassword","userResetPassword","userUpdateLoginId","userUpdatePassword","titles","OccUserProfileAdapter","http","occEndpoints","converter","this","prototype","update","userId","user","endpoint","isConfigured","url","getUrl","convert","USER_PROFILE_SERIALIZER","patch","pipe","catchError","error","throwError","normalizeHttpError","register","headers","HttpHeaders","Content-Type","InterceptorUtil","createHeader","USE_CLIENT_TOKEN","USER_SIGN_UP_SERIALIZER","post","pipeable","USER_PROFILE_NORMALIZER","registerGuest","guid","password","httpParams","HttpParams","set","requestForgotPasswordEmail","userEmailAddress","resetPassword","token","newPassword","updateEmail","currentPassword","newUserId","put","updatePassword","oldPassword","close","delete","loadTitles","get","map","titleList","_a","pipeableMany","TITLE_NORMALIZER","Injectable","HttpClient","OccEndpointsService","ConverterService","NgModule","args","providers","provideDefaultConfig","provide","UserProfileAdapter","useClass"],"mappings":"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","sourcesContent":["import { OccConfig } from '@spartacus/core';\n\nexport const defaultOccUserProfileConfig: OccConfig = {\n  backend: {\n    occ: {\n      endpoints: {\n        userRegister: 'users',\n        userForgotPassword: 'forgottenpasswordtokens',\n        userResetPassword: 'resetpassword',\n        userUpdateLoginId: 'users/${userId}/login',\n        userUpdatePassword: 'users/${userId}/password',\n        titles: 'titles',\n      },\n    },\n  },\n};\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {\n  ConverterService,\n  InterceptorUtil,\n  normalizeHttpError,\n  Occ,\n  OccEndpointsService,\n  USE_CLIENT_TOKEN,\n} from '@spartacus/core';\nimport { User } from '@spartacus/user/account/root';\nimport {\n  TITLE_NORMALIZER,\n  UserProfileAdapter,\n  USER_PROFILE_NORMALIZER,\n  USER_PROFILE_SERIALIZER,\n  USER_SIGN_UP_SERIALIZER,\n} from '@spartacus/user/profile/core';\nimport { Title, UserSignUp } from '@spartacus/user/profile/root';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\n@Injectable()\nexport class OccUserProfileAdapter implements UserProfileAdapter {\n  constructor(\n    protected http: HttpClient,\n    protected occEndpoints: OccEndpointsService,\n    protected converter: ConverterService\n  ) {}\n\n  update(userId: string, user: User): Observable<unknown> {\n    const endpoint = this.occEndpoints.isConfigured('userUpdateProfile')\n      ? 'userUpdateProfile'\n      : 'user';\n    const url = this.occEndpoints.getUrl(endpoint, { userId });\n    user = this.converter.convert(user, USER_PROFILE_SERIALIZER);\n    return this.http\n      .patch(url, user)\n      .pipe(catchError((error) => throwError(normalizeHttpError(error))));\n  }\n\n  register(user: UserSignUp): Observable<User> {\n    const url: string = this.occEndpoints.getUrl('userRegister');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    user = this.converter.convert(user, USER_SIGN_UP_SERIALIZER);\n\n    return this.http\n      .post<User>(url, user, { headers })\n      .pipe(\n        catchError((error) => throwError(normalizeHttpError(error))),\n        this.converter.pipeable(USER_PROFILE_NORMALIZER)\n      );\n  }\n\n  registerGuest(guid: string, password: string): Observable<User> {\n    const url: string = this.occEndpoints.getUrl('userRegister');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    const httpParams: HttpParams = new HttpParams()\n      .set('guid', guid)\n      .set('password', password);\n\n    return this.http\n      .post<User>(url, httpParams, { headers })\n      .pipe(\n        catchError((error) => throwError(normalizeHttpError(error))),\n        this.converter.pipeable(USER_PROFILE_NORMALIZER)\n      );\n  }\n\n  requestForgotPasswordEmail(userEmailAddress: string): Observable<unknown> {\n    const url = this.occEndpoints.getUrl('userForgotPassword');\n    const httpParams: HttpParams = new HttpParams().set(\n      'userId',\n      userEmailAddress\n    );\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n    return this.http\n      .post(url, httpParams, { headers })\n      .pipe(catchError((error) => throwError(normalizeHttpError(error))));\n  }\n\n  resetPassword(token: string, newPassword: string): Observable<unknown> {\n    const url = this.occEndpoints.getUrl('userResetPassword');\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n    headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n\n    return this.http\n      .post(url, { token, newPassword }, { headers })\n      .pipe(catchError((error) => throwError(normalizeHttpError(error))));\n  }\n\n  updateEmail(\n    userId: string,\n    currentPassword: string,\n    newUserId: string\n  ): Observable<unknown> {\n    const url = this.occEndpoints.getUrl('userUpdateLoginId', { userId });\n    const httpParams: HttpParams = new HttpParams()\n      .set('password', currentPassword)\n      .set('newLogin', newUserId);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http\n      .put(url, httpParams, { headers })\n      .pipe(catchError((error) => throwError(normalizeHttpError(error))));\n  }\n\n  updatePassword(\n    userId: string,\n    oldPassword: string,\n    newPassword: string\n  ): Observable<unknown> {\n    const url = this.occEndpoints.getUrl('userUpdatePassword', { userId });\n    const httpParams: HttpParams = new HttpParams()\n      .set('old', oldPassword)\n      .set('new', newPassword);\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n    });\n    return this.http\n      .put(url, httpParams, { headers })\n      .pipe(catchError((error) => throwError(normalizeHttpError(error))));\n  }\n\n  close(userId: string): Observable<unknown> {\n    const endpoint = this.occEndpoints.isConfigured('userCloseAccount')\n      ? 'userCloseAccount'\n      : 'user';\n    const url = this.occEndpoints.getUrl(endpoint, { userId });\n    return this.http\n      .delete<User>(url)\n      .pipe(catchError((error) => throwError(normalizeHttpError(error))));\n  }\n\n  loadTitles(): Observable<Title[]> {\n    const url = this.occEndpoints.getUrl('titles');\n    return this.http.get<Occ.TitleList>(url).pipe(\n      catchError((error) => throwError(normalizeHttpError(error))),\n      map((titleList) => titleList.titles ?? []),\n      this.converter.pipeableMany(TITLE_NORMALIZER)\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '@spartacus/core';\nimport { UserProfileAdapter } from '@spartacus/user/profile/core';\nimport { defaultOccUserProfileConfig } from './adapters/config/default-occ-user-profile-endpoint.config';\nimport { OccUserProfileAdapter } from './adapters/occ-user-profile.adapter';\n\n@NgModule({\n  providers: [\n    provideDefaultConfig(defaultOccUserProfileConfig),\n    { provide: UserProfileAdapter, useClass: OccUserProfileAdapter },\n  ],\n})\nexport class UserProfileOccModule {}\n"]}