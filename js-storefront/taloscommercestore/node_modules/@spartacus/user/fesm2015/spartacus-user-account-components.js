import { Injectable, Component, ChangeDetectionStrategy, HostBinding, NgModule } from '@angular/core';
import { FormGroup, FormControl, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { GlobalMessageType, AuthService, GlobalMessageService, WindowRef, UrlModule, I18nModule, provideDefaultConfig, NotAuthGuard } from '@spartacus/core';
import { CustomFormValidators, FormErrorsModule, SpinnerModule, CheckoutConfigService, PageSlotModule } from '@spartacus/storefront';
import { BehaviorSubject, from, of } from 'rxjs';
import { tap, withLatestFrom, switchMap } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { RouterModule, ActivatedRoute } from '@angular/router';
import { UserAccountFacade } from '@spartacus/user/account/root';

class LoginFormComponentService {
    constructor(auth, globalMessage, winRef) {
        this.auth = auth;
        this.globalMessage = globalMessage;
        this.winRef = winRef;
        this.busy$ = new BehaviorSubject(false);
        this.isUpdating$ = this.busy$.pipe(tap((state) => {
            var _a, _b, _c;
            const userId = (_c = (_b = (_a = this.winRef.nativeWindow) === null || _a === void 0 ? void 0 : _a.history) === null || _b === void 0 ? void 0 : _b.state) === null || _c === void 0 ? void 0 : _c['newUid'];
            if (userId) {
                this.form.patchValue({ userId });
            }
            state === true ? this.form.disable() : this.form.enable();
        }));
        this.form = new FormGroup({
            userId: new FormControl('', [
                Validators.required,
                CustomFormValidators.emailValidator,
            ]),
            password: new FormControl('', Validators.required),
        });
    }
    login() {
        if (!this.form.valid) {
            this.form.markAllAsTouched();
            return;
        }
        this.busy$.next(true);
        from(this.auth.loginWithCredentials(
        // TODO: consider dropping toLowerCase as this should not be part of the UI,
        // as it's too opinionated and doesn't work with other AUTH services
        this.form.value.userId.toLowerCase(), this.form.value.password))
            .pipe(withLatestFrom(this.auth.isUserLoggedIn()), tap(([_, isLoggedIn]) => this.onSuccess(isLoggedIn)))
            .subscribe();
    }
    onSuccess(isLoggedIn) {
        if (isLoggedIn) {
            // We want to remove error messages on successful login (primary the bad
            // username/password combination)
            this.globalMessage.remove(GlobalMessageType.MSG_TYPE_ERROR);
            this.form.reset();
        }
        this.busy$.next(false);
    }
}
LoginFormComponentService.decorators = [
    { type: Injectable }
];
LoginFormComponentService.ctorParameters = () => [
    { type: AuthService },
    { type: GlobalMessageService },
    { type: WindowRef }
];

class LoginFormComponent {
    constructor(service) {
        this.service = service;
        this.form = this.service.form;
        this.isUpdating$ = this.service.isUpdating$;
        this.style = true;
    }
    onSubmit() {
        this.service.login();
    }
}
LoginFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'cx-login-form',
                template: "<cx-spinner class=\"overlay\" *ngIf=\"isUpdating$ | async\"> </cx-spinner>\n\n<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\n  <label>\n    <span class=\"label-content\">{{\n      'loginForm.emailAddress.label' | cxTranslate\n    }}</span>\n    <input\n      type=\"email\"\n      class=\"form-control\"\n      formControlName=\"userId\"\n      placeholder=\"{{ 'loginForm.emailAddress.placeholder' | cxTranslate }}\"\n    />\n    <cx-form-errors [control]=\"form.get('userId')\"></cx-form-errors>\n  </label>\n\n  <label>\n    <span class=\"label-content\">{{\n      'loginForm.password.label' | cxTranslate\n    }}</span>\n    <input\n      type=\"password\"\n      class=\"form-control\"\n      placeholder=\"{{ 'loginForm.password.placeholder' | cxTranslate }}\"\n      formControlName=\"password\"\n    />\n    <cx-form-errors [control]=\"form.get('password')\"></cx-form-errors>\n  </label>\n\n  <a\n    [routerLink]=\"{ cxRoute: 'forgotPassword' } | cxUrl\"\n    aria-controls=\"reset-password\"\n    class=\"btn-link\"\n    >{{ 'loginForm.forgotPassword' | cxTranslate }}</a\n  >\n\n  <button\n    type=\"submit\"\n    class=\"btn btn-block btn-primary\"\n    [disabled]=\"form.disabled\"\n  >\n    {{ 'loginForm.signIn' | cxTranslate }}\n  </button>\n</form>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
LoginFormComponent.ctorParameters = () => [
    { type: LoginFormComponentService }
];
LoginFormComponent.propDecorators = {
    style: [{ type: HostBinding, args: ['class.user-form',] }]
};

class LoginFormModule {
}
LoginFormModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    RouterModule,
                    UrlModule,
                    I18nModule,
                    FormErrorsModule,
                    SpinnerModule,
                ],
                providers: [
                    provideDefaultConfig({
                        cmsComponents: {
                            ReturningCustomerLoginComponent: {
                                component: LoginFormComponent,
                                guards: [NotAuthGuard],
                                providers: [
                                    {
                                        provide: LoginFormComponentService,
                                        useClass: LoginFormComponentService,
                                        deps: [AuthService, GlobalMessageService, WindowRef],
                                    },
                                ],
                            },
                        },
                    }),
                ],
                declarations: [LoginFormComponent],
            },] }
];

class LoginRegisterComponent {
    constructor(checkoutConfigService, activatedRoute) {
        this.checkoutConfigService = checkoutConfigService;
        this.activatedRoute = activatedRoute;
        this.loginAsGuest = false;
    }
    ngOnInit() {
        // TODO: consider using events or inputs to avoid depending on checkout library
        if (this.checkoutConfigService.isGuestCheckout()) {
            this.loginAsGuest = this.activatedRoute.snapshot.queryParams['forced'];
        }
    }
}
LoginRegisterComponent.decorators = [
    { type: Component, args: [{
                selector: 'cx-login-register',
                template: "<div class=\"register\">\n  <p class=\"cx-section-title\">\n    {{ 'loginForm.dontHaveAccount' | cxTranslate }}\n  </p>\n\n  <ng-container *ngIf=\"!loginAsGuest\">\n    <a\n      [routerLink]=\"{ cxRoute: 'register' } | cxUrl\"\n      class=\"btn btn-block btn-secondary btn-register\"\n      >{{ 'loginForm.register' | cxTranslate }}</a\n    >\n  </ng-container>\n\n  <ng-container *ngIf=\"loginAsGuest\">\n    <a\n      [routerLink]=\"{ cxRoute: 'checkoutLogin' } | cxUrl\"\n      class=\"btn btn-block btn-secondary btn-guest\"\n      >{{ 'loginForm.guestCheckout' | cxTranslate }}</a\n    >\n  </ng-container>\n</div>\n"
            },] }
];
LoginRegisterComponent.ctorParameters = () => [
    { type: CheckoutConfigService },
    { type: ActivatedRoute }
];

class LoginRegisterModule {
}
LoginRegisterModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, RouterModule, UrlModule, PageSlotModule, I18nModule],
                providers: [
                    provideDefaultConfig({
                        cmsComponents: {
                            ReturningCustomerRegisterComponent: {
                                component: LoginRegisterComponent,
                                guards: [NotAuthGuard],
                            },
                        },
                    }),
                ],
                declarations: [LoginRegisterComponent],
            },] }
];

class LoginComponent {
    constructor(auth, userAccount) {
        this.auth = auth;
        this.userAccount = userAccount;
    }
    ngOnInit() {
        this.user$ = this.auth.isUserLoggedIn().pipe(switchMap((isUserLoggedIn) => {
            if (isUserLoggedIn) {
                return this.userAccount.get();
            }
            else {
                return of(undefined);
            }
        }));
    }
}
LoginComponent.decorators = [
    { type: Component, args: [{
                selector: 'cx-login',
                template: "<ng-container *ngIf=\"user$ | async as user; else login\">\n  <div class=\"cx-login-greet\">\n    {{ 'miniLogin.userGreeting' | cxTranslate: { name: user.name } }}\n  </div>\n  <cx-page-slot position=\"HeaderLinks\"></cx-page-slot>\n</ng-container>\n\n<ng-template #login>\n  <a role=\"link\" [routerLink]=\"{ cxRoute: 'login' } | cxUrl\">{{\n    'miniLogin.signInRegister' | cxTranslate\n  }}</a>\n</ng-template>\n"
            },] }
];
LoginComponent.ctorParameters = () => [
    { type: AuthService },
    { type: UserAccountFacade }
];

class LoginModule {
}
LoginModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, RouterModule, UrlModule, PageSlotModule, I18nModule],
                providers: [
                    provideDefaultConfig({
                        cmsComponents: {
                            LoginComponent: {
                                component: LoginComponent,
                            },
                        },
                    }),
                ],
                declarations: [LoginComponent],
            },] }
];

class UserAccountComponentsModule {
}
UserAccountComponentsModule.decorators = [
    { type: NgModule, args: [{
                imports: [LoginModule, LoginFormModule, LoginRegisterModule],
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { LoginComponent, LoginFormComponent, LoginFormComponentService, LoginFormModule, LoginModule, LoginRegisterComponent, LoginRegisterModule, UserAccountComponentsModule };
//# sourceMappingURL=spartacus-user-account-components.js.map
