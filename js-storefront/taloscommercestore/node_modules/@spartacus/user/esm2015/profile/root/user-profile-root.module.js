import { NgModule } from '@angular/core';
import { provideDefaultConfigFactory, UserProfileFacadeTransitionalToken, UserRegisterFacadeTransitionalToken, } from '@spartacus/core';
import { UserProfileFacade } from './facade/user-profile.facade';
import { UserRegisterFacade } from './facade/user-register.facade';
import { USER_PROFILE_CORE_FEATURE, USER_PROFILE_FEATURE, } from './feature-name';
// TODO: Inline this factory when we start releasing Ivy compiled libraries
export function defaultUserProfileComponentsConfig() {
    const config = {
        featureModules: {
            [USER_PROFILE_FEATURE]: {
                cmsComponents: [
                    'RegisterCustomerComponent',
                    'UpdateProfileComponent',
                    'UpdateEmailComponent',
                    'UpdatePasswordComponent',
                    'ForgotPasswordComponent',
                    'ResetPasswordComponent',
                    'CloseAccountComponent',
                ],
            },
            // by default core is bundled together with components
            [USER_PROFILE_CORE_FEATURE]: USER_PROFILE_FEATURE,
        },
    };
    return config;
}
export class UserProfileRootModule {
}
UserProfileRootModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    provideDefaultConfigFactory(defaultUserProfileComponentsConfig),
                    {
                        provide: UserProfileFacadeTransitionalToken,
                        useExisting: UserProfileFacade,
                    },
                    {
                        provide: UserRegisterFacadeTransitionalToken,
                        useExisting: UserRegisterFacade,
                    },
                ],
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1wcm9maWxlLXJvb3QubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9mZWF0dXJlLWxpYnMvdXNlci9wcm9maWxlL3Jvb3QvIiwic291cmNlcyI6WyJ1c2VyLXByb2ZpbGUtcm9vdC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBRUwsMkJBQTJCLEVBQzNCLGtDQUFrQyxFQUNsQyxtQ0FBbUMsR0FDcEMsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNuRSxPQUFPLEVBQ0wseUJBQXlCLEVBQ3pCLG9CQUFvQixHQUNyQixNQUFNLGdCQUFnQixDQUFDO0FBRXhCLDJFQUEyRTtBQUMzRSxNQUFNLFVBQVUsa0NBQWtDO0lBQ2hELE1BQU0sTUFBTSxHQUFjO1FBQ3hCLGNBQWMsRUFBRTtZQUNkLENBQUMsb0JBQW9CLENBQUMsRUFBRTtnQkFDdEIsYUFBYSxFQUFFO29CQUNiLDJCQUEyQjtvQkFDM0Isd0JBQXdCO29CQUN4QixzQkFBc0I7b0JBQ3RCLHlCQUF5QjtvQkFDekIseUJBQXlCO29CQUN6Qix3QkFBd0I7b0JBQ3hCLHVCQUF1QjtpQkFDeEI7YUFDRjtZQUNELHNEQUFzRDtZQUN0RCxDQUFDLHlCQUF5QixDQUFDLEVBQUUsb0JBQW9CO1NBQ2xEO0tBQ0YsQ0FBQztJQUNGLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFlRCxNQUFNLE9BQU8scUJBQXFCOzs7WUFiakMsUUFBUSxTQUFDO2dCQUNSLFNBQVMsRUFBRTtvQkFDVCwyQkFBMkIsQ0FBQyxrQ0FBa0MsQ0FBQztvQkFDL0Q7d0JBQ0UsT0FBTyxFQUFFLGtDQUFrQzt3QkFDM0MsV0FBVyxFQUFFLGlCQUFpQjtxQkFDL0I7b0JBQ0Q7d0JBQ0UsT0FBTyxFQUFFLG1DQUFtQzt3QkFDNUMsV0FBVyxFQUFFLGtCQUFrQjtxQkFDaEM7aUJBQ0Y7YUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBDbXNDb25maWcsXG4gIHByb3ZpZGVEZWZhdWx0Q29uZmlnRmFjdG9yeSxcbiAgVXNlclByb2ZpbGVGYWNhZGVUcmFuc2l0aW9uYWxUb2tlbixcbiAgVXNlclJlZ2lzdGVyRmFjYWRlVHJhbnNpdGlvbmFsVG9rZW4sXG59IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBVc2VyUHJvZmlsZUZhY2FkZSB9IGZyb20gJy4vZmFjYWRlL3VzZXItcHJvZmlsZS5mYWNhZGUnO1xuaW1wb3J0IHsgVXNlclJlZ2lzdGVyRmFjYWRlIH0gZnJvbSAnLi9mYWNhZGUvdXNlci1yZWdpc3Rlci5mYWNhZGUnO1xuaW1wb3J0IHtcbiAgVVNFUl9QUk9GSUxFX0NPUkVfRkVBVFVSRSxcbiAgVVNFUl9QUk9GSUxFX0ZFQVRVUkUsXG59IGZyb20gJy4vZmVhdHVyZS1uYW1lJztcblxuLy8gVE9ETzogSW5saW5lIHRoaXMgZmFjdG9yeSB3aGVuIHdlIHN0YXJ0IHJlbGVhc2luZyBJdnkgY29tcGlsZWQgbGlicmFyaWVzXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdFVzZXJQcm9maWxlQ29tcG9uZW50c0NvbmZpZygpOiBDbXNDb25maWcge1xuICBjb25zdCBjb25maWc6IENtc0NvbmZpZyA9IHtcbiAgICBmZWF0dXJlTW9kdWxlczoge1xuICAgICAgW1VTRVJfUFJPRklMRV9GRUFUVVJFXToge1xuICAgICAgICBjbXNDb21wb25lbnRzOiBbXG4gICAgICAgICAgJ1JlZ2lzdGVyQ3VzdG9tZXJDb21wb25lbnQnLFxuICAgICAgICAgICdVcGRhdGVQcm9maWxlQ29tcG9uZW50JyxcbiAgICAgICAgICAnVXBkYXRlRW1haWxDb21wb25lbnQnLFxuICAgICAgICAgICdVcGRhdGVQYXNzd29yZENvbXBvbmVudCcsXG4gICAgICAgICAgJ0ZvcmdvdFBhc3N3b3JkQ29tcG9uZW50JyxcbiAgICAgICAgICAnUmVzZXRQYXNzd29yZENvbXBvbmVudCcsXG4gICAgICAgICAgJ0Nsb3NlQWNjb3VudENvbXBvbmVudCcsXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgICAgLy8gYnkgZGVmYXVsdCBjb3JlIGlzIGJ1bmRsZWQgdG9nZXRoZXIgd2l0aCBjb21wb25lbnRzXG4gICAgICBbVVNFUl9QUk9GSUxFX0NPUkVfRkVBVFVSRV06IFVTRVJfUFJPRklMRV9GRUFUVVJFLFxuICAgIH0sXG4gIH07XG4gIHJldHVybiBjb25maWc7XG59XG5cbkBOZ01vZHVsZSh7XG4gIHByb3ZpZGVyczogW1xuICAgIHByb3ZpZGVEZWZhdWx0Q29uZmlnRmFjdG9yeShkZWZhdWx0VXNlclByb2ZpbGVDb21wb25lbnRzQ29uZmlnKSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBVc2VyUHJvZmlsZUZhY2FkZVRyYW5zaXRpb25hbFRva2VuLFxuICAgICAgdXNlRXhpc3Rpbmc6IFVzZXJQcm9maWxlRmFjYWRlLFxuICAgIH0sXG4gICAge1xuICAgICAgcHJvdmlkZTogVXNlclJlZ2lzdGVyRmFjYWRlVHJhbnNpdGlvbmFsVG9rZW4sXG4gICAgICB1c2VFeGlzdGluZzogVXNlclJlZ2lzdGVyRmFjYWRlLFxuICAgIH0sXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIFVzZXJQcm9maWxlUm9vdE1vZHVsZSB7fVxuIl19