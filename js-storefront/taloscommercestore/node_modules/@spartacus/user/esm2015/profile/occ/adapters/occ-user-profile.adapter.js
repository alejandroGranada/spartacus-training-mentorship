import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { ConverterService, InterceptorUtil, normalizeHttpError, OccEndpointsService, USE_CLIENT_TOKEN, } from '@spartacus/core';
import { TITLE_NORMALIZER, USER_PROFILE_NORMALIZER, USER_PROFILE_SERIALIZER, USER_SIGN_UP_SERIALIZER, } from '@spartacus/user/profile/core';
import { throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
export class OccUserProfileAdapter {
    constructor(http, occEndpoints, converter) {
        this.http = http;
        this.occEndpoints = occEndpoints;
        this.converter = converter;
    }
    update(userId, user) {
        const endpoint = this.occEndpoints.isConfigured('userUpdateProfile')
            ? 'userUpdateProfile'
            : 'user';
        const url = this.occEndpoints.getUrl(endpoint, { userId });
        user = this.converter.convert(user, USER_PROFILE_SERIALIZER);
        return this.http
            .patch(url, user)
            .pipe(catchError((error) => throwError(normalizeHttpError(error))));
    }
    register(user) {
        const url = this.occEndpoints.getUrl('userRegister');
        let headers = new HttpHeaders({
            'Content-Type': 'application/json',
        });
        headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
        user = this.converter.convert(user, USER_SIGN_UP_SERIALIZER);
        return this.http
            .post(url, user, { headers })
            .pipe(catchError((error) => throwError(normalizeHttpError(error))), this.converter.pipeable(USER_PROFILE_NORMALIZER));
    }
    registerGuest(guid, password) {
        const url = this.occEndpoints.getUrl('userRegister');
        let headers = new HttpHeaders({
            'Content-Type': 'application/x-www-form-urlencoded',
        });
        headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
        const httpParams = new HttpParams()
            .set('guid', guid)
            .set('password', password);
        return this.http
            .post(url, httpParams, { headers })
            .pipe(catchError((error) => throwError(normalizeHttpError(error))), this.converter.pipeable(USER_PROFILE_NORMALIZER));
    }
    requestForgotPasswordEmail(userEmailAddress) {
        const url = this.occEndpoints.getUrl('userForgotPassword');
        const httpParams = new HttpParams().set('userId', userEmailAddress);
        let headers = new HttpHeaders({
            'Content-Type': 'application/x-www-form-urlencoded',
        });
        headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
        return this.http
            .post(url, httpParams, { headers })
            .pipe(catchError((error) => throwError(normalizeHttpError(error))));
    }
    resetPassword(token, newPassword) {
        const url = this.occEndpoints.getUrl('userResetPassword');
        let headers = new HttpHeaders({
            'Content-Type': 'application/json',
        });
        headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);
        return this.http
            .post(url, { token, newPassword }, { headers })
            .pipe(catchError((error) => throwError(normalizeHttpError(error))));
    }
    updateEmail(userId, currentPassword, newUserId) {
        const url = this.occEndpoints.getUrl('userUpdateLoginId', { userId });
        const httpParams = new HttpParams()
            .set('password', currentPassword)
            .set('newLogin', newUserId);
        const headers = new HttpHeaders({
            'Content-Type': 'application/x-www-form-urlencoded',
        });
        return this.http
            .put(url, httpParams, { headers })
            .pipe(catchError((error) => throwError(normalizeHttpError(error))));
    }
    updatePassword(userId, oldPassword, newPassword) {
        const url = this.occEndpoints.getUrl('userUpdatePassword', { userId });
        const httpParams = new HttpParams()
            .set('old', oldPassword)
            .set('new', newPassword);
        const headers = new HttpHeaders({
            'Content-Type': 'application/x-www-form-urlencoded',
        });
        return this.http
            .put(url, httpParams, { headers })
            .pipe(catchError((error) => throwError(normalizeHttpError(error))));
    }
    close(userId) {
        const endpoint = this.occEndpoints.isConfigured('userCloseAccount')
            ? 'userCloseAccount'
            : 'user';
        const url = this.occEndpoints.getUrl(endpoint, { userId });
        return this.http
            .delete(url)
            .pipe(catchError((error) => throwError(normalizeHttpError(error))));
    }
    loadTitles() {
        const url = this.occEndpoints.getUrl('titles');
        return this.http.get(url).pipe(catchError((error) => throwError(normalizeHttpError(error))), map((titleList) => { var _a; return (_a = titleList.titles) !== null && _a !== void 0 ? _a : []; }), this.converter.pipeableMany(TITLE_NORMALIZER));
    }
}
OccUserProfileAdapter.decorators = [
    { type: Injectable }
];
OccUserProfileAdapter.ctorParameters = () => [
    { type: HttpClient },
    { type: OccEndpointsService },
    { type: ConverterService }
];
//# sourceMappingURL=data:application/json;base64,