import { Injectable } from '@angular/core';
import { AuthService, CommandService, CommandStrategy, EventService, LanguageSetEvent, QueryService, UserIdService, } from '@spartacus/core';
import { UserAccountChangedEvent, UserAccountFacade, } from '@spartacus/user/account/root';
import { UserProfileConnector } from '../connectors/user-profile.connector';
import { map, switchMap, tap } from 'rxjs/operators';
export class UserProfileService {
    constructor(userAccountService, authService, userProfileConnector, eventService, userIdService, query, command) {
        this.userAccountService = userAccountService;
        this.authService = authService;
        this.userProfileConnector = userProfileConnector;
        this.eventService = eventService;
        this.userIdService = userIdService;
        this.query = query;
        this.command = command;
        this.updateCommand = this.command.create((payload) => this.userIdService.takeUserId(true).pipe(switchMap((uid) => this.userProfileConnector.update(uid, payload.details).pipe(tap(() => {
            this.eventService.dispatch({ user: payload.details }, UserAccountChangedEvent);
        })))), {
            strategy: CommandStrategy.Queue,
        });
        this.closeCommand = this.command.create(() => this.userIdService
            .takeUserId(true)
            .pipe(switchMap((uid) => this.userProfileConnector
            .remove(uid)
            .pipe(tap(() => this.authService.logout())))));
        this.titleQuery = this.query.create(() => this.userProfileConnector.getTitles(), {
            reloadOn: [LanguageSetEvent],
        });
    }
    get() {
        return this.userAccountService.get();
    }
    /**
     * Updates the user's details.
     *
     * @param details User details to be updated.
     */
    update(details) {
        return this.updateCommand.execute({ details });
    }
    /**
     * Closes the user account.
     */
    close() {
        return this.closeCommand.execute(undefined);
    }
    /**
     * Returns titles that can be used for the user profiles.
     */
    getTitles() {
        return this.titleQuery.get().pipe(map((titles) => titles !== null && titles !== void 0 ? titles : []));
    }
}
UserProfileService.decorators = [
    { type: Injectable }
];
UserProfileService.ctorParameters = () => [
    { type: UserAccountFacade },
    { type: AuthService },
    { type: UserProfileConnector },
    { type: EventService },
    { type: UserIdService },
    { type: QueryService },
    { type: CommandService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1wcm9maWxlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvUGF0cnlrL0Rlc2t0b3Avc3BhcnRhY3VzL2ZlYXR1cmUtbGlicy91c2VyL3Byb2ZpbGUvY29yZS8iLCJzb3VyY2VzIjpbImZhY2FkZS91c2VyLXByb2ZpbGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFDTCxXQUFXLEVBRVgsY0FBYyxFQUNkLGVBQWUsRUFDZixZQUFZLEVBQ1osZ0JBQWdCLEVBRWhCLFlBQVksRUFDWixhQUFhLEdBQ2QsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLEVBRUwsdUJBQXVCLEVBQ3ZCLGlCQUFpQixHQUNsQixNQUFNLDhCQUE4QixDQUFDO0FBR3RDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR3JELE1BQU0sT0FBTyxrQkFBa0I7SUF1QzdCLFlBQ1ksa0JBQXFDLEVBQ3JDLFdBQXdCLEVBQ3hCLG9CQUEwQyxFQUMxQyxZQUEwQixFQUMxQixhQUE0QixFQUM1QixLQUFtQixFQUNuQixPQUF1QjtRQU52Qix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW1CO1FBQ3JDLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3hCLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUFDMUMsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDMUIsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFDNUIsVUFBSyxHQUFMLEtBQUssQ0FBYztRQUNuQixZQUFPLEdBQVAsT0FBTyxDQUFnQjtRQTdDekIsa0JBQWEsR0FBK0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQ3ZFLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FDVixJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQ3RDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQ2hCLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQ3pELEdBQUcsQ0FBQyxHQUFHLEVBQUU7WUFDUCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FDeEIsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUN6Qix1QkFBdUIsQ0FDeEIsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUNILENBQ0YsQ0FDRixFQUNIO1lBQ0UsUUFBUSxFQUFFLGVBQWUsQ0FBQyxLQUFLO1NBQ2hDLENBQ0YsQ0FBQztRQUVRLGlCQUFZLEdBQVksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQ3pELElBQUksQ0FBQyxhQUFhO2FBQ2YsVUFBVSxDQUFDLElBQUksQ0FBQzthQUNoQixJQUFJLENBQ0gsU0FBUyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FDaEIsSUFBSSxDQUFDLG9CQUFvQjthQUN0QixNQUFNLENBQUMsR0FBRyxDQUFDO2FBQ1gsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FDOUMsQ0FDRixDQUNKLENBQUM7UUFFUSxlQUFVLEdBQW1CLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUN0RCxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsU0FBUyxFQUFFLEVBQzNDO1lBQ0UsUUFBUSxFQUFFLENBQUMsZ0JBQWdCLENBQUM7U0FDN0IsQ0FDRixDQUFDO0lBVUMsQ0FBQztJQUVKLEdBQUc7UUFDRCxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxPQUFhO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUs7UUFDSCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRDs7T0FFRztJQUNILFNBQVM7UUFDUCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsTUFBTSxhQUFOLE1BQU0sY0FBTixNQUFNLEdBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRSxDQUFDOzs7WUEzRUYsVUFBVTs7O1lBUFQsaUJBQWlCO1lBYmpCLFdBQVc7WUFpQkosb0JBQW9CO1lBYjNCLFlBQVk7WUFJWixhQUFhO1lBRGIsWUFBWTtZQUxaLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBBdXRoU2VydmljZSxcbiAgQ29tbWFuZCxcbiAgQ29tbWFuZFNlcnZpY2UsXG4gIENvbW1hbmRTdHJhdGVneSxcbiAgRXZlbnRTZXJ2aWNlLFxuICBMYW5ndWFnZVNldEV2ZW50LFxuICBRdWVyeSxcbiAgUXVlcnlTZXJ2aWNlLFxuICBVc2VySWRTZXJ2aWNlLFxufSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHtcbiAgVXNlcixcbiAgVXNlckFjY291bnRDaGFuZ2VkRXZlbnQsXG4gIFVzZXJBY2NvdW50RmFjYWRlLFxufSBmcm9tICdAc3BhcnRhY3VzL3VzZXIvYWNjb3VudC9yb290JztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFRpdGxlLCBVc2VyUHJvZmlsZUZhY2FkZSB9IGZyb20gJ0BzcGFydGFjdXMvdXNlci9wcm9maWxlL3Jvb3QnO1xuaW1wb3J0IHsgVXNlclByb2ZpbGVDb25uZWN0b3IgfSBmcm9tICcuLi9jb25uZWN0b3JzL3VzZXItcHJvZmlsZS5jb25uZWN0b3InO1xuaW1wb3J0IHsgbWFwLCBzd2l0Y2hNYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFVzZXJQcm9maWxlU2VydmljZSBpbXBsZW1lbnRzIFVzZXJQcm9maWxlRmFjYWRlIHtcbiAgcHJvdGVjdGVkIHVwZGF0ZUNvbW1hbmQ6IENvbW1hbmQ8eyBkZXRhaWxzOiBVc2VyIH0+ID0gdGhpcy5jb21tYW5kLmNyZWF0ZShcbiAgICAocGF5bG9hZCkgPT5cbiAgICAgIHRoaXMudXNlcklkU2VydmljZS50YWtlVXNlcklkKHRydWUpLnBpcGUoXG4gICAgICAgIHN3aXRjaE1hcCgodWlkKSA9PlxuICAgICAgICAgIHRoaXMudXNlclByb2ZpbGVDb25uZWN0b3IudXBkYXRlKHVpZCwgcGF5bG9hZC5kZXRhaWxzKS5waXBlKFxuICAgICAgICAgICAgdGFwKCgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5ldmVudFNlcnZpY2UuZGlzcGF0Y2goXG4gICAgICAgICAgICAgICAgeyB1c2VyOiBwYXlsb2FkLmRldGFpbHMgfSxcbiAgICAgICAgICAgICAgICBVc2VyQWNjb3VudENoYW5nZWRFdmVudFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICksXG4gICAge1xuICAgICAgc3RyYXRlZ3k6IENvbW1hbmRTdHJhdGVneS5RdWV1ZSxcbiAgICB9XG4gICk7XG5cbiAgcHJvdGVjdGVkIGNsb3NlQ29tbWFuZDogQ29tbWFuZCA9IHRoaXMuY29tbWFuZC5jcmVhdGUoKCkgPT5cbiAgICB0aGlzLnVzZXJJZFNlcnZpY2VcbiAgICAgIC50YWtlVXNlcklkKHRydWUpXG4gICAgICAucGlwZShcbiAgICAgICAgc3dpdGNoTWFwKCh1aWQpID0+XG4gICAgICAgICAgdGhpcy51c2VyUHJvZmlsZUNvbm5lY3RvclxuICAgICAgICAgICAgLnJlbW92ZSh1aWQpXG4gICAgICAgICAgICAucGlwZSh0YXAoKCkgPT4gdGhpcy5hdXRoU2VydmljZS5sb2dvdXQoKSkpXG4gICAgICAgIClcbiAgICAgIClcbiAgKTtcblxuICBwcm90ZWN0ZWQgdGl0bGVRdWVyeTogUXVlcnk8VGl0bGVbXT4gPSB0aGlzLnF1ZXJ5LmNyZWF0ZShcbiAgICAoKSA9PiB0aGlzLnVzZXJQcm9maWxlQ29ubmVjdG9yLmdldFRpdGxlcygpLFxuICAgIHtcbiAgICAgIHJlbG9hZE9uOiBbTGFuZ3VhZ2VTZXRFdmVudF0sXG4gICAgfVxuICApO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCB1c2VyQWNjb3VudFNlcnZpY2U6IFVzZXJBY2NvdW50RmFjYWRlLFxuICAgIHByb3RlY3RlZCBhdXRoU2VydmljZTogQXV0aFNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIHVzZXJQcm9maWxlQ29ubmVjdG9yOiBVc2VyUHJvZmlsZUNvbm5lY3RvcixcbiAgICBwcm90ZWN0ZWQgZXZlbnRTZXJ2aWNlOiBFdmVudFNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIHVzZXJJZFNlcnZpY2U6IFVzZXJJZFNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIHF1ZXJ5OiBRdWVyeVNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIGNvbW1hbmQ6IENvbW1hbmRTZXJ2aWNlXG4gICkge31cblxuICBnZXQoKTogT2JzZXJ2YWJsZTxVc2VyIHwgdW5kZWZpbmVkPiB7XG4gICAgcmV0dXJuIHRoaXMudXNlckFjY291bnRTZXJ2aWNlLmdldCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIHVzZXIncyBkZXRhaWxzLlxuICAgKlxuICAgKiBAcGFyYW0gZGV0YWlscyBVc2VyIGRldGFpbHMgdG8gYmUgdXBkYXRlZC5cbiAgICovXG4gIHVwZGF0ZShkZXRhaWxzOiBVc2VyKTogT2JzZXJ2YWJsZTx1bmtub3duPiB7XG4gICAgcmV0dXJuIHRoaXMudXBkYXRlQ29tbWFuZC5leGVjdXRlKHsgZGV0YWlscyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIHVzZXIgYWNjb3VudC5cbiAgICovXG4gIGNsb3NlKCk6IE9ic2VydmFibGU8dW5rbm93bj4ge1xuICAgIHJldHVybiB0aGlzLmNsb3NlQ29tbWFuZC5leGVjdXRlKHVuZGVmaW5lZCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aXRsZXMgdGhhdCBjYW4gYmUgdXNlZCBmb3IgdGhlIHVzZXIgcHJvZmlsZXMuXG4gICAqL1xuICBnZXRUaXRsZXMoKTogT2JzZXJ2YWJsZTxUaXRsZVtdPiB7XG4gICAgcmV0dXJuIHRoaXMudGl0bGVRdWVyeS5nZXQoKS5waXBlKG1hcCgodGl0bGVzKSA9PiB0aXRsZXMgPz8gW10pKTtcbiAgfVxufVxuIl19