import { Injectable } from '@angular/core';
import { CommandService, UserIdService } from '@spartacus/core';
import { switchMap, take } from 'rxjs/operators';
import { UserProfileConnector } from '../connectors/user-profile.connector';
export class UserPasswordService {
    constructor(userProfileConnector, userIdService, command) {
        this.userProfileConnector = userProfileConnector;
        this.userIdService = userIdService;
        this.command = command;
        this.updateCommand = this.command.create((payload) => this.userIdService.takeUserId(true).pipe(take(1), switchMap((uid) => this.userProfileConnector.updatePassword(uid, payload.oldPassword, payload.newPassword))));
        this.resetCommand = this.command.create((payload) => this.userProfileConnector.resetPassword(payload.token, payload.password));
        this.requestForgotPasswordEmailCommand = this.command.create((payload) => this.userProfileConnector.requestForgotPasswordEmail(payload.email));
    }
    /**
     * Updates the password for the user
     *
     * The method returns an observable with `LoaderState` information, including the
     * actual user data.
     *
     * @param oldPassword the current password that will be changed
     * @param newPassword the new password
     */
    update(oldPassword, newPassword) {
        return this.updateCommand.execute({ oldPassword, newPassword });
    }
    /**
     * Reset new password. Part of the forgot password flow.
     *
     * @param token
     * @param password
     */
    reset(token, password) {
        return this.resetCommand.execute({ token, password });
    }
    /*
     * Request an email to reset a forgotten password.
     */
    requestForgotPasswordEmail(email) {
        return this.requestForgotPasswordEmailCommand.execute({ email });
    }
}
UserPasswordService.decorators = [
    { type: Injectable }
];
UserPasswordService.ctorParameters = () => [
    { type: UserProfileConnector },
    { type: UserIdService },
    { type: CommandService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1wYXNzd29yZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9mZWF0dXJlLWxpYnMvdXNlci9wcm9maWxlL2NvcmUvIiwic291cmNlcyI6WyJmYWNhZGUvdXNlci1wYXNzd29yZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFXLGNBQWMsRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV6RSxPQUFPLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRWpELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBRzVFLE1BQU0sT0FBTyxtQkFBbUI7SUE4QjlCLFlBQ1ksb0JBQTBDLEVBQzFDLGFBQTRCLEVBQzVCLE9BQXVCO1FBRnZCLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUFDMUMsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFDNUIsWUFBTyxHQUFQLE9BQU8sQ0FBZ0I7UUFoQ3pCLGtCQUFhLEdBR2xCLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FDbkMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUN0QyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ1AsU0FBUyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FDaEIsSUFBSSxDQUFDLG9CQUFvQixDQUFDLGNBQWMsQ0FDdEMsR0FBRyxFQUNILE9BQU8sQ0FBQyxXQUFXLEVBQ25CLE9BQU8sQ0FBQyxXQUFXLENBQ3BCLENBQ0YsQ0FDRixDQUNGLENBQUM7UUFFUSxpQkFBWSxHQUdqQixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQ25DLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQ3pFLENBQUM7UUFFUSxzQ0FBaUMsR0FFdEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUNuQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsMEJBQTBCLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUNwRSxDQUFDO0lBTUMsQ0FBQztJQUVKOzs7Ozs7OztPQVFHO0lBQ0gsTUFBTSxDQUFDLFdBQW1CLEVBQUUsV0FBbUI7UUFDN0MsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILEtBQUssQ0FBQyxLQUFhLEVBQUUsUUFBZ0I7UUFDbkMsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRDs7T0FFRztJQUNILDBCQUEwQixDQUFDLEtBQWE7UUFDdEMsT0FBTyxJQUFJLENBQUMsaUNBQWlDLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUNuRSxDQUFDOzs7WUFqRUYsVUFBVTs7O1lBRkYsb0JBQW9CO1lBSkssYUFBYTtZQUE3QixjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbWFuZCwgQ29tbWFuZFNlcnZpY2UsIFVzZXJJZFNlcnZpY2UgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc3dpdGNoTWFwLCB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgVXNlclBhc3N3b3JkRmFjYWRlIH0gZnJvbSAnQHNwYXJ0YWN1cy91c2VyL3Byb2ZpbGUvcm9vdCc7XG5pbXBvcnQgeyBVc2VyUHJvZmlsZUNvbm5lY3RvciB9IGZyb20gJy4uL2Nvbm5lY3RvcnMvdXNlci1wcm9maWxlLmNvbm5lY3Rvcic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBVc2VyUGFzc3dvcmRTZXJ2aWNlIGltcGxlbWVudHMgVXNlclBhc3N3b3JkRmFjYWRlIHtcbiAgcHJvdGVjdGVkIHVwZGF0ZUNvbW1hbmQ6IENvbW1hbmQ8e1xuICAgIG9sZFBhc3N3b3JkOiBzdHJpbmc7XG4gICAgbmV3UGFzc3dvcmQ6IHN0cmluZztcbiAgfT4gPSB0aGlzLmNvbW1hbmQuY3JlYXRlKChwYXlsb2FkKSA9PlxuICAgIHRoaXMudXNlcklkU2VydmljZS50YWtlVXNlcklkKHRydWUpLnBpcGUoXG4gICAgICB0YWtlKDEpLFxuICAgICAgc3dpdGNoTWFwKCh1aWQpID0+XG4gICAgICAgIHRoaXMudXNlclByb2ZpbGVDb25uZWN0b3IudXBkYXRlUGFzc3dvcmQoXG4gICAgICAgICAgdWlkLFxuICAgICAgICAgIHBheWxvYWQub2xkUGFzc3dvcmQsXG4gICAgICAgICAgcGF5bG9hZC5uZXdQYXNzd29yZFxuICAgICAgICApXG4gICAgICApXG4gICAgKVxuICApO1xuXG4gIHByb3RlY3RlZCByZXNldENvbW1hbmQ6IENvbW1hbmQ8e1xuICAgIHRva2VuOiBzdHJpbmc7XG4gICAgcGFzc3dvcmQ6IHN0cmluZztcbiAgfT4gPSB0aGlzLmNvbW1hbmQuY3JlYXRlKChwYXlsb2FkKSA9PlxuICAgIHRoaXMudXNlclByb2ZpbGVDb25uZWN0b3IucmVzZXRQYXNzd29yZChwYXlsb2FkLnRva2VuLCBwYXlsb2FkLnBhc3N3b3JkKVxuICApO1xuXG4gIHByb3RlY3RlZCByZXF1ZXN0Rm9yZ290UGFzc3dvcmRFbWFpbENvbW1hbmQ6IENvbW1hbmQ8e1xuICAgIGVtYWlsOiBzdHJpbmc7XG4gIH0+ID0gdGhpcy5jb21tYW5kLmNyZWF0ZSgocGF5bG9hZCkgPT5cbiAgICB0aGlzLnVzZXJQcm9maWxlQ29ubmVjdG9yLnJlcXVlc3RGb3Jnb3RQYXNzd29yZEVtYWlsKHBheWxvYWQuZW1haWwpXG4gICk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIHVzZXJQcm9maWxlQ29ubmVjdG9yOiBVc2VyUHJvZmlsZUNvbm5lY3RvcixcbiAgICBwcm90ZWN0ZWQgdXNlcklkU2VydmljZTogVXNlcklkU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgY29tbWFuZDogQ29tbWFuZFNlcnZpY2VcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBwYXNzd29yZCBmb3IgdGhlIHVzZXJcbiAgICpcbiAgICogVGhlIG1ldGhvZCByZXR1cm5zIGFuIG9ic2VydmFibGUgd2l0aCBgTG9hZGVyU3RhdGVgIGluZm9ybWF0aW9uLCBpbmNsdWRpbmcgdGhlXG4gICAqIGFjdHVhbCB1c2VyIGRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSBvbGRQYXNzd29yZCB0aGUgY3VycmVudCBwYXNzd29yZCB0aGF0IHdpbGwgYmUgY2hhbmdlZFxuICAgKiBAcGFyYW0gbmV3UGFzc3dvcmQgdGhlIG5ldyBwYXNzd29yZFxuICAgKi9cbiAgdXBkYXRlKG9sZFBhc3N3b3JkOiBzdHJpbmcsIG5ld1Bhc3N3b3JkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPHVua25vd24+IHtcbiAgICByZXR1cm4gdGhpcy51cGRhdGVDb21tYW5kLmV4ZWN1dGUoeyBvbGRQYXNzd29yZCwgbmV3UGFzc3dvcmQgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVzZXQgbmV3IHBhc3N3b3JkLiBQYXJ0IG9mIHRoZSBmb3Jnb3QgcGFzc3dvcmQgZmxvdy5cbiAgICpcbiAgICogQHBhcmFtIHRva2VuXG4gICAqIEBwYXJhbSBwYXNzd29yZFxuICAgKi9cbiAgcmVzZXQodG9rZW46IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZyk6IE9ic2VydmFibGU8dW5rbm93bj4ge1xuICAgIHJldHVybiB0aGlzLnJlc2V0Q29tbWFuZC5leGVjdXRlKHsgdG9rZW4sIHBhc3N3b3JkIH0pO1xuICB9XG5cbiAgLypcbiAgICogUmVxdWVzdCBhbiBlbWFpbCB0byByZXNldCBhIGZvcmdvdHRlbiBwYXNzd29yZC5cbiAgICovXG4gIHJlcXVlc3RGb3Jnb3RQYXNzd29yZEVtYWlsKGVtYWlsOiBzdHJpbmcpOiBPYnNlcnZhYmxlPHVua25vd24+IHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0Rm9yZ290UGFzc3dvcmRFbWFpbENvbW1hbmQuZXhlY3V0ZSh7IGVtYWlsIH0pO1xuICB9XG59XG4iXX0=