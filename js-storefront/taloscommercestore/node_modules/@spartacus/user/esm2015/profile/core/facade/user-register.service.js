import { Injectable } from '@angular/core';
import { AuthService, CommandService, UserActions, } from '@spartacus/core';
import { UserProfileConnector } from '../connectors/user-profile.connector';
import { tap } from 'rxjs/operators';
import { UserProfileService } from './user-profile.service';
import { Store } from '@ngrx/store';
export class UserRegisterService {
    constructor(userProfile, userConnector, authService, command, store) {
        this.userProfile = userProfile;
        this.userConnector = userConnector;
        this.authService = authService;
        this.command = command;
        this.store = store;
        this.registerCommand = this.command.create(({ user }) => this.userConnector.register(user).pipe(tap(() => {
            // this is a compatibility mechanism only, to make anonymous consents
            // management work properly in transitional period (when we move logic
            // to separate libraries)
            this.store.dispatch(new UserActions.RegisterUserSuccess());
        })));
        this.registerGuestCommand = this.command.create((payload) => this.userConnector.registerGuest(payload.guid, payload.password).pipe(tap((user) => {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            this.authService.loginWithCredentials(user.uid, payload.password);
        })));
    }
    /**
     * Register a new user.
     *
     * @param submitFormData as UserRegisterFormData
     */
    register(user) {
        return this.registerCommand.execute({ user });
    }
    /**
     * Register a new user from guest.
     *
     * @param guid
     * @param password
     */
    registerGuest(guid, password) {
        return this.registerGuestCommand.execute({ guid, password });
    }
    /**
     * Returns titles that can be used for the user profiles.
     */
    getTitles() {
        return this.userProfile.getTitles();
    }
}
UserRegisterService.decorators = [
    { type: Injectable }
];
UserRegisterService.ctorParameters = () => [
    { type: UserProfileService },
    { type: UserProfileConnector },
    { type: AuthService },
    { type: CommandService },
    { type: Store }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1yZWdpc3Rlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9mZWF0dXJlLWxpYnMvdXNlci9wcm9maWxlL2NvcmUvIiwic291cmNlcyI6WyJmYWNhZGUvdXNlci1yZWdpc3Rlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUNMLFdBQVcsRUFFWCxjQUFjLEVBQ2QsV0FBVyxHQUNaLE1BQU0saUJBQWlCLENBQUM7QUFRekIsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDNUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFHcEMsTUFBTSxPQUFPLG1CQUFtQjtJQThCOUIsWUFDWSxXQUErQixFQUMvQixhQUFtQyxFQUNuQyxXQUF3QixFQUN4QixPQUF1QixFQUN2QixLQUFZO1FBSlosZ0JBQVcsR0FBWCxXQUFXLENBQW9CO1FBQy9CLGtCQUFhLEdBQWIsYUFBYSxDQUFzQjtRQUNuQyxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN4QixZQUFPLEdBQVAsT0FBTyxDQUFnQjtRQUN2QixVQUFLLEdBQUwsS0FBSyxDQUFPO1FBbENkLG9CQUFlLEdBR3JCLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQ25DLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FDcEMsR0FBRyxDQUFDLEdBQUcsRUFBRTtZQUNQLHFFQUFxRTtZQUNyRSxzRUFBc0U7WUFDdEUseUJBQXlCO1lBQ3pCLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksV0FBVyxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FBQztRQUM3RCxDQUFDLENBQUMsQ0FDSCxDQUNGLENBQUM7UUFFUSx5QkFBb0IsR0FNMUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUNsQyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQ25FLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ1gsb0VBQW9FO1lBQ3BFLElBQUksQ0FBQyxXQUFXLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLEdBQUksRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDckUsQ0FBQyxDQUFDLENBQ0gsQ0FDRixDQUFDO0lBUUMsQ0FBQztJQUVKOzs7O09BSUc7SUFDSCxRQUFRLENBQUMsSUFBZ0I7UUFDdkIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsYUFBYSxDQUFDLElBQVksRUFBRSxRQUFnQjtRQUMxQyxPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxTQUFTO1FBQ1AsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3RDLENBQUM7OztZQS9ERixVQUFVOzs7WUFIRixrQkFBa0I7WUFGbEIsb0JBQW9CO1lBWjNCLFdBQVc7WUFFWCxjQUFjO1lBYVAsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIEF1dGhTZXJ2aWNlLFxuICBDb21tYW5kLFxuICBDb21tYW5kU2VydmljZSxcbiAgVXNlckFjdGlvbnMsXG59IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnQHNwYXJ0YWN1cy91c2VyL2FjY291bnQvcm9vdCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICBUaXRsZSxcbiAgVXNlclJlZ2lzdGVyRmFjYWRlLFxuICBVc2VyU2lnblVwLFxufSBmcm9tICdAc3BhcnRhY3VzL3VzZXIvcHJvZmlsZS9yb290JztcbmltcG9ydCB7IFVzZXJQcm9maWxlQ29ubmVjdG9yIH0gZnJvbSAnLi4vY29ubmVjdG9ycy91c2VyLXByb2ZpbGUuY29ubmVjdG9yJztcbmltcG9ydCB7IHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFVzZXJQcm9maWxlU2VydmljZSB9IGZyb20gJy4vdXNlci1wcm9maWxlLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3RvcmUgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBVc2VyUmVnaXN0ZXJTZXJ2aWNlIGltcGxlbWVudHMgVXNlclJlZ2lzdGVyRmFjYWRlIHtcbiAgcHJvdGVjdGVkIHJlZ2lzdGVyQ29tbWFuZDogQ29tbWFuZDxcbiAgICB7IHVzZXI6IFVzZXJTaWduVXAgfSxcbiAgICBVc2VyXG4gID4gPSB0aGlzLmNvbW1hbmQuY3JlYXRlKCh7IHVzZXIgfSkgPT5cbiAgICB0aGlzLnVzZXJDb25uZWN0b3IucmVnaXN0ZXIodXNlcikucGlwZShcbiAgICAgIHRhcCgoKSA9PiB7XG4gICAgICAgIC8vIHRoaXMgaXMgYSBjb21wYXRpYmlsaXR5IG1lY2hhbmlzbSBvbmx5LCB0byBtYWtlIGFub255bW91cyBjb25zZW50c1xuICAgICAgICAvLyBtYW5hZ2VtZW50IHdvcmsgcHJvcGVybHkgaW4gdHJhbnNpdGlvbmFsIHBlcmlvZCAod2hlbiB3ZSBtb3ZlIGxvZ2ljXG4gICAgICAgIC8vIHRvIHNlcGFyYXRlIGxpYnJhcmllcylcbiAgICAgICAgdGhpcy5zdG9yZS5kaXNwYXRjaChuZXcgVXNlckFjdGlvbnMuUmVnaXN0ZXJVc2VyU3VjY2VzcygpKTtcbiAgICAgIH0pXG4gICAgKVxuICApO1xuXG4gIHByb3RlY3RlZCByZWdpc3Rlckd1ZXN0Q29tbWFuZDogQ29tbWFuZDxcbiAgICB7XG4gICAgICBndWlkOiBzdHJpbmc7XG4gICAgICBwYXNzd29yZDogc3RyaW5nO1xuICAgIH0sXG4gICAgVXNlclxuICA+ID0gdGhpcy5jb21tYW5kLmNyZWF0ZSgocGF5bG9hZCkgPT5cbiAgICB0aGlzLnVzZXJDb25uZWN0b3IucmVnaXN0ZXJHdWVzdChwYXlsb2FkLmd1aWQsIHBheWxvYWQucGFzc3dvcmQpLnBpcGUoXG4gICAgICB0YXAoKHVzZXIpID0+IHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgdGhpcy5hdXRoU2VydmljZS5sb2dpbldpdGhDcmVkZW50aWFscyh1c2VyLnVpZCEsIHBheWxvYWQucGFzc3dvcmQpO1xuICAgICAgfSlcbiAgICApXG4gICk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIHVzZXJQcm9maWxlOiBVc2VyUHJvZmlsZVNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIHVzZXJDb25uZWN0b3I6IFVzZXJQcm9maWxlQ29ubmVjdG9yLFxuICAgIHByb3RlY3RlZCBhdXRoU2VydmljZTogQXV0aFNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIGNvbW1hbmQ6IENvbW1hbmRTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBzdG9yZTogU3RvcmVcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIG5ldyB1c2VyLlxuICAgKlxuICAgKiBAcGFyYW0gc3VibWl0Rm9ybURhdGEgYXMgVXNlclJlZ2lzdGVyRm9ybURhdGFcbiAgICovXG4gIHJlZ2lzdGVyKHVzZXI6IFVzZXJTaWduVXApOiBPYnNlcnZhYmxlPFVzZXI+IHtcbiAgICByZXR1cm4gdGhpcy5yZWdpc3RlckNvbW1hbmQuZXhlY3V0ZSh7IHVzZXIgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBuZXcgdXNlciBmcm9tIGd1ZXN0LlxuICAgKlxuICAgKiBAcGFyYW0gZ3VpZFxuICAgKiBAcGFyYW0gcGFzc3dvcmRcbiAgICovXG4gIHJlZ2lzdGVyR3Vlc3QoZ3VpZDogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxVc2VyPiB7XG4gICAgcmV0dXJuIHRoaXMucmVnaXN0ZXJHdWVzdENvbW1hbmQuZXhlY3V0ZSh7IGd1aWQsIHBhc3N3b3JkIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGl0bGVzIHRoYXQgY2FuIGJlIHVzZWQgZm9yIHRoZSB1c2VyIHByb2ZpbGVzLlxuICAgKi9cbiAgZ2V0VGl0bGVzKCk6IE9ic2VydmFibGU8VGl0bGVbXT4ge1xuICAgIHJldHVybiB0aGlzLnVzZXJQcm9maWxlLmdldFRpdGxlcygpO1xuICB9XG59XG4iXX0=