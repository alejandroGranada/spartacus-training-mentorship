import { Injectable } from '@angular/core';
import { CommandService, CommandStrategy, UserIdService, } from '@spartacus/core';
import { switchMap } from 'rxjs/operators';
import { UserProfileConnector } from '../connectors/user-profile.connector';
export class UserEmailService {
    constructor(userIdService, userProfileConnector, command) {
        this.userIdService = userIdService;
        this.userProfileConnector = userProfileConnector;
        this.command = command;
        this.updateCommand = this.command.create((payload) => this.userIdService
            .takeUserId(true)
            .pipe(switchMap((uid) => this.userProfileConnector.updateEmail(uid, payload.password, payload.newUid))), {
            strategy: CommandStrategy.Queue,
        });
    }
    /**
     * Updates the user's email.
     *
     * @param password to users password to confirm the users
     * @param newUid the new proposed email address.
     */
    update(password, newUid) {
        return this.updateCommand.execute({ password, newUid });
    }
}
UserEmailService.decorators = [
    { type: Injectable }
];
UserEmailService.ctorParameters = () => [
    { type: UserIdService },
    { type: UserProfileConnector },
    { type: CommandService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1lbWFpbC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9mZWF0dXJlLWxpYnMvdXNlci9wcm9maWxlL2NvcmUvIiwic291cmNlcyI6WyJmYWNhZGUvdXNlci1lbWFpbC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUVMLGNBQWMsRUFDZCxlQUFlLEVBQ2YsYUFBYSxHQUNkLE1BQU0saUJBQWlCLENBQUM7QUFFekIsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTNDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBRzVFLE1BQU0sT0FBTyxnQkFBZ0I7SUFDM0IsWUFDWSxhQUE0QixFQUM1QixvQkFBMEMsRUFDMUMsT0FBdUI7UUFGdkIsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFDNUIseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtRQUMxQyxZQUFPLEdBQVAsT0FBTyxDQUFnQjtRQUd6QixrQkFBYSxHQUdsQixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FDdEIsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUNWLElBQUksQ0FBQyxhQUFhO2FBQ2YsVUFBVSxDQUFDLElBQUksQ0FBQzthQUNoQixJQUFJLENBQ0gsU0FBUyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FDaEIsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFdBQVcsQ0FDbkMsR0FBRyxFQUNILE9BQU8sQ0FBQyxRQUFRLEVBQ2hCLE9BQU8sQ0FBQyxNQUFNLENBQ2YsQ0FDRixDQUNGLEVBQ0w7WUFDRSxRQUFRLEVBQUUsZUFBZSxDQUFDLEtBQUs7U0FDaEMsQ0FDRixDQUFDO0lBckJDLENBQUM7SUF1Qko7Ozs7O09BS0c7SUFDSCxNQUFNLENBQUMsUUFBZ0IsRUFBRSxNQUFjO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUMxRCxDQUFDOzs7WUFyQ0YsVUFBVTs7O1lBUFQsYUFBYTtZQUtOLG9CQUFvQjtZQVAzQixjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgQ29tbWFuZCxcbiAgQ29tbWFuZFNlcnZpY2UsXG4gIENvbW1hbmRTdHJhdGVneSxcbiAgVXNlcklkU2VydmljZSxcbn0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFVzZXJFbWFpbEZhY2FkZSB9IGZyb20gJ0BzcGFydGFjdXMvdXNlci9wcm9maWxlL3Jvb3QnO1xuaW1wb3J0IHsgVXNlclByb2ZpbGVDb25uZWN0b3IgfSBmcm9tICcuLi9jb25uZWN0b3JzL3VzZXItcHJvZmlsZS5jb25uZWN0b3InO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVXNlckVtYWlsU2VydmljZSBpbXBsZW1lbnRzIFVzZXJFbWFpbEZhY2FkZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCB1c2VySWRTZXJ2aWNlOiBVc2VySWRTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCB1c2VyUHJvZmlsZUNvbm5lY3RvcjogVXNlclByb2ZpbGVDb25uZWN0b3IsXG4gICAgcHJvdGVjdGVkIGNvbW1hbmQ6IENvbW1hbmRTZXJ2aWNlXG4gICkge31cblxuICBwcm90ZWN0ZWQgdXBkYXRlQ29tbWFuZDogQ29tbWFuZDx7XG4gICAgcGFzc3dvcmQ6IHN0cmluZztcbiAgICBuZXdVaWQ6IHN0cmluZztcbiAgfT4gPSB0aGlzLmNvbW1hbmQuY3JlYXRlKFxuICAgIChwYXlsb2FkKSA9PlxuICAgICAgdGhpcy51c2VySWRTZXJ2aWNlXG4gICAgICAgIC50YWtlVXNlcklkKHRydWUpXG4gICAgICAgIC5waXBlKFxuICAgICAgICAgIHN3aXRjaE1hcCgodWlkKSA9PlxuICAgICAgICAgICAgdGhpcy51c2VyUHJvZmlsZUNvbm5lY3Rvci51cGRhdGVFbWFpbChcbiAgICAgICAgICAgICAgdWlkLFxuICAgICAgICAgICAgICBwYXlsb2FkLnBhc3N3b3JkLFxuICAgICAgICAgICAgICBwYXlsb2FkLm5ld1VpZFxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgKSxcbiAgICB7XG4gICAgICBzdHJhdGVneTogQ29tbWFuZFN0cmF0ZWd5LlF1ZXVlLFxuICAgIH1cbiAgKTtcblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgdXNlcidzIGVtYWlsLlxuICAgKlxuICAgKiBAcGFyYW0gcGFzc3dvcmQgdG8gdXNlcnMgcGFzc3dvcmQgdG8gY29uZmlybSB0aGUgdXNlcnNcbiAgICogQHBhcmFtIG5ld1VpZCB0aGUgbmV3IHByb3Bvc2VkIGVtYWlsIGFkZHJlc3MuXG4gICAqL1xuICB1cGRhdGUocGFzc3dvcmQ6IHN0cmluZywgbmV3VWlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPHVua25vd24+IHtcbiAgICByZXR1cm4gdGhpcy51cGRhdGVDb21tYW5kLmV4ZWN1dGUoeyBwYXNzd29yZCwgbmV3VWlkIH0pO1xuICB9XG59XG4iXX0=