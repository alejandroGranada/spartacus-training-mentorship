import { SERVER_REQUEST_ORIGIN, SERVER_REQUEST_URL } from '@spartacus/core';
import { OptimizedSsrEngine } from '../optimized-engine/optimized-ssr-engine';
import { REQUEST } from '@nguniversal/express-engine/tokens';
/**
 * The wrapper over the standard ngExpressEngine, that provides tokens for Spartacus
 * @param ngExpressEngine
 */
export class NgExpressEngineDecorator {
    /**
     * Returns the higher order ngExpressEngine with provided tokens for Spartacus
     *
     * @param ngExpressEngine
     */
    static get(ngExpressEngine, optimizationOptions) {
        const result = decorateExpressEngine(ngExpressEngine, optimizationOptions);
        return result;
    }
}
export function decorateExpressEngine(ngExpressEngine, optimizationOptions = {
    concurrency: 20,
    timeout: 3000,
}) {
    return function (setupOptions) {
        var _a;
        const engineInstance = ngExpressEngine(Object.assign(Object.assign({}, setupOptions), { providers: [
                // add spartacus related providers
                ...getServerRequestProviders(),
                ...((_a = setupOptions.providers) !== null && _a !== void 0 ? _a : []),
            ] }));
        // apply optimization wrapper if optimization options were defined
        return optimizationOptions
            ? new OptimizedSsrEngine(engineInstance, optimizationOptions)
                .engineInstance
            : engineInstance;
    };
}
/**
 * Returns Spartacus providers to be passed to the Angular express engine (in SSR)
 *
 * @param options
 */
export function getServerRequestProviders() {
    return [
        {
            provide: SERVER_REQUEST_URL,
            useFactory: getRequestUrl,
            deps: [REQUEST],
        },
        {
            provide: SERVER_REQUEST_ORIGIN,
            useFactory: getRequestOrigin,
            deps: [REQUEST],
        },
    ];
}
function getRequestUrl(req) {
    return getRequestOrigin(req) + req.originalUrl;
}
function getRequestOrigin(req) {
    // If express is resolving and trusting X-Forwarded-Host, we want to take it
    // into an account to properly generate request origin.
    const trustProxyFn = req.app.get('trust proxy fn');
    let forwardedHost = req.get('X-Forwarded-Host');
    if (forwardedHost && trustProxyFn(req.connection.remoteAddress, 0)) {
        if (forwardedHost.indexOf(',') !== -1) {
            // Note: X-Forwarded-Host is normally only ever a
            //       single value, but this is to be safe.
            forwardedHost = forwardedHost
                .substring(0, forwardedHost.indexOf(','))
                .trimRight();
        }
        return req.protocol + '://' + forwardedHost;
    }
    else {
        return req.protocol + '://' + req.get('host');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZXhwcmVzcy1lbmdpbmUtZGVjb3JhdG9yLmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9jb3JlLWxpYnMvc2V0dXAvc3NyLyIsInNvdXJjZXMiOlsiZW5naW5lLWRlY29yYXRvci9uZy1leHByZXNzLWVuZ2luZS1kZWNvcmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLHFCQUFxQixFQUFFLGtCQUFrQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDNUUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFFOUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBbUM3RDs7O0dBR0c7QUFDSCxNQUFNLE9BQU8sd0JBQXdCO0lBQ25DOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsR0FBRyxDQUNSLGVBQWdDLEVBQ2hDLG1CQUFtRDtRQUVuRCxNQUFNLE1BQU0sR0FBRyxxQkFBcUIsQ0FBQyxlQUFlLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztRQUMzRSxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0NBQ0Y7QUFFRCxNQUFNLFVBQVUscUJBQXFCLENBQ25DLGVBQWdDLEVBQ2hDLHNCQUFxRDtJQUNuRCxXQUFXLEVBQUUsRUFBRTtJQUNmLE9BQU8sRUFBRSxJQUFJO0NBQ2Q7SUFFRCxPQUFPLFVBQVUsWUFBNEI7O1FBQzNDLE1BQU0sY0FBYyxHQUFHLGVBQWUsaUNBQ2pDLFlBQVksS0FDZixTQUFTLEVBQUU7Z0JBQ1Qsa0NBQWtDO2dCQUNsQyxHQUFHLHlCQUF5QixFQUFFO2dCQUM5QixHQUFHLE9BQUMsWUFBWSxDQUFDLFNBQVMsbUNBQUksRUFBRSxDQUFDO2FBQ2xDLElBQ0QsQ0FBQztRQUVILGtFQUFrRTtRQUNsRSxPQUFPLG1CQUFtQjtZQUN4QixDQUFDLENBQUMsSUFBSSxrQkFBa0IsQ0FBQyxjQUFjLEVBQUUsbUJBQW1CLENBQUM7aUJBQ3hELGNBQWM7WUFDbkIsQ0FBQyxDQUFDLGNBQWMsQ0FBQztJQUNyQixDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSx5QkFBeUI7SUFDdkMsT0FBTztRQUNMO1lBQ0UsT0FBTyxFQUFFLGtCQUFrQjtZQUMzQixVQUFVLEVBQUUsYUFBYTtZQUN6QixJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUM7U0FDaEI7UUFDRDtZQUNFLE9BQU8sRUFBRSxxQkFBcUI7WUFDOUIsVUFBVSxFQUFFLGdCQUFnQjtZQUM1QixJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUM7U0FDaEI7S0FDRixDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsYUFBYSxDQUFDLEdBQVk7SUFDakMsT0FBTyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDO0FBQ2pELENBQUM7QUFFRCxTQUFTLGdCQUFnQixDQUFDLEdBQVk7SUFDcEMsNEVBQTRFO0lBQzVFLHVEQUF1RDtJQUN2RCxNQUFNLFlBQVksR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ25ELElBQUksYUFBYSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUNoRCxJQUFJLGFBQWEsSUFBSSxZQUFZLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLEVBQUU7UUFDbEUsSUFBSSxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ3JDLGlEQUFpRDtZQUNqRCw4Q0FBOEM7WUFDOUMsYUFBYSxHQUFHLGFBQWE7aUJBQzFCLFNBQVMsQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztpQkFDeEMsU0FBUyxFQUFFLENBQUM7U0FDaEI7UUFDRCxPQUFPLEdBQUcsQ0FBQyxRQUFRLEdBQUcsS0FBSyxHQUFHLGFBQWEsQ0FBQztLQUM3QztTQUFNO1FBQ0wsT0FBTyxHQUFHLENBQUMsUUFBUSxHQUFHLEtBQUssR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQy9DO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlRmFjdG9yeSwgU3RhdGljUHJvdmlkZXIsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNFUlZFUl9SRVFVRVNUX09SSUdJTiwgU0VSVkVSX1JFUVVFU1RfVVJMIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IE9wdGltaXplZFNzckVuZ2luZSB9IGZyb20gJy4uL29wdGltaXplZC1lbmdpbmUvb3B0aW1pemVkLXNzci1lbmdpbmUnO1xuaW1wb3J0IHsgU3NyT3B0aW1pemF0aW9uT3B0aW9ucyB9IGZyb20gJy4uL29wdGltaXplZC1lbmdpbmUvc3NyLW9wdGltaXphdGlvbi1vcHRpb25zJztcbmltcG9ydCB7IFJFUVVFU1QgfSBmcm9tICdAbmd1bml2ZXJzYWwvZXhwcmVzcy1lbmdpbmUvdG9rZW5zJztcbmltcG9ydCB7IFJlcXVlc3QgfSBmcm9tICdleHByZXNzJztcblxuLyoqXG4gKiBUaGVzZSBhcmUgdGhlIGFsbG93ZWQgb3B0aW9ucyBmb3IgdGhlIGVuZ2luZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIE5nU2V0dXBPcHRpb25zIHtcbiAgYm9vdHN0cmFwOiBUeXBlPHt9PiB8IE5nTW9kdWxlRmFjdG9yeTx7fT47XG4gIHByb3ZpZGVycz86IFN0YXRpY1Byb3ZpZGVyW107XG59XG5cbi8qKlxuICogVGhlc2UgYXJlIHRoZSBhbGxvd2VkIG9wdGlvbnMgZm9yIHRoZSByZW5kZXJcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZW5kZXJPcHRpb25zIGV4dGVuZHMgTmdTZXR1cE9wdGlvbnMge1xuICByZXE6IHtcbiAgICBwcm90b2NvbDogc3RyaW5nO1xuICAgIG9yaWdpbmFsVXJsOiBzdHJpbmc7XG4gICAgZ2V0OiAoXzogc3RyaW5nKSA9PiBzdHJpbmc7XG4gIH07IC8vIFJlcXVlc3Q7XG4gIHJlcz86IGFueTsgLy8gUmVzcG9uc2U7XG4gIHVybD86IHN0cmluZztcbiAgZG9jdW1lbnQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIE5nRXhwcmVzc0VuZ2luZUluc3RhbmNlID0gKFxuICBmaWxlUGF0aDogc3RyaW5nLFxuICBvcHRpb25zOiBSZW5kZXJPcHRpb25zLFxuICBjYWxsYmFjazogKGVycj86IEVycm9yIHwgbnVsbCwgaHRtbD86IHN0cmluZykgPT4gdm9pZFxuKSA9PiB2b2lkO1xuXG5leHBvcnQgdHlwZSBOZ0V4cHJlc3NFbmdpbmUgPSAoXG4gIHNldHVwT3B0aW9uczogTmdTZXR1cE9wdGlvbnNcbikgPT4gTmdFeHByZXNzRW5naW5lSW5zdGFuY2U7XG5cbi8qKlxuICogVGhlIHdyYXBwZXIgb3ZlciB0aGUgc3RhbmRhcmQgbmdFeHByZXNzRW5naW5lLCB0aGF0IHByb3ZpZGVzIHRva2VucyBmb3IgU3BhcnRhY3VzXG4gKiBAcGFyYW0gbmdFeHByZXNzRW5naW5lXG4gKi9cbmV4cG9ydCBjbGFzcyBOZ0V4cHJlc3NFbmdpbmVEZWNvcmF0b3Ige1xuICAvKipcbiAgICogUmV0dXJucyB0aGUgaGlnaGVyIG9yZGVyIG5nRXhwcmVzc0VuZ2luZSB3aXRoIHByb3ZpZGVkIHRva2VucyBmb3IgU3BhcnRhY3VzXG4gICAqXG4gICAqIEBwYXJhbSBuZ0V4cHJlc3NFbmdpbmVcbiAgICovXG4gIHN0YXRpYyBnZXQoXG4gICAgbmdFeHByZXNzRW5naW5lOiBOZ0V4cHJlc3NFbmdpbmUsXG4gICAgb3B0aW1pemF0aW9uT3B0aW9ucz86IFNzck9wdGltaXphdGlvbk9wdGlvbnMgfCBudWxsXG4gICk6IE5nRXhwcmVzc0VuZ2luZSB7XG4gICAgY29uc3QgcmVzdWx0ID0gZGVjb3JhdGVFeHByZXNzRW5naW5lKG5nRXhwcmVzc0VuZ2luZSwgb3B0aW1pemF0aW9uT3B0aW9ucyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVjb3JhdGVFeHByZXNzRW5naW5lKFxuICBuZ0V4cHJlc3NFbmdpbmU6IE5nRXhwcmVzc0VuZ2luZSxcbiAgb3B0aW1pemF0aW9uT3B0aW9uczogU3NyT3B0aW1pemF0aW9uT3B0aW9ucyB8IG51bGwgPSB7XG4gICAgY29uY3VycmVuY3k6IDIwLFxuICAgIHRpbWVvdXQ6IDMwMDAsXG4gIH1cbikge1xuICByZXR1cm4gZnVuY3Rpb24gKHNldHVwT3B0aW9uczogTmdTZXR1cE9wdGlvbnMpIHtcbiAgICBjb25zdCBlbmdpbmVJbnN0YW5jZSA9IG5nRXhwcmVzc0VuZ2luZSh7XG4gICAgICAuLi5zZXR1cE9wdGlvbnMsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgLy8gYWRkIHNwYXJ0YWN1cyByZWxhdGVkIHByb3ZpZGVyc1xuICAgICAgICAuLi5nZXRTZXJ2ZXJSZXF1ZXN0UHJvdmlkZXJzKCksXG4gICAgICAgIC4uLihzZXR1cE9wdGlvbnMucHJvdmlkZXJzID8/IFtdKSxcbiAgICAgIF0sXG4gICAgfSk7XG5cbiAgICAvLyBhcHBseSBvcHRpbWl6YXRpb24gd3JhcHBlciBpZiBvcHRpbWl6YXRpb24gb3B0aW9ucyB3ZXJlIGRlZmluZWRcbiAgICByZXR1cm4gb3B0aW1pemF0aW9uT3B0aW9uc1xuICAgICAgPyBuZXcgT3B0aW1pemVkU3NyRW5naW5lKGVuZ2luZUluc3RhbmNlLCBvcHRpbWl6YXRpb25PcHRpb25zKVxuICAgICAgICAgIC5lbmdpbmVJbnN0YW5jZVxuICAgICAgOiBlbmdpbmVJbnN0YW5jZTtcbiAgfTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIFNwYXJ0YWN1cyBwcm92aWRlcnMgdG8gYmUgcGFzc2VkIHRvIHRoZSBBbmd1bGFyIGV4cHJlc3MgZW5naW5lIChpbiBTU1IpXG4gKlxuICogQHBhcmFtIG9wdGlvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNlcnZlclJlcXVlc3RQcm92aWRlcnMoKTogU3RhdGljUHJvdmlkZXJbXSB7XG4gIHJldHVybiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogU0VSVkVSX1JFUVVFU1RfVVJMLFxuICAgICAgdXNlRmFjdG9yeTogZ2V0UmVxdWVzdFVybCxcbiAgICAgIGRlcHM6IFtSRVFVRVNUXSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IFNFUlZFUl9SRVFVRVNUX09SSUdJTixcbiAgICAgIHVzZUZhY3Rvcnk6IGdldFJlcXVlc3RPcmlnaW4sXG4gICAgICBkZXBzOiBbUkVRVUVTVF0sXG4gICAgfSxcbiAgXTtcbn1cblxuZnVuY3Rpb24gZ2V0UmVxdWVzdFVybChyZXE6IFJlcXVlc3QpOiBzdHJpbmcge1xuICByZXR1cm4gZ2V0UmVxdWVzdE9yaWdpbihyZXEpICsgcmVxLm9yaWdpbmFsVXJsO1xufVxuXG5mdW5jdGlvbiBnZXRSZXF1ZXN0T3JpZ2luKHJlcTogUmVxdWVzdCk6IHN0cmluZyB7XG4gIC8vIElmIGV4cHJlc3MgaXMgcmVzb2x2aW5nIGFuZCB0cnVzdGluZyBYLUZvcndhcmRlZC1Ib3N0LCB3ZSB3YW50IHRvIHRha2UgaXRcbiAgLy8gaW50byBhbiBhY2NvdW50IHRvIHByb3Blcmx5IGdlbmVyYXRlIHJlcXVlc3Qgb3JpZ2luLlxuICBjb25zdCB0cnVzdFByb3h5Rm4gPSByZXEuYXBwLmdldCgndHJ1c3QgcHJveHkgZm4nKTtcbiAgbGV0IGZvcndhcmRlZEhvc3QgPSByZXEuZ2V0KCdYLUZvcndhcmRlZC1Ib3N0Jyk7XG4gIGlmIChmb3J3YXJkZWRIb3N0ICYmIHRydXN0UHJveHlGbihyZXEuY29ubmVjdGlvbi5yZW1vdGVBZGRyZXNzLCAwKSkge1xuICAgIGlmIChmb3J3YXJkZWRIb3N0LmluZGV4T2YoJywnKSAhPT0gLTEpIHtcbiAgICAgIC8vIE5vdGU6IFgtRm9yd2FyZGVkLUhvc3QgaXMgbm9ybWFsbHkgb25seSBldmVyIGFcbiAgICAgIC8vICAgICAgIHNpbmdsZSB2YWx1ZSwgYnV0IHRoaXMgaXMgdG8gYmUgc2FmZS5cbiAgICAgIGZvcndhcmRlZEhvc3QgPSBmb3J3YXJkZWRIb3N0XG4gICAgICAgIC5zdWJzdHJpbmcoMCwgZm9yd2FyZGVkSG9zdC5pbmRleE9mKCcsJykpXG4gICAgICAgIC50cmltUmlnaHQoKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcS5wcm90b2NvbCArICc6Ly8nICsgZm9yd2FyZGVkSG9zdDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmVxLnByb3RvY29sICsgJzovLycgKyByZXEuZ2V0KCdob3N0Jyk7XG4gIH1cbn1cbiJdfQ==