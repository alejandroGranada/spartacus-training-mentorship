/* webpackIgnore: true */
import * as fs from 'fs';
import { RenderingStrategy, } from './ssr-optimization-options';
import { RenderingCache } from './rendering-cache';
/**
 * The rendered pages are kept in memory to be served on next request. If the `cache` is set to `false`, the
 * response is evicted as soon as the first successful response is successfully returned.
 */
export class OptimizedSsrEngine {
    constructor(expressEngine, ssrOptions) {
        this.expressEngine = expressEngine;
        this.ssrOptions = ssrOptions;
        this.currentConcurrency = 0;
        this.renderingCache = new RenderingCache(this.ssrOptions);
        this.templateCache = new Map();
    }
    get engineInstance() {
        return this.renderResponse.bind(this);
    }
    /**
     * When SSR page can not be returned in time, we're returning index.html of
     * the CSR application.
     * The CSR application is returned with the "Cache-Control: no-store" response-header. This notifies external cache systems to not use the CSR application for the subsequent request.
     */
    fallbackToCsr(response, filePath, callback) {
        response.set('Cache-Control', 'no-store');
        callback(undefined, this.getDocument(filePath));
    }
    getRenderingKey(request) {
        var _a;
        return ((_a = this.ssrOptions) === null || _a === void 0 ? void 0 : _a.renderKeyResolver) ? this.ssrOptions.renderKeyResolver(request)
            : request.originalUrl;
    }
    getRenderingStrategy(request) {
        var _a;
        return ((_a = this.ssrOptions) === null || _a === void 0 ? void 0 : _a.renderingStrategyResolver) ? this.ssrOptions.renderingStrategyResolver(request)
            : RenderingStrategy.DEFAULT;
    }
    shouldRender(request) {
        var _a, _b;
        const concurrencyLimitExceed = ((_a = this.ssrOptions) === null || _a === void 0 ? void 0 : _a.concurrency) ? this.currentConcurrency >= this.ssrOptions.concurrency
            : false;
        const isRendering = this.renderingCache.isRendering(this.getRenderingKey(request));
        if (isRendering) {
            this.log(`CSR fallback: rendering in progress (${request.url})`);
        }
        else if (concurrencyLimitExceed) {
            this.log(`CSR fallback: Concurrency limit exceeded (${(_b = this.ssrOptions) === null || _b === void 0 ? void 0 : _b.concurrency})`);
        }
        return ((!isRendering &&
            !concurrencyLimitExceed &&
            this.getRenderingStrategy(request) !== RenderingStrategy.ALWAYS_CSR) ||
            this.getRenderingStrategy(request) === RenderingStrategy.ALWAYS_SSR);
    }
    shouldTimeout(request) {
        var _a;
        return (!!((_a = this.ssrOptions) === null || _a === void 0 ? void 0 : _a.timeout) ||
            this.getRenderingStrategy(request) === RenderingStrategy.ALWAYS_SSR);
    }
    getTimeout(request) {
        var _a, _b, _c, _d;
        return this.getRenderingStrategy(request) === RenderingStrategy.ALWAYS_SSR
            ? (_b = (_a = this.ssrOptions) === null || _a === void 0 ? void 0 : _a.forcedSsrTimeout) !== null && _b !== void 0 ? _b : 60000 : (_d = (_c = this.ssrOptions) === null || _c === void 0 ? void 0 : _c.timeout) !== null && _d !== void 0 ? _d : 0;
    }
    returnCachedRender(request, callback) {
        var _a;
        const key = this.getRenderingKey(request);
        if (this.renderingCache.isReady(key)) {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const cached = this.renderingCache.get(key);
            callback(cached.err, cached.html);
            if (!((_a = this.ssrOptions) === null || _a === void 0 ? void 0 : _a.cache)) {
                // we drop cached rendering if caching is disabled
                this.renderingCache.clear(key);
            }
            return true;
        }
        return false;
    }
    renderResponse(filePath, options, callback) {
        const request = options.req;
        const response = options.res || options.req.res;
        const renderingKey = this.getRenderingKey(request);
        if (!this.returnCachedRender(request, callback)) {
            if (this.shouldRender(request)) {
                this.currentConcurrency++;
                let waitingForRender;
                if (this.shouldTimeout(request)) {
                    // establish timeout for rendering
                    const timeout = this.getTimeout(request);
                    waitingForRender = setTimeout(() => {
                        waitingForRender = undefined;
                        this.fallbackToCsr(response, filePath, callback);
                        this.log(`SSR rendering exceeded timeout ${timeout}, fallbacking to CSR for ${request === null || request === void 0 ? void 0 : request.url}`, false);
                    }, timeout);
                }
                else {
                    this.fallbackToCsr(response, filePath, callback);
                }
                // start rendering
                this.renderingCache.setAsRendering(renderingKey);
                this.log(`Rendering started (${request === null || request === void 0 ? void 0 : request.url})`);
                this.expressEngine(filePath, options, (err, html) => {
                    var _a;
                    this.currentConcurrency--;
                    this.log(`Rendering completed (${request === null || request === void 0 ? void 0 : request.url})`);
                    if (waitingForRender) {
                        // if request is still waiting for render, return it
                        clearTimeout(waitingForRender);
                        callback(err, html);
                        // store the render only if caching is enabled
                        if ((_a = this.ssrOptions) === null || _a === void 0 ? void 0 : _a.cache) {
                            this.renderingCache.store(renderingKey, err, html);
                        }
                        else {
                            this.renderingCache.clear(renderingKey);
                        }
                    }
                    else {
                        // store the render for future use
                        this.renderingCache.store(renderingKey, err, html);
                    }
                });
            }
            else {
                // if there is already rendering in progress, return the fallback
                this.fallbackToCsr(response, filePath, callback);
            }
        }
        else {
            this.log(`Render from cache (${request === null || request === void 0 ? void 0 : request.url})`);
        }
    }
    log(message, debug = true) {
        var _a;
        if (!debug || ((_a = this.ssrOptions) === null || _a === void 0 ? void 0 : _a.debug)) {
            console.log(message);
        }
    }
    /** Retrieve the document from the cache or the filesystem */
    getDocument(filePath) {
        let doc = this.templateCache.get(filePath);
        if (!doc) {
            // fs.readFileSync could be missing in a browser, specifically
            // in a unit tests with { node: { fs: 'empty' } } webpack configuration
            doc = (fs === null || fs === void 0 ? void 0 : fs.readFileSync) ? fs.readFileSync(filePath, 'utf-8') : '';
            this.templateCache.set(filePath, doc);
        }
        return doc;
    }
}
//# sourceMappingURL=data:application/json;base64,