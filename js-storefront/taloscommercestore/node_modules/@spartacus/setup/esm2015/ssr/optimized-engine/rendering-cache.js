export class RenderingCache {
    constructor(options) {
        this.options = options;
        this.renders = new Map();
    }
    setAsRendering(key) {
        this.renders.set(key, { rendering: true });
    }
    isRendering(key) {
        var _a;
        return !!((_a = this.renders.get(key)) === null || _a === void 0 ? void 0 : _a.rendering);
    }
    store(key, err, html) {
        var _a, _b;
        const entry = { err, html };
        if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.ttl) {
            entry.time = Date.now();
        }
        if ((_b = this.options) === null || _b === void 0 ? void 0 : _b.cacheSize) {
            this.renders.delete(key);
            if (this.renders.size >= this.options.cacheSize) {
                this.renders.delete(this.renders.keys().next().value);
            }
        }
        this.renders.set(key, entry);
    }
    get(key) {
        return this.renders.get(key);
    }
    clear(key) {
        this.renders.delete(key);
    }
    isReady(key) {
        const entry = this.renders.get(key);
        const isRenderPresent = (entry === null || entry === void 0 ? void 0 : entry.html) || (entry === null || entry === void 0 ? void 0 : entry.err);
        return isRenderPresent && this.isFresh(key);
    }
    isFresh(key) {
        var _a, _b, _c, _d;
        if (!((_a = this.options) === null || _a === void 0 ? void 0 : _a.ttl)) {
            return true;
        }
        return Date.now() - ((_c = (_b = this.renders.get(key)) === null || _b === void 0 ? void 0 : _b.time) !== null && _c !== void 0 ? _c : 0) < ((_d = this.options) === null || _d === void 0 ? void 0 : _d.ttl);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyaW5nLWNhY2hlLmpzIiwic291cmNlUm9vdCI6IkM6L1VzZXJzL1BhdHJ5ay9EZXNrdG9wL3NwYXJ0YWN1cy9jb3JlLWxpYnMvc2V0dXAvc3NyLyIsInNvdXJjZXMiOlsib3B0aW1pemVkLWVuZ2luZS9yZW5kZXJpbmctY2FjaGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBU0EsTUFBTSxPQUFPLGNBQWM7SUFHekIsWUFBb0IsT0FBZ0M7UUFBaEMsWUFBTyxHQUFQLE9BQU8sQ0FBeUI7UUFGMUMsWUFBTyxHQUFHLElBQUksR0FBRyxFQUEwQixDQUFDO0lBRUMsQ0FBQztJQUV4RCxjQUFjLENBQUMsR0FBVztRQUN4QixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsV0FBVyxDQUFDLEdBQVc7O1FBQ3JCLE9BQU8sQ0FBQyxRQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQywwQ0FBRSxTQUFTLENBQUEsQ0FBQztJQUM1QyxDQUFDO0lBRUQsS0FBSyxDQUFDLEdBQVcsRUFBRSxHQUFrQixFQUFFLElBQWE7O1FBQ2xELE1BQU0sS0FBSyxHQUFtQixFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQztRQUM1QyxVQUFJLElBQUksQ0FBQyxPQUFPLDBDQUFFLEdBQUcsRUFBRTtZQUNyQixLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztTQUN6QjtRQUNELFVBQUksSUFBSSxDQUFDLE9BQU8sMENBQUUsU0FBUyxFQUFFO1lBQzNCLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3pCLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUU7Z0JBQy9DLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDdkQ7U0FDRjtRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsR0FBRyxDQUFDLEdBQVc7UUFDYixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRCxLQUFLLENBQUMsR0FBVztRQUNmLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFRCxPQUFPLENBQUMsR0FBVztRQUNqQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNwQyxNQUFNLGVBQWUsR0FBRyxDQUFBLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxJQUFJLE1BQUksS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLEdBQUcsQ0FBQSxDQUFDO1FBQ2xELE9BQU8sZUFBZSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELE9BQU8sQ0FBQyxHQUFXOztRQUNqQixJQUFJLFFBQUMsSUFBSSxDQUFDLE9BQU8sMENBQUUsR0FBRyxDQUFBLEVBQUU7WUFDdEIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELE9BQU8sSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLGFBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLDBDQUFFLElBQUksbUNBQUksQ0FBQyxDQUFDLFVBQUcsSUFBSSxDQUFDLE9BQU8sMENBQUUsR0FBRyxDQUFBLENBQUM7SUFDN0UsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3NyT3B0aW1pemF0aW9uT3B0aW9ucyB9IGZyb20gJy4vc3NyLW9wdGltaXphdGlvbi1vcHRpb25zJztcblxuZXhwb3J0IGludGVyZmFjZSBSZW5kZXJpbmdFbnRyeSB7XG4gIGh0bWw/OiBhbnk7XG4gIGVycj86IGFueTtcbiAgdGltZT86IG51bWJlcjtcbiAgcmVuZGVyaW5nPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIFJlbmRlcmluZ0NhY2hlIHtcbiAgcHJvdGVjdGVkIHJlbmRlcnMgPSBuZXcgTWFwPHN0cmluZywgUmVuZGVyaW5nRW50cnk+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBvcHRpb25zPzogU3NyT3B0aW1pemF0aW9uT3B0aW9ucykge31cblxuICBzZXRBc1JlbmRlcmluZyhrZXk6IHN0cmluZykge1xuICAgIHRoaXMucmVuZGVycy5zZXQoa2V5LCB7IHJlbmRlcmluZzogdHJ1ZSB9KTtcbiAgfVxuXG4gIGlzUmVuZGVyaW5nKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhdGhpcy5yZW5kZXJzLmdldChrZXkpPy5yZW5kZXJpbmc7XG4gIH1cblxuICBzdG9yZShrZXk6IHN0cmluZywgZXJyPzogRXJyb3IgfCBudWxsLCBodG1sPzogc3RyaW5nKSB7XG4gICAgY29uc3QgZW50cnk6IFJlbmRlcmluZ0VudHJ5ID0geyBlcnIsIGh0bWwgfTtcbiAgICBpZiAodGhpcy5vcHRpb25zPy50dGwpIHtcbiAgICAgIGVudHJ5LnRpbWUgPSBEYXRlLm5vdygpO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zPy5jYWNoZVNpemUpIHtcbiAgICAgIHRoaXMucmVuZGVycy5kZWxldGUoa2V5KTtcbiAgICAgIGlmICh0aGlzLnJlbmRlcnMuc2l6ZSA+PSB0aGlzLm9wdGlvbnMuY2FjaGVTaXplKSB7XG4gICAgICAgIHRoaXMucmVuZGVycy5kZWxldGUodGhpcy5yZW5kZXJzLmtleXMoKS5uZXh0KCkudmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnJlbmRlcnMuc2V0KGtleSwgZW50cnkpO1xuICB9XG5cbiAgZ2V0KGtleTogc3RyaW5nKTogUmVuZGVyaW5nRW50cnkgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLnJlbmRlcnMuZ2V0KGtleSk7XG4gIH1cblxuICBjbGVhcihrZXk6IHN0cmluZykge1xuICAgIHRoaXMucmVuZGVycy5kZWxldGUoa2V5KTtcbiAgfVxuXG4gIGlzUmVhZHkoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBjb25zdCBlbnRyeSA9IHRoaXMucmVuZGVycy5nZXQoa2V5KTtcbiAgICBjb25zdCBpc1JlbmRlclByZXNlbnQgPSBlbnRyeT8uaHRtbCB8fCBlbnRyeT8uZXJyO1xuICAgIHJldHVybiBpc1JlbmRlclByZXNlbnQgJiYgdGhpcy5pc0ZyZXNoKGtleSk7XG4gIH1cblxuICBpc0ZyZXNoKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgaWYgKCF0aGlzLm9wdGlvbnM/LnR0bCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIERhdGUubm93KCkgLSAodGhpcy5yZW5kZXJzLmdldChrZXkpPy50aW1lID8/IDApIDwgdGhpcy5vcHRpb25zPy50dGw7XG4gIH1cbn1cbiJdfQ==