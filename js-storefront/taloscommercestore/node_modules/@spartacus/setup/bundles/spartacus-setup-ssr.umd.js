(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@spartacus/core'), require('fs'), require('@nguniversal/express-engine/tokens')) :
    typeof define === 'function' && define.amd ? define('@spartacus/setup/ssr', ['exports', '@spartacus/core', 'fs', '@nguniversal/express-engine/tokens'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.spartacus = global.spartacus || {}, global.spartacus.setup = global.spartacus.setup || {}, global.spartacus.setup.ssr = {}), global.core, global.fs, global.expressEngineTokens));
}(this, (function (exports, core, fs, tokens) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) { return e; } else {
            var n = Object.create(null);
            if (e) {
                Object.keys(e).forEach(function (k) {
                    if (k !== 'default') {
                        var d = Object.getOwnPropertyDescriptor(e, k);
                        Object.defineProperty(n, k, d.get ? d : {
                            enumerable: true,
                            get: function () {
                                return e[k];
                            }
                        });
                    }
                });
            }
            n['default'] = e;
            return Object.freeze(n);
        }
    }

    var fs__namespace = /*#__PURE__*/_interopNamespace(fs);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, exports) {
        for (var p in m)
            if (p !== "default" && !exports.hasOwnProperty(p))
                __createBinding(exports, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (Object.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    (function (RenderingStrategy) {
        RenderingStrategy[RenderingStrategy["ALWAYS_CSR"] = -1] = "ALWAYS_CSR";
        RenderingStrategy[RenderingStrategy["DEFAULT"] = 0] = "DEFAULT";
        RenderingStrategy[RenderingStrategy["ALWAYS_SSR"] = 1] = "ALWAYS_SSR";
    })(exports.RenderingStrategy || (exports.RenderingStrategy = {}));

    var RenderingCache = /** @class */ (function () {
        function RenderingCache(options) {
            this.options = options;
            this.renders = new Map();
        }
        RenderingCache.prototype.setAsRendering = function (key) {
            this.renders.set(key, { rendering: true });
        };
        RenderingCache.prototype.isRendering = function (key) {
            var _a;
            return !!((_a = this.renders.get(key)) === null || _a === void 0 ? void 0 : _a.rendering);
        };
        RenderingCache.prototype.store = function (key, err, html) {
            var _a, _b;
            var entry = { err: err, html: html };
            if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.ttl) {
                entry.time = Date.now();
            }
            if ((_b = this.options) === null || _b === void 0 ? void 0 : _b.cacheSize) {
                this.renders.delete(key);
                if (this.renders.size >= this.options.cacheSize) {
                    this.renders.delete(this.renders.keys().next().value);
                }
            }
            this.renders.set(key, entry);
        };
        RenderingCache.prototype.get = function (key) {
            return this.renders.get(key);
        };
        RenderingCache.prototype.clear = function (key) {
            this.renders.delete(key);
        };
        RenderingCache.prototype.isReady = function (key) {
            var entry = this.renders.get(key);
            var isRenderPresent = (entry === null || entry === void 0 ? void 0 : entry.html) || (entry === null || entry === void 0 ? void 0 : entry.err);
            return isRenderPresent && this.isFresh(key);
        };
        RenderingCache.prototype.isFresh = function (key) {
            var _a, _b, _c, _d;
            if (!((_a = this.options) === null || _a === void 0 ? void 0 : _a.ttl)) {
                return true;
            }
            return Date.now() - ((_c = (_b = this.renders.get(key)) === null || _b === void 0 ? void 0 : _b.time) !== null && _c !== void 0 ? _c : 0) < ((_d = this.options) === null || _d === void 0 ? void 0 : _d.ttl);
        };
        return RenderingCache;
    }());

    /* webpackIgnore: true */
    /**
     * The rendered pages are kept in memory to be served on next request. If the `cache` is set to `false`, the
     * response is evicted as soon as the first successful response is successfully returned.
     */
    var OptimizedSsrEngine = /** @class */ (function () {
        function OptimizedSsrEngine(expressEngine, ssrOptions) {
            this.expressEngine = expressEngine;
            this.ssrOptions = ssrOptions;
            this.currentConcurrency = 0;
            this.renderingCache = new RenderingCache(this.ssrOptions);
            this.templateCache = new Map();
        }
        Object.defineProperty(OptimizedSsrEngine.prototype, "engineInstance", {
            get: function () {
                return this.renderResponse.bind(this);
            },
            enumerable: false,
            configurable: true
        });
        /**
         * When SSR page can not be returned in time, we're returning index.html of
         * the CSR application.
         * The CSR application is returned with the "Cache-Control: no-store" response-header. This notifies external cache systems to not use the CSR application for the subsequent request.
         */
        OptimizedSsrEngine.prototype.fallbackToCsr = function (response, filePath, callback) {
            response.set('Cache-Control', 'no-store');
            callback(undefined, this.getDocument(filePath));
        };
        OptimizedSsrEngine.prototype.getRenderingKey = function (request) {
            var _a;
            return ((_a = this.ssrOptions) === null || _a === void 0 ? void 0 : _a.renderKeyResolver) ? this.ssrOptions.renderKeyResolver(request)
                : request.originalUrl;
        };
        OptimizedSsrEngine.prototype.getRenderingStrategy = function (request) {
            var _a;
            return ((_a = this.ssrOptions) === null || _a === void 0 ? void 0 : _a.renderingStrategyResolver) ? this.ssrOptions.renderingStrategyResolver(request)
                : exports.RenderingStrategy.DEFAULT;
        };
        OptimizedSsrEngine.prototype.shouldRender = function (request) {
            var _a, _b;
            var concurrencyLimitExceed = ((_a = this.ssrOptions) === null || _a === void 0 ? void 0 : _a.concurrency) ? this.currentConcurrency >= this.ssrOptions.concurrency
                : false;
            var isRendering = this.renderingCache.isRendering(this.getRenderingKey(request));
            if (isRendering) {
                this.log("CSR fallback: rendering in progress (" + request.url + ")");
            }
            else if (concurrencyLimitExceed) {
                this.log("CSR fallback: Concurrency limit exceeded (" + ((_b = this.ssrOptions) === null || _b === void 0 ? void 0 : _b.concurrency) + ")");
            }
            return ((!isRendering &&
                !concurrencyLimitExceed &&
                this.getRenderingStrategy(request) !== exports.RenderingStrategy.ALWAYS_CSR) ||
                this.getRenderingStrategy(request) === exports.RenderingStrategy.ALWAYS_SSR);
        };
        OptimizedSsrEngine.prototype.shouldTimeout = function (request) {
            var _a;
            return (!!((_a = this.ssrOptions) === null || _a === void 0 ? void 0 : _a.timeout) ||
                this.getRenderingStrategy(request) === exports.RenderingStrategy.ALWAYS_SSR);
        };
        OptimizedSsrEngine.prototype.getTimeout = function (request) {
            var _a, _b, _c, _d;
            return this.getRenderingStrategy(request) === exports.RenderingStrategy.ALWAYS_SSR
                ? (_b = (_a = this.ssrOptions) === null || _a === void 0 ? void 0 : _a.forcedSsrTimeout) !== null && _b !== void 0 ? _b : 60000 : (_d = (_c = this.ssrOptions) === null || _c === void 0 ? void 0 : _c.timeout) !== null && _d !== void 0 ? _d : 0;
        };
        OptimizedSsrEngine.prototype.returnCachedRender = function (request, callback) {
            var _a;
            var key = this.getRenderingKey(request);
            if (this.renderingCache.isReady(key)) {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                var cached = this.renderingCache.get(key);
                callback(cached.err, cached.html);
                if (!((_a = this.ssrOptions) === null || _a === void 0 ? void 0 : _a.cache)) {
                    // we drop cached rendering if caching is disabled
                    this.renderingCache.clear(key);
                }
                return true;
            }
            return false;
        };
        OptimizedSsrEngine.prototype.renderResponse = function (filePath, options, callback) {
            var _this = this;
            var request = options.req;
            var response = options.res || options.req.res;
            var renderingKey = this.getRenderingKey(request);
            if (!this.returnCachedRender(request, callback)) {
                if (this.shouldRender(request)) {
                    this.currentConcurrency++;
                    var waitingForRender_1;
                    if (this.shouldTimeout(request)) {
                        // establish timeout for rendering
                        var timeout_1 = this.getTimeout(request);
                        waitingForRender_1 = setTimeout(function () {
                            waitingForRender_1 = undefined;
                            _this.fallbackToCsr(response, filePath, callback);
                            _this.log("SSR rendering exceeded timeout " + timeout_1 + ", fallbacking to CSR for " + (request === null || request === void 0 ? void 0 : request.url), false);
                        }, timeout_1);
                    }
                    else {
                        this.fallbackToCsr(response, filePath, callback);
                    }
                    // start rendering
                    this.renderingCache.setAsRendering(renderingKey);
                    this.log("Rendering started (" + (request === null || request === void 0 ? void 0 : request.url) + ")");
                    this.expressEngine(filePath, options, function (err, html) {
                        var _a;
                        _this.currentConcurrency--;
                        _this.log("Rendering completed (" + (request === null || request === void 0 ? void 0 : request.url) + ")");
                        if (waitingForRender_1) {
                            // if request is still waiting for render, return it
                            clearTimeout(waitingForRender_1);
                            callback(err, html);
                            // store the render only if caching is enabled
                            if ((_a = _this.ssrOptions) === null || _a === void 0 ? void 0 : _a.cache) {
                                _this.renderingCache.store(renderingKey, err, html);
                            }
                            else {
                                _this.renderingCache.clear(renderingKey);
                            }
                        }
                        else {
                            // store the render for future use
                            _this.renderingCache.store(renderingKey, err, html);
                        }
                    });
                }
                else {
                    // if there is already rendering in progress, return the fallback
                    this.fallbackToCsr(response, filePath, callback);
                }
            }
            else {
                this.log("Render from cache (" + (request === null || request === void 0 ? void 0 : request.url) + ")");
            }
        };
        OptimizedSsrEngine.prototype.log = function (message, debug) {
            if (debug === void 0) { debug = true; }
            var _a;
            if (!debug || ((_a = this.ssrOptions) === null || _a === void 0 ? void 0 : _a.debug)) {
                console.log(message);
            }
        };
        /** Retrieve the document from the cache or the filesystem */
        OptimizedSsrEngine.prototype.getDocument = function (filePath) {
            var doc = this.templateCache.get(filePath);
            if (!doc) {
                // fs.readFileSync could be missing in a browser, specifically
                // in a unit tests with { node: { fs: 'empty' } } webpack configuration
                doc = (fs__namespace === null || fs__namespace === void 0 ? void 0 : fs.readFileSync) ? fs.readFileSync(filePath, 'utf-8') : '';
                this.templateCache.set(filePath, doc);
            }
            return doc;
        };
        return OptimizedSsrEngine;
    }());

    /**
     * The wrapper over the standard ngExpressEngine, that provides tokens for Spartacus
     * @param ngExpressEngine
     */
    var NgExpressEngineDecorator = /** @class */ (function () {
        function NgExpressEngineDecorator() {
        }
        /**
         * Returns the higher order ngExpressEngine with provided tokens for Spartacus
         *
         * @param ngExpressEngine
         */
        NgExpressEngineDecorator.get = function (ngExpressEngine, optimizationOptions) {
            var result = decorateExpressEngine(ngExpressEngine, optimizationOptions);
            return result;
        };
        return NgExpressEngineDecorator;
    }());
    function decorateExpressEngine(ngExpressEngine, optimizationOptions) {
        if (optimizationOptions === void 0) { optimizationOptions = {
            concurrency: 20,
            timeout: 3000,
        }; }
        return function (setupOptions) {
            var _a;
            var engineInstance = ngExpressEngine(Object.assign(Object.assign({}, setupOptions), { providers: __spread(getServerRequestProviders(), ((_a = setupOptions.providers) !== null && _a !== void 0 ? _a : [])) }));
            // apply optimization wrapper if optimization options were defined
            return optimizationOptions
                ? new OptimizedSsrEngine(engineInstance, optimizationOptions)
                    .engineInstance
                : engineInstance;
        };
    }
    /**
     * Returns Spartacus providers to be passed to the Angular express engine (in SSR)
     *
     * @param options
     */
    function getServerRequestProviders() {
        return [
            {
                provide: core.SERVER_REQUEST_URL,
                useFactory: getRequestUrl,
                deps: [tokens.REQUEST],
            },
            {
                provide: core.SERVER_REQUEST_ORIGIN,
                useFactory: getRequestOrigin,
                deps: [tokens.REQUEST],
            },
        ];
    }
    function getRequestUrl(req) {
        return getRequestOrigin(req) + req.originalUrl;
    }
    function getRequestOrigin(req) {
        // If express is resolving and trusting X-Forwarded-Host, we want to take it
        // into an account to properly generate request origin.
        var trustProxyFn = req.app.get('trust proxy fn');
        var forwardedHost = req.get('X-Forwarded-Host');
        if (forwardedHost && trustProxyFn(req.connection.remoteAddress, 0)) {
            if (forwardedHost.indexOf(',') !== -1) {
                // Note: X-Forwarded-Host is normally only ever a
                //       single value, but this is to be safe.
                forwardedHost = forwardedHost
                    .substring(0, forwardedHost.indexOf(','))
                    .trimRight();
            }
            return req.protocol + '://' + forwardedHost;
        }
        else {
            return req.protocol + '://' + req.get('host');
        }
    }

    /**
     * Generated bundle index. Do not edit.
     */

    exports.NgExpressEngineDecorator = NgExpressEngineDecorator;
    exports.OptimizedSsrEngine = OptimizedSsrEngine;
    exports.RenderingCache = RenderingCache;
    exports.getServerRequestProviders = getServerRequestProviders;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=spartacus-setup-ssr.umd.js.map
