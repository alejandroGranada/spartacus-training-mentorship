import { CheckoutStepType, DeliveryModePreferences, StorefrontModule, CmsLibModule, layoutConfig, mediaConfig, defaultCmsContentProviders } from '@spartacus/storefront';
import { HttpClientModule } from '@angular/common/http';
import { NgModule } from '@angular/core';
import { provideConfig, CostCenterModule, provideDefaultConfig } from '@spartacus/core';

const defaultB2bOccConfig = {
    backend: {
        occ: {
            endpoints: {
                user: 'orgUsers/${userId}',
                userUpdateProfile: 'users/${userId}',
                userCloseAccount: 'users/${userId}',
                addEntries: 'orgUsers/${userId}/carts/${cartId}/entries?quantity=${quantity}',
                setDeliveryAddress: 'orgUsers/${userId}/carts/${cartId}/addresses/delivery',
                placeOrder: 'orgUsers/${userId}/orders?fields=FULL',
                scheduleReplenishmentOrder: 'orgUsers/${userId}/replenishmentOrders?fields=FULL,costCenter(FULL),purchaseOrderNumber,paymentType',
                replenishmentOrderDetails: 'users/${userId}/replenishmentOrders/${replenishmentOrderCode}?fields=FULL,costCenter(FULL),purchaseOrderNumber,paymentType,user',
                replenishmentOrderDetailsHistory: 'users/${userId}/replenishmentOrders/${replenishmentOrderCode}/orders',
                cancelReplenishmentOrder: 'users/${userId}/replenishmentOrders/${replenishmentOrderCode}?fields=FULL,costCenter(FULL),purchaseOrderNumber,paymentType,user',
                replenishmentOrderHistory: 'users/${userId}/replenishmentOrders?fields=FULL,replenishmentOrders(FULL, purchaseOrderNumber)',
            },
        },
    },
};

const defaultB2bCheckoutConfig = {
    checkout: {
        steps: [
            {
                id: 'paymentType',
                name: 'checkoutProgress.methodOfPayment',
                routeName: 'checkoutPaymentType',
                type: [CheckoutStepType.PAYMENT_TYPE],
            },
            {
                id: 'shippingAddress',
                name: 'checkoutProgress.shippingAddress',
                routeName: 'checkoutShippingAddress',
                type: [CheckoutStepType.SHIPPING_ADDRESS],
            },
            {
                id: 'deliveryMode',
                name: 'checkoutProgress.deliveryMode',
                routeName: 'checkoutDeliveryMode',
                type: [CheckoutStepType.DELIVERY_MODE],
            },
            {
                id: 'paymentDetails',
                name: 'checkoutProgress.paymentDetails',
                routeName: 'checkoutPaymentDetails',
                type: [CheckoutStepType.PAYMENT_DETAILS],
            },
            {
                id: 'reviewOrder',
                name: 'checkoutProgress.reviewOrder',
                routeName: 'checkoutReviewOrder',
                type: [CheckoutStepType.REVIEW_ORDER],
            },
        ],
        express: false,
        defaultDeliveryMode: [DeliveryModePreferences.FREE],
        guest: false,
    },
};

class B2bStorefrontModule {
    static withConfig(config) {
        return {
            ngModule: B2bStorefrontModule,
            providers: [provideConfig(config)],
        };
    }
}
B2bStorefrontModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    HttpClientModule,
                    StorefrontModule,
                    // the cms lib module contains all components that added in the bundle
                    CmsLibModule,
                    CostCenterModule.forRoot(),
                ],
                providers: [
                    provideDefaultConfig(layoutConfig),
                    provideDefaultConfig(mediaConfig),
                    provideDefaultConfig(defaultB2bOccConfig),
                    provideDefaultConfig(defaultB2bCheckoutConfig),
                    ...defaultCmsContentProviders,
                ],
                exports: [StorefrontModule],
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { B2bStorefrontModule, defaultB2bCheckoutConfig, defaultB2bOccConfig };
//# sourceMappingURL=spartacus-setup.js.map
