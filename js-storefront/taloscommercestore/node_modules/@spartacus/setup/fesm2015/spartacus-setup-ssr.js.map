{"version":3,"file":"spartacus-setup-ssr.js","sources":["../../../core-libs/setup/ssr/optimized-engine/ssr-optimization-options.ts","../../../core-libs/setup/ssr/optimized-engine/rendering-cache.ts","../../../core-libs/setup/ssr/optimized-engine/optimized-ssr-engine.ts","../../../core-libs/setup/ssr/engine-decorator/ng-express-engine-decorator.ts","../../../core-libs/setup/ssr/spartacus-setup-ssr.ts"],"sourcesContent":["import { Request } from 'express';\n\nexport interface SsrOptimizationOptions {\n  /**\n   * Time in milliseconds to wait for SSR rendering to happen.\n   */\n  timeout?: number;\n\n  /**\n   * Enable in-memory cache for pre-rendered urls.\n   *\n   * If disabled, the cache will still be used to temporarily store\n   * renders finished after csr fallback in order to serve them with\n   * next request only.\n   */\n  cache?: boolean;\n\n  /**\n   * Limit the cache size\n   *\n   * Specified number of entries that will be kept in cache, allows to keep\n   * memory usage under control.\n   *\n   * Can also be use when `cache` option is set to false. It will then limit the\n   * number of renders that timeouts and are kept in temporary cache, waiting\n   * to be served with next request.\n   */\n  cacheSize?: number;\n\n  /**\n   * Limit number of concurrent rendering\n   */\n  concurrency?: number;\n\n  /**\n   * Time in milliseconds after prerendered page is becoming stale and should\n   * be rendered again.\n   */\n  ttl?: number;\n\n  /**\n   * Allows overriding default key generator for custom differentiating\n   * between rendered pages. By default it uses req.originalUrl\n   *\n   * @param req\n   */\n  renderKeyResolver?: (req: Request) => string;\n\n  /**\n   * Allows defining custom rendering strategy per request\n   *\n   * @param req\n   */\n  renderingStrategyResolver?: (req: Request) => RenderingStrategy;\n\n  /**\n   * Time in milliseconds to wait for rendering when SSR_ALWAYS render strategy is set for the request.\n   * Default value is 60 seconds.\n   */\n  forcedSsrTimeout?: number;\n\n  /**\n   * Enable detailed logs for troubleshooting problems\n   */\n  debug?: boolean;\n}\n\nexport enum RenderingStrategy {\n  ALWAYS_CSR = -1,\n  DEFAULT = 0,\n  ALWAYS_SSR = 1,\n}\n","import { SsrOptimizationOptions } from './ssr-optimization-options';\n\nexport interface RenderingEntry {\n  html?: any;\n  err?: any;\n  time?: number;\n  rendering?: boolean;\n}\n\nexport class RenderingCache {\n  protected renders = new Map<string, RenderingEntry>();\n\n  constructor(private options?: SsrOptimizationOptions) {}\n\n  setAsRendering(key: string) {\n    this.renders.set(key, { rendering: true });\n  }\n\n  isRendering(key: string): boolean {\n    return !!this.renders.get(key)?.rendering;\n  }\n\n  store(key: string, err?: Error | null, html?: string) {\n    const entry: RenderingEntry = { err, html };\n    if (this.options?.ttl) {\n      entry.time = Date.now();\n    }\n    if (this.options?.cacheSize) {\n      this.renders.delete(key);\n      if (this.renders.size >= this.options.cacheSize) {\n        this.renders.delete(this.renders.keys().next().value);\n      }\n    }\n    this.renders.set(key, entry);\n  }\n\n  get(key: string): RenderingEntry | undefined {\n    return this.renders.get(key);\n  }\n\n  clear(key: string) {\n    this.renders.delete(key);\n  }\n\n  isReady(key: string): boolean {\n    const entry = this.renders.get(key);\n    const isRenderPresent = entry?.html || entry?.err;\n    return isRenderPresent && this.isFresh(key);\n  }\n\n  isFresh(key: string): boolean {\n    if (!this.options?.ttl) {\n      return true;\n    }\n\n    return Date.now() - (this.renders.get(key)?.time ?? 0) < this.options?.ttl;\n  }\n}\n","/* webpackIgnore: true */\nimport * as fs from 'fs';\nimport {\n  RenderingStrategy,\n  SsrOptimizationOptions,\n} from './ssr-optimization-options';\nimport { RenderingCache } from './rendering-cache';\nimport { NgExpressEngineInstance } from '../engine-decorator/ng-express-engine-decorator';\nimport { Request, Response } from 'express';\n\n/**\n * The rendered pages are kept in memory to be served on next request. If the `cache` is set to `false`, the\n * response is evicted as soon as the first successful response is successfully returned.\n */\nexport class OptimizedSsrEngine {\n  protected currentConcurrency = 0;\n  protected renderingCache = new RenderingCache(this.ssrOptions);\n  private templateCache = new Map<string, string>();\n\n  get engineInstance(): NgExpressEngineInstance {\n    return this.renderResponse.bind(this);\n  }\n\n  constructor(\n    protected expressEngine: NgExpressEngineInstance,\n    protected ssrOptions?: SsrOptimizationOptions\n  ) {}\n\n  /**\n   * When SSR page can not be returned in time, we're returning index.html of\n   * the CSR application.\n   * The CSR application is returned with the \"Cache-Control: no-store\" response-header. This notifies external cache systems to not use the CSR application for the subsequent request.\n   */\n  protected fallbackToCsr(\n    response: Response,\n    filePath: string,\n    callback: (err?: Error | null, html?: string) => void\n  ) {\n    response.set('Cache-Control', 'no-store');\n    callback(undefined, this.getDocument(filePath));\n  }\n\n  protected getRenderingKey(request: Request): string {\n    return this.ssrOptions?.renderKeyResolver\n      ? this.ssrOptions.renderKeyResolver(request)\n      : request.originalUrl;\n  }\n\n  protected getRenderingStrategy(request: Request): RenderingStrategy {\n    return this.ssrOptions?.renderingStrategyResolver\n      ? this.ssrOptions.renderingStrategyResolver(request)\n      : RenderingStrategy.DEFAULT;\n  }\n\n  protected shouldRender(request: Request): boolean {\n    const concurrencyLimitExceed = this.ssrOptions?.concurrency\n      ? this.currentConcurrency >= this.ssrOptions.concurrency\n      : false;\n\n    const isRendering = this.renderingCache.isRendering(\n      this.getRenderingKey(request)\n    );\n\n    if (isRendering) {\n      this.log(`CSR fallback: rendering in progress (${request.url})`);\n    } else if (concurrencyLimitExceed) {\n      this.log(\n        `CSR fallback: Concurrency limit exceeded (${this.ssrOptions?.concurrency})`\n      );\n    }\n\n    return (\n      (!isRendering &&\n        !concurrencyLimitExceed &&\n        this.getRenderingStrategy(request) !== RenderingStrategy.ALWAYS_CSR) ||\n      this.getRenderingStrategy(request) === RenderingStrategy.ALWAYS_SSR\n    );\n  }\n\n  protected shouldTimeout(request: Request): boolean {\n    return (\n      !!this.ssrOptions?.timeout ||\n      this.getRenderingStrategy(request) === RenderingStrategy.ALWAYS_SSR\n    );\n  }\n\n  protected getTimeout(request: Request): number {\n    return this.getRenderingStrategy(request) === RenderingStrategy.ALWAYS_SSR\n      ? this.ssrOptions?.forcedSsrTimeout ?? 60000\n      : this.ssrOptions?.timeout ?? 0;\n  }\n\n  protected returnCachedRender(\n    request: Request,\n    callback: (err?: Error | null, html?: string) => void\n  ): boolean {\n    const key = this.getRenderingKey(request);\n\n    if (this.renderingCache.isReady(key)) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const cached = this.renderingCache.get(key)!;\n      callback(cached.err, cached.html);\n\n      if (!this.ssrOptions?.cache) {\n        // we drop cached rendering if caching is disabled\n        this.renderingCache.clear(key);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  protected renderResponse(\n    filePath: string,\n    options: any,\n    callback: (err?: Error | null, html?: string) => void\n  ): void {\n    const request: Request = options.req;\n    const response: Response = options.res || options.req.res;\n\n    const renderingKey = this.getRenderingKey(request);\n\n    if (!this.returnCachedRender(request, callback)) {\n      if (this.shouldRender(request)) {\n        this.currentConcurrency++;\n        let waitingForRender: NodeJS.Timeout | undefined;\n\n        if (this.shouldTimeout(request)) {\n          // establish timeout for rendering\n          const timeout = this.getTimeout(request);\n          waitingForRender = setTimeout(() => {\n            waitingForRender = undefined;\n            this.fallbackToCsr(response, filePath, callback);\n            this.log(\n              `SSR rendering exceeded timeout ${timeout}, fallbacking to CSR for ${request?.url}`,\n              false\n            );\n          }, timeout);\n        } else {\n          this.fallbackToCsr(response, filePath, callback);\n        }\n\n        // start rendering\n        this.renderingCache.setAsRendering(renderingKey);\n        this.log(`Rendering started (${request?.url})`);\n        this.expressEngine(filePath, options, (err, html) => {\n          this.currentConcurrency--;\n\n          this.log(`Rendering completed (${request?.url})`);\n\n          if (waitingForRender) {\n            // if request is still waiting for render, return it\n            clearTimeout(waitingForRender);\n            callback(err, html);\n\n            // store the render only if caching is enabled\n            if (this.ssrOptions?.cache) {\n              this.renderingCache.store(renderingKey, err, html);\n            } else {\n              this.renderingCache.clear(renderingKey);\n            }\n          } else {\n            // store the render for future use\n            this.renderingCache.store(renderingKey, err, html);\n          }\n        });\n      } else {\n        // if there is already rendering in progress, return the fallback\n        this.fallbackToCsr(response, filePath, callback);\n      }\n    } else {\n      this.log(`Render from cache (${request?.url})`);\n    }\n  }\n\n  protected log(message: string, debug = true) {\n    if (!debug || this.ssrOptions?.debug) {\n      console.log(message);\n    }\n  }\n\n  /** Retrieve the document from the cache or the filesystem */\n  protected getDocument(filePath: string): string {\n    let doc = this.templateCache.get(filePath);\n\n    if (!doc) {\n      // fs.readFileSync could be missing in a browser, specifically\n      // in a unit tests with { node: { fs: 'empty' } } webpack configuration\n      doc = fs?.readFileSync ? fs.readFileSync(filePath, 'utf-8') : '';\n      this.templateCache.set(filePath, doc);\n    }\n\n    return doc;\n  }\n}\n","import { NgModuleFactory, StaticProvider, Type } from '@angular/core';\nimport { SERVER_REQUEST_ORIGIN, SERVER_REQUEST_URL } from '@spartacus/core';\nimport { OptimizedSsrEngine } from '../optimized-engine/optimized-ssr-engine';\nimport { SsrOptimizationOptions } from '../optimized-engine/ssr-optimization-options';\nimport { REQUEST } from '@nguniversal/express-engine/tokens';\nimport { Request } from 'express';\n\n/**\n * These are the allowed options for the engine\n */\nexport interface NgSetupOptions {\n  bootstrap: Type<{}> | NgModuleFactory<{}>;\n  providers?: StaticProvider[];\n}\n\n/**\n * These are the allowed options for the render\n */\nexport interface RenderOptions extends NgSetupOptions {\n  req: {\n    protocol: string;\n    originalUrl: string;\n    get: (_: string) => string;\n  }; // Request;\n  res?: any; // Response;\n  url?: string;\n  document?: string;\n}\n\nexport type NgExpressEngineInstance = (\n  filePath: string,\n  options: RenderOptions,\n  callback: (err?: Error | null, html?: string) => void\n) => void;\n\nexport type NgExpressEngine = (\n  setupOptions: NgSetupOptions\n) => NgExpressEngineInstance;\n\n/**\n * The wrapper over the standard ngExpressEngine, that provides tokens for Spartacus\n * @param ngExpressEngine\n */\nexport class NgExpressEngineDecorator {\n  /**\n   * Returns the higher order ngExpressEngine with provided tokens for Spartacus\n   *\n   * @param ngExpressEngine\n   */\n  static get(\n    ngExpressEngine: NgExpressEngine,\n    optimizationOptions?: SsrOptimizationOptions | null\n  ): NgExpressEngine {\n    const result = decorateExpressEngine(ngExpressEngine, optimizationOptions);\n    return result;\n  }\n}\n\nexport function decorateExpressEngine(\n  ngExpressEngine: NgExpressEngine,\n  optimizationOptions: SsrOptimizationOptions | null = {\n    concurrency: 20,\n    timeout: 3000,\n  }\n) {\n  return function (setupOptions: NgSetupOptions) {\n    const engineInstance = ngExpressEngine({\n      ...setupOptions,\n      providers: [\n        // add spartacus related providers\n        ...getServerRequestProviders(),\n        ...(setupOptions.providers ?? []),\n      ],\n    });\n\n    // apply optimization wrapper if optimization options were defined\n    return optimizationOptions\n      ? new OptimizedSsrEngine(engineInstance, optimizationOptions)\n          .engineInstance\n      : engineInstance;\n  };\n}\n\n/**\n * Returns Spartacus providers to be passed to the Angular express engine (in SSR)\n *\n * @param options\n */\nexport function getServerRequestProviders(): StaticProvider[] {\n  return [\n    {\n      provide: SERVER_REQUEST_URL,\n      useFactory: getRequestUrl,\n      deps: [REQUEST],\n    },\n    {\n      provide: SERVER_REQUEST_ORIGIN,\n      useFactory: getRequestOrigin,\n      deps: [REQUEST],\n    },\n  ];\n}\n\nfunction getRequestUrl(req: Request): string {\n  return getRequestOrigin(req) + req.originalUrl;\n}\n\nfunction getRequestOrigin(req: Request): string {\n  // If express is resolving and trusting X-Forwarded-Host, we want to take it\n  // into an account to properly generate request origin.\n  const trustProxyFn = req.app.get('trust proxy fn');\n  let forwardedHost = req.get('X-Forwarded-Host');\n  if (forwardedHost && trustProxyFn(req.connection.remoteAddress, 0)) {\n    if (forwardedHost.indexOf(',') !== -1) {\n      // Note: X-Forwarded-Host is normally only ever a\n      //       single value, but this is to be safe.\n      forwardedHost = forwardedHost\n        .substring(0, forwardedHost.indexOf(','))\n        .trimRight();\n    }\n    return req.protocol + '://' + forwardedHost;\n  } else {\n    return req.protocol + '://' + req.get('host');\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {NgExpressEngineInstance as ɵa} from './engine-decorator/ng-express-engine-decorator';"],"names":["fs.readFileSync"],"mappings":"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"}